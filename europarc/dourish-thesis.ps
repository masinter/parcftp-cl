%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 20 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /Helvetica FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
5 0 /Helvetica-Oblique FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
81.65 771.95 513.65 787.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(.) 511.65 781.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81.65 87.95 513.65 744.95 R
7 X
V
1 24 Q
0 X
(Open Implementation and Flexibility) 91.6 604.95 T
(in CSCW T) 198.53 573.95 T
(oolkits) 319.42 573.95 T
2 16 Q
(Paul Dourish) 251.86 501.29 T
0 12 Q
(A dissertation submitted in partial ful\336llment) 189.14 433.95 T
(of the requirements for the degree of) 209.68 417.95 T
(Doctor of Philisophy) 247.31 401.95 T
(of the) 283.82 385.95 T
(University of London.) 244.15 369.95 T
(Department of Computer Science) 217.16 321.95 T
(University College London) 231.98 305.95 T
(June 1996) 273.15 257.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
81.65 771.95 513.65 787.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(.) 511.65 781.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81.65 87.95 513.65 744.95 R
7 X
V
3 14 Q
0 X
(This distribution copy has been r) 146.7 621.62 T
(epaginated to r) 330.91 621.62 T
(educe) 415.95 621.62 T
(its size. The page numbers ar) 150.14 602.62 T
(e not the same as in the) 313.73 602.62 T
(submitted version. Please do not cite anything by page number) 120.53 583.62 T
(.) 471.27 583.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Abstract.) 502.54 763.81 T
99.65 58 531.65 69.95 R
7 X
V
0 X
(3) 527.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Abstract) 99.65 646.29 T
0 11 Q
0.05 (The design of Computer-Supported Cooperative Work \050CSCW\051 systems involves a variety of dis-) 99.65 557.62 P
0.78 (ciplinary approaches, drawing as much on sociological and psychological perspectives on group) 99.65 544.62 P
0.25 (and individual activity as on technical approaches to designing distributed systems. Traditionally,) 99.65 531.62 P
0.03 (these have been applied independently\321the technical approaches focussing on design criteria and) 99.65 518.62 P
-0.28 (implementation strategies, the social approaches focussing on the analysis of working activity with) 99.65 505.62 P
(or without technological support.) 99.65 492.62 T
0.47 (However, the disciplines are more strongly related than this suggests. Technical strategies\321such) 99.65 474.62 P
-0.43 (as the mechanisms for data replication, distribution and coordination\321have a significant impact on) 99.65 461.62 P
-0.42 (the forms of interaction in which users can engage, and therefore on how their work proceeds. Con-) 99.65 448.62 P
0.64 (sequently, the findings of sociological and psychological investigations of collaborative working) 99.65 435.62 P
(have direct impact for how we go about designing collaborative systems.) 99.65 422.62 T
-0.21 (In support of this relationship, this thesis concentrates on the provision of flexibility in CSCW sys-) 99.65 404.62 P
0.18 (tems, and, in particular, in toolkits from which they are generated. Flexibility is key to supporting) 99.65 391.62 P
0.1 (many characteristics of group behaviour detailed by observational investigations\321the improvised) 99.65 378.62 P
-0.33 (nature of work and activity, individual and group tailoring, customisation and re-purposing, chang-) 99.65 365.62 P
(ing group membership and activity over the course of a collaboration, and so forth.) 99.65 352.62 T
-0.16 (Based on an analysis of current CSCW toolkits, and on the interaction between user behaviour and) 99.65 334.62 P
0.41 (system design, I will demonstrate that, as in many other areas of system development, traditional) 99.65 321.62 P
-0.48 (notions of abstraction in system design mitigate against the design of open, flexible systems. \322Open) 99.65 308.62 P
1.63 (Implementation\323 is an emerging approach based on the systematic and principled exposure of) 99.65 295.62 P
1.1 (mechanism in system components, \322opening up\323 abstractions to examination and manipulation.) 99.65 282.62 P
-0.43 (Concentrating particularly on distributed data management and concurrency, I will show how these) 99.65 269.62 P
-0.07 (ideas can be exploited to provide an open and customisable framework enabling programmers and) 99.65 256.62 P
(end-users to tailor toolkit structures to the needs of applications and domains.) 99.65 243.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 495.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Abstract) 63.65 763.81 T
(.) 493.65 763.81 T
63.65 58 495.65 69.95 R
7 X
V
0 X
(4) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 495.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Dedication.) 494.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(5) 527.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Dedication) 45.65 646.29 T
0 11 Q
-0.04 (The character of Prospero, the magus of Shakespeare\325s \322The Tempest\323, was reputedly inspired by the Elizabe-) 45.65 554.42 P
-0.29 (than scientist, alchemist and Hermetic philosopher, John Dee \0501527\3201608\051. The tenets of Hermetic philosophy,) 45.65 541.42 P
-0.33 (while intricate, have a simple basis\321that the structure of our earthly world reflects the structure of the heavens.) 45.65 528.42 P
-0.06 (By understanding the earthly world, the alchemist would learn about the world of the spirits; by gaining power) 45.65 515.42 P
0.21 (and control over the earthly world, he would gain \322magical\323 power and control of the higher dimensions. \322As) 45.65 502.42 P
-0.07 (above, so below.\323 So the transmutation of base matter to gold was a metaphor for the transformation of man to) 45.65 489.42 P
0.43 (god; a transformation which could be achieved by the adept once the correspondence from above to below is) 45.65 476.42 P
(understood, since the pattern of man must be the same as the pattern of god.) 45.65 463.42 T
0.07 (Since I have spent much of the past few years trying to understand and control the link between what is below) 45.65 443.42 P
(and what is above, this thesis is dedicated to John Dee.) 45.65 430.42 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Dedication) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(6) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Acknowledgements.) 466.1 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(7) 527.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Acknowledgements) 45.65 646.29 T
0 11 Q
0.59 (The work in this thesis has had three homes\321the Rank Xerox Research Centre, Cambridge Laboratory \050for-) 45.65 554.42 P
-0.05 (merly EuroPARC\051; the Computer Science department at University College, London; and the Xerox Palo Alto) 45.65 541.42 P
0.16 (Research Center. I couldn\325t have asked for three more interesting and stimulating places to have spent the last) 45.65 528.42 P
-0.44 (three years, and I owe a great deal to the people who have supported me and my work at each place: Bob Ander-) 45.65 515.42 P
0.55 (son, Graham Button, Wendy Mackay and Allan MacLean at EuroPARC, Jon Crowcroft and Angela Sasse at) 45.65 502.42 P
(UCL, and Annette Adler, Austin Henderson and Gregor Kiczales at PARC.) 45.65 489.42 T
0.25 (The development of the ideas presented here has been inspired, nurtured and guided by a host of people, only) 45.65 469.42 P
-0.08 (some of whom can be mentioned here. Jon Crowcroft provided guidance, advice, criticism and beer in admira-) 45.65 456.42 P
0.05 (ble proportions, tolerating the rather odd path of my work with bemused grace. Annette Adler, Bob Anderson,) 45.65 443.42 P
0.04 (Graham Button, Wendy Mackay and Lucy Suchman have, wittingly or unwittingly, contributed to my inclina-) 45.65 430.42 P
-0.04 (tion towards the social which underpins this work \050although they should not be held responsible\051. Annette also) 45.65 417.42 P
-0 (brought together a group of people who have provided me with much intellectual sustenance over the last year) 45.65 404.42 P
0.36 (or two; David Levy, Gene McDaniel, Bob Printis, Vijay Saraswat and Brian Smith deserve especial mention.) 45.65 391.42 P
-0.07 (Brian\325s work has been central to much I\325ve thought and done over the last few years; one day, I hope to under-) 45.65 378.42 P
(stand 10% of it.) 45.65 365.42 T
0.63 (Dik Bentley, Jon Crowcroft, Alan Dix, Steve Freeman, Jonathan Grudin, Rachel Jones, Gregor Kiczales and) 45.65 345.42 P
0.37 (John Lamping have all made valuable contributions to my thinking about the ideas described here, and to the) 45.65 332.42 P
(form of their presentation.) 45.65 319.42 T
-0.31 (Some of my greatest debts are to those who helped me through the deepest moments of inevitable thesis gloom.) 45.65 299.42 P
1.17 (Lorna Banks, Eevi Beck, Dik Bentley, Matthew Chalmers, Lynn Cherny, Laura Dekker, Bill Gaver, Lorna) 45.65 286.42 P
0.17 (Goulden, Maxine Gregson, Rory Hamilton, Rachel Hewson, Pernille Marqvardsen, Gillian Ritchie, Ellen Sie-) 45.65 273.42 P
0.07 (gel, Lisa Tweedie, and Alex Zbyslaw all helped with email, cynicism, laughter, silliness and beer, and they all) 45.65 260.42 P
(deserve better recompense than a few words here. I\325ll get round to you all in time.) 45.65 247.42 T
0.22 (Victoria Bellotti deserves a place on her own as both an inspiring colleague and valued friend. And above all,) 45.65 227.42 P
(thanks to Beki Grinter, who\325s simply more than I deserve.) 45.65 214.42 T
(Thank you all. May you never have to hear about this again.) 45.65 194.42 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Acknowledgements) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(8) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Table of Contents.) 472.32 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(9) 527.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(T) 45.65 646.29 T
(able of Contents) 56.65 646.29 T
4 11 Q
(Abstract) 45.65 582.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 90.65 582.42 T
(3) 526.15 582.42 T
(Dedication) 45.65 569.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 101.65 569.42 T
(5) 526.15 569.42 T
(Acknowledgements) 45.65 556.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 140.15 556.42 T
(7) 526.15 556.42 T
(Table of Contents) 45.65 543.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 134.65 543.42 T
(9) 526.15 543.42 T
(Chapter 1: Introduction) 45.65 504.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 162.15 504.42 T
(15) 520.65 504.42 T
0 F
(1.1) 45.65 489.42 T
(Introductory Remarks) 81.65 489.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 178.65 489.42 T
(15) 520.65 489.42 T
(1.2) 45.65 474.42 T
(The Emer) 81.65 474.42 T
(gence of CSCW) 125.13 474.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 197.9 474.42 T
(15) 520.65 474.42 T
(1.3) 45.65 459.42 T
(Ethnomethodology and CSCW) 81.65 459.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219.9 459.42 T
(16) 520.65 459.42 T
(1.4) 45.65 444.42 T
(The Development of CSCW T) 81.65 444.42 T
(oolkits) 215.31 444.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 247.4 444.42 T
(16) 520.65 444.42 T
(1.5) 45.65 429.42 T
(Flexibility and T) 81.65 429.42 T
(ailorability in HCI) 154.83 429.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.4 429.42 T
(17) 520.65 429.42 T
(1.6) 45.65 414.42 T
(Flexibility and T) 81.65 414.42 T
(ailorability in CSCW Systems and T) 154.83 414.42 T
(oolkits) 315.1 414.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 346.4 414.42 T
(17) 520.65 414.42 T
(1.6.1) 81.65 399.42 T
(Flexibility from Social and T) 117.65 399.42 T
(echnical Perspectives) 245.21 399.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 340.9 399.42 T
(18) 520.65 399.42 T
(1.6.2) 81.65 384.42 T
(A Cross-Cutting V) 117.65 384.42 T
(iew of Flexibility) 200.1 384.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 277.65 384.42 T
(18) 520.65 384.42 T
(1.7) 45.65 369.42 T
(What Is T) 81.65 369.42 T
(o Come) 124.87 369.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 159.4 369.42 T
(19) 520.65 369.42 T
4 F
(Chapter 2: Flexibility in CSCW Toolkits) 45.65 330.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.15 330.42 T
(21) 520.65 330.42 T
0 F
(2.1) 45.65 317.42 T
(Introduction) 81.65 317.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 140.15 317.42 T
(21) 520.65 317.42 T
(2.2) 45.65 302.42 T
(Flexibility and Reuse) 81.65 302.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 175.9 302.42 T
(21) 520.65 302.42 T
(2.2.1) 81.65 287.42 T
(Software Issues) 117.65 287.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189.65 287.42 T
(21) 520.65 287.42 T
(2.2.2) 81.65 272.42 T
(HCI Issues) 117.65 272.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.65 272.42 T
(22) 520.65 272.42 T
(2.3) 45.65 257.42 T
(A Framework for Flexibility) 81.65 257.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 208.9 257.42 T
(22) 520.65 257.42 T
(2.3.1) 81.65 242.42 T
(Collaboration T) 117.65 242.42 T
(ransparency and Collaboration A) 187.23 242.42 T
(wareness) 331.94 242.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 373.9 242.42 T
(23) 520.65 242.42 T
(2.4) 45.65 227.42 T
(CSCW T) 81.65 227.42 T
(oolkits and Approaches) 121.52 227.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225.4 227.42 T
(24) 520.65 227.42 T
(2.4.1) 81.65 212.42 T
(Rendezvous) 117.65 212.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 173.15 212.42 T
(24) 520.65 212.42 T
(2.4.1.1) 117.65 197.42 T
(Flexibility in Rendezvous) 153.65 197.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.4 197.42 T
(24) 520.65 197.42 T
(Replication and Centralisation 25) 153.65 184.42 T
(Declarative Event Model 25) 153.65 171.42 T
(2.4.2) 81.65 156.42 T
(GroupKit) 117.65 156.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 162.15 156.42 T
(25) 520.65 156.42 T
(2.4.2.1) 117.65 141.42 T
(Flexibility in GroupKit: Open Protocols) 153.65 141.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 329.9 141.42 T
(25) 520.65 141.42 T
(2.4.3) 81.65 126.42 T
(MEAD) 117.65 126.42 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 151.15 126.42 T
(26) 520.65 126.42 T
(2.4.3.1) 117.65 111.42 T
(Flexibility in MEAD: Tailorable User Display Agents) 153.65 111.42 T
(. . . . . . . . . . . . . . . . . . . . . . .) 393.15 111.42 T
(26) 520.65 111.42 T
(2.4.4) 81.65 96.42 T
(Suite) 117.65 96.42 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 142.9 96.42 T
(27) 520.65 96.42 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Table of Contents) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(10) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
(2.4.4.1) 135.65 737.62 T
(Flexibility in Suite: Coupling Control) 171.65 737.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 338.15 737.62 T
(27) 538.65 737.62 T
(2.4.5) 99.65 722.62 T
(Oval) 135.65 722.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 159.4 722.62 T
(27) 538.65 722.62 T
(2.4.5.1) 135.65 707.62 T
(Flexibility in Oval: Supporting Radical Tailorability) 171.65 707.62 T
(. . . . . . . . . . . . . . . . . . . . . . . .) 404.15 707.62 T
(28) 538.65 707.62 T
(2.4.6) 99.65 692.62 T
(COLA) 135.65 692.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.65 692.62 T
(28) 538.65 692.62 T
(2.4.6.1) 135.65 677.62 T
(Flexibility in COLA: The Policy/Mechanism Split) 171.65 677.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . .) 395.9 677.62 T
(29) 538.65 677.62 T
(2.4.7) 99.65 662.62 T
(Other Systems) 135.65 662.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.65 662.62 T
(29) 538.65 662.62 T
(2.4.7.1) 135.65 647.62 T
(SEPIA) 171.65 647.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.4 647.62 T
(29) 538.65 647.62 T
(2.4.7.2) 135.65 632.62 T
(PREP) 171.65 632.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.65 632.62 T
(30) 538.65 632.62 T
(2.5) 63.65 617.62 T
(Genericity and Extensibility) 99.65 617.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225.4 617.62 T
(30) 538.65 617.62 T
(2.5.1) 99.65 602.62 T
(Genericity and Extensibility in CSCW T) 135.65 602.62 T
(oolkits) 313.63 602.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 343.65 602.62 T
(31) 538.65 602.62 T
(2.6) 63.65 587.62 T
(Problems in T) 99.65 587.62 T
(oolkit Flexibility) 161.21 587.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.4 587.62 T
(32) 538.65 587.62 T
(2.6.1) 99.65 572.62 T
(Structure and Semantics) 135.65 572.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 244.65 572.62 T
(32) 538.65 572.62 T
(2.6.2) 99.65 557.62 T
(Extending versus Revising) 135.65 557.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.65 557.62 T
(33) 538.65 557.62 T
(2.7) 63.65 542.62 T
(Summary) 99.65 542.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 142.9 542.62 T
(33) 538.65 542.62 T
4 F
(Chapter 3: Computational Reflection and Open Implementation) 63.65 503.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 368.4 503.62 T
(35) 538.65 503.62 T
0 F
(3.1) 63.65 490.62 T
(Flexibility) 99.65 490.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 148.4 490.62 T
(35) 538.65 490.62 T
(3.1.1) 99.65 475.62 T
(T) 135.65 475.62 T
(ackling Flexibility) 141.6 475.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222.65 475.62 T
(36) 538.65 475.62 T
(3.1.2) 99.65 460.62 T
(Flexibility and Abstraction) 135.65 460.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.65 460.62 T
(36) 538.65 460.62 T
(3.2) 63.65 445.62 T
(Abstraction) 99.65 445.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 151.15 445.62 T
(36) 538.65 445.62 T
(3.2.1) 99.65 430.62 T
(Mapping Dilemmas) 135.65 430.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225.4 430.62 T
(38) 538.65 430.62 T
(3.2.1.1) 135.65 415.62 T
(Hematomas) 171.65 415.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225.4 415.62 T
(39) 538.65 415.62 T
(3.2.1.2) 135.65 400.62 T
(Coding Between the Lines) 171.65 400.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291.4 400.62 T
(39) 538.65 400.62 T
(3.2.2) 99.65 385.62 T
(Gaining Control over Abstractions) 135.65 385.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 288.65 385.62 T
(40) 538.65 385.62 T
(3.3) 63.65 370.62 T
(Open Implementation) 99.65 370.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 197.9 370.62 T
(40) 538.65 370.62 T
(3.3.1) 99.65 355.62 T
(3-Lisp and the In\336nite T) 135.65 355.62 T
(ower) 242.43 355.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 266.65 355.62 T
(41) 538.65 355.62 T
(3.3.2) 99.65 340.62 T
(CLOS and the Metaobject Protocol) 135.65 340.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291.4 340.62 T
(41) 538.65 340.62 T
(3.3.3) 99.65 325.62 T
(The Metaobject Protocol in General) 135.65 325.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 294.15 325.62 T
(43) 538.65 325.62 T
(3.4) 63.65 310.62 T
(Re\337ection, Open Implementation and Abstraction) 99.65 310.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 321.65 310.62 T
(44) 538.65 310.62 T
(3.4.1) 99.65 295.62 T
(CLOS and T) 135.65 295.62 T
(elos) 191.1 295.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 208.9 295.62 T
(45) 538.65 295.62 T
(3.4.2) 99.65 280.62 T
(Compile-T) 135.65 280.62 T
(ime and Run-time MOPs) 183.54 280.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 294.15 280.62 T
(45) 538.65 280.62 T
(3.4.3) 99.65 265.62 T
(Computational Re\337ection and Metaobject Protocols) 135.65 265.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 365.65 265.62 T
(46) 538.65 265.62 T
(3.5) 63.65 250.62 T
(Summary) 99.65 250.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 142.9 250.62 T
(46) 538.65 250.62 T
4 F
(Chapter 4: Applying Reflection in a CSCW Toolkit) 63.65 211.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 307.9 211.62 T
(49) 538.65 211.62 T
0 F
(4.1) 63.65 198.62 T
(Introduction) 99.65 198.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 159.4 198.62 T
(49) 538.65 198.62 T
(4.2) 63.65 183.62 T
(Designing Open Implementations) 99.65 183.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 250.15 183.62 T
(49) 538.65 183.62 T
(4.2.1) 99.65 168.62 T
(Scope Control) 135.65 168.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.65 168.62 T
(49) 538.65 168.62 T
(4.2.2) 99.65 153.62 T
(Conceptual Separation) 135.65 153.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.4 153.62 T
(50) 538.65 153.62 T
(4.2.3) 99.65 138.62 T
(Incrementality) 135.65 138.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.65 138.62 T
(50) 538.65 138.62 T
(4.2.4) 99.65 123.62 T
(Robustness) 135.65 123.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 186.9 123.62 T
(51) 538.65 123.62 T
(4.3) 63.65 108.62 T
(CSCW) 99.65 108.62 T
(: The Locus of Flexibility) 130.41 108.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 244.65 108.62 T
(51) 538.65 108.62 T
(4.4) 63.65 93.62 T
(CSCW T) 99.65 93.62 T
(oolkits: Areas of Concern) 139.52 93.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252.9 93.62 T
(52) 538.65 93.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Table of Contents.) 472.32 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(11) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
(4.4.1) 81.65 737.62 T
(Data Distribution) 117.65 737.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195.15 737.62 T
(52) 520.65 737.62 T
(4.4.2) 81.65 722.62 T
(Concurrency and Exclusion Control) 117.65 722.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 277.65 722.62 T
(52) 520.65 722.62 T
(4.4.3) 81.65 707.62 T
(Representations of Activity) 117.65 707.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.15 707.62 T
(53) 520.65 707.62 T
(4.4.4) 81.65 692.62 T
(User Interface Linkage) 117.65 692.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219.9 692.62 T
(53) 520.65 692.62 T
(4.4.5) 81.65 677.62 T
(Conference and Session Management) 117.65 677.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285.9 677.62 T
(53) 520.65 677.62 T
(4.5) 45.65 662.62 T
(Design Concerns in Prospero) 81.65 662.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 211.65 662.62 T
(54) 520.65 662.62 T
(4.5.1) 81.65 647.62 T
(Distributed Data Management subsumes Activity Representation) 117.65 647.62 T
(. . . . . . . . . . . . . . . . . . . . .) 404.15 647.62 T
(54) 520.65 647.62 T
(4.5.2) 81.65 632.62 T
(Distributed Data Management subsumes User Interface Linkage) 117.65 632.62 T
( . . . . . . . . . . . . . . . . . . . . .) 401.4 632.62 T
(54) 520.65 632.62 T
(4.6) 45.65 617.62 T
(Communicating Application Semantics) 81.65 617.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.65 617.62 T
(55) 520.65 617.62 T
(4.7) 45.65 602.62 T
(An Overview of Prospero) 81.65 602.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195.15 602.62 T
(56) 520.65 602.62 T
(4.7.1) 81.65 587.62 T
(Base Level Programming in Prospero) 117.65 587.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285.9 587.62 T
(56) 520.65 587.62 T
(4.7.2) 81.65 572.62 T
(Metalevel Programming in Prospero) 117.65 572.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 280.4 572.62 T
(56) 520.65 572.62 T
(4.7.2.1) 117.65 557.62 T
(User Interface) 153.65 557.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 217.15 557.62 T
(57) 520.65 557.62 T
(4.7.2.2) 117.65 542.62 T
(Session Management) 153.65 542.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 250.15 542.62 T
(58) 520.65 542.62 T
(4.7.2.3) 117.65 527.62 T
(Network Interface) 153.65 527.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.4 527.62 T
(58) 520.65 527.62 T
(4.7.2.4) 117.65 512.62 T
(Conceptual Separation and Areas of Concern) 153.65 512.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 354.65 512.62 T
(58) 520.65 512.62 T
(4.8) 45.65 497.62 T
(Summary) 81.65 497.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126.4 497.62 T
(59) 520.65 497.62 T
4 F
(Chapter 5: Divergence, Data Management and Collaborative Work) 45.65 458.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 365.65 458.62 T
(61) 520.65 458.62 T
0 F
(5.1) 45.65 445.62 T
(Introduction: Distributed Data Management) 81.65 445.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 280.4 445.62 T
(61) 520.65 445.62 T
(5.2) 45.65 430.62 T
(Criteria) 81.65 430.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 115.4 430.62 T
(61) 520.65 430.62 T
(5.3) 45.65 415.62 T
(Distributed Data and Collaborative W) 81.65 415.62 T
(ork) 248.19 415.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 263.9 415.62 T
(62) 520.65 415.62 T
(5.3.1) 81.65 400.62 T
(Distribution) 117.65 400.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 173.15 400.62 T
(62) 520.65 400.62 T
(5.3.2) 81.65 385.62 T
(Management) 117.65 385.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 175.9 385.62 T
(63) 520.65 385.62 T
(5.4) 45.65 370.62 T
(The Emer) 81.65 370.62 T
(gence of Inconsistency) 125.13 370.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228.15 370.62 T
(63) 520.65 370.62 T
(5.4.1) 81.65 355.62 T
(Streams of Activity and Inconsistency A) 117.65 355.62 T
(voidance) 295.56 355.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 335.4 355.62 T
(64) 520.65 355.62 T
(5.5) 45.65 340.62 T
(Diver) 81.65 340.62 T
(gence) 106.5 340.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 134.65 340.62 T
(65) 520.65 340.62 T
(5.5.1) 81.65 325.62 T
(Diver) 117.65 325.62 T
(gence and V) 142.5 325.62 T
(ersioning) 196.25 325.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.15 325.62 T
(65) 520.65 325.62 T
(5.5.2) 81.65 310.62 T
(Diver) 117.65 310.62 T
(gence and Replicated Databases) 142.5 310.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285.9 310.62 T
(66) 520.65 310.62 T
(5.5.3) 81.65 295.62 T
(Diver) 117.65 295.62 T
(gence and Operational T) 142.5 295.62 T
(ransformation) 250.55 295.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 313.4 295.62 T
(66) 520.65 295.62 T
(5.6) 45.65 280.62 T
(Capitalising on Diver) 81.65 280.62 T
(gence) 176.17 280.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.4 280.62 T
(67) 520.65 280.62 T
(5.6.1) 81.65 265.62 T
(Scalability) 117.65 265.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 164.9 265.62 T
(68) 520.65 265.62 T
(5.6.2) 81.65 250.62 T
(Multi-Synchronous Applications) 117.65 250.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 263.9 250.62 T
(68) 520.65 250.62 T
(5.6.3) 81.65 235.62 T
(Supporting Opportunistic W) 117.65 235.62 T
(ork) 242.05 235.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258.4 235.62 T
(69) 520.65 235.62 T
(5.7) 45.65 220.62 T
(Diver) 81.65 220.62 T
(gence in Prospero) 106.5 220.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 186.9 220.62 T
(69) 520.65 220.62 T
(5.7.1) 81.65 205.62 T
(Example: Shdr) 117.65 205.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 184.15 205.62 T
(70) 520.65 205.62 T
(5.7.2) 81.65 190.62 T
(Example: Source Code Control) 117.65 190.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.65 190.62 T
(71) 520.65 190.62 T
(5.7.3) 81.65 175.62 T
(Example: Multi-synchronous Editing) 117.65 175.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 283.15 175.62 T
(72) 520.65 175.62 T
(5.7.4) 81.65 160.62 T
(Specialisation in Prospero) 117.65 160.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 233.65 160.62 T
(72) 520.65 160.62 T
(5.8) 45.65 145.62 T
(Summary) 81.65 145.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126.4 145.62 T
(73) 520.65 145.62 T
4 F
(Chapter 6: Consistency Management and Consistency Guarantees) 45.65 106.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 360.15 106.62 T
(75) 520.65 106.62 T
0 F
(6.1) 45.65 93.62 T
(Introduction) 81.65 93.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 140.15 93.62 T
(75) 520.65 93.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Table of Contents) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(12) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
(6.2) 63.65 737.62 T
(Constraining Diver) 99.65 737.62 T
(gence\321T) 184.08 737.62 T
(wo T) 226.69 737.62 T
(echniques) 248.83 737.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 294.15 737.62 T
(75) 538.65 737.62 T
(6.2.1) 99.65 722.62 T
(V) 135.65 722.62 T
(ariable Consistency) 142.37 722.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 230.9 722.62 T
(76) 538.65 722.62 T
(6.2.1.1) 135.65 707.62 T
(An Example) 171.65 707.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228.15 707.62 T
(76) 538.65 707.62 T
(6.2.2) 99.65 692.62 T
(Consistency Guarantees) 135.65 692.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 241.9 692.62 T
(77) 538.65 692.62 T
(6.2.2.1) 135.65 677.62 T
(Constraining Divergence with Locks) 171.65 677.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 335.4 677.62 T
(77) 538.65 677.62 T
(6.2.2.2) 135.65 662.62 T
(Promises and Guarantees) 171.65 662.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 283.15 662.62 T
(78) 538.65 662.62 T
(6.2.2.3) 135.65 647.62 T
(Breaking a Promise) 171.65 647.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261.15 647.62 T
(79) 538.65 647.62 T
(6.3) 63.65 632.62 T
(Consistency and Concurrency in Database Research) 99.65 632.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 329.9 632.62 T
(79) 538.65 632.62 T
(6.3.1) 99.65 617.62 T
(Semantics-Based Concurrency) 135.65 617.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 272.15 617.62 T
(80) 538.65 617.62 T
(6.3.2) 99.65 602.62 T
(Application-Speci\336c Con\337ict Resolution) 135.65 602.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 316.15 602.62 T
(80) 538.65 602.62 T
(6.4) 63.65 587.62 T
(Encoding Promises and Guarantees) 99.65 587.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258.4 587.62 T
(81) 538.65 587.62 T
(6.4.1) 99.65 572.62 T
(Semantics-Free Semantics) 135.65 572.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252.9 572.62 T
(81) 538.65 572.62 T
(6.4.2) 99.65 557.62 T
(Class-based Encoding) 135.65 557.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 233.65 557.62 T
(81) 538.65 557.62 T
(6.5) 63.65 542.62 T
(Using Consistency Guarantees) 99.65 542.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.4 542.62 T
(82) 538.65 542.62 T
(6.5.1) 99.65 527.62 T
(A Shared Bibliographical Database) 135.65 527.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291.4 527.62 T
(82) 538.65 527.62 T
(6.5.2) 99.65 512.62 T
(Collaborative T) 135.65 512.62 T
(ext Editing) 204.23 512.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252.9 512.62 T
(83) 538.65 512.62 T
(6.6) 63.65 497.62 T
(Summary) 99.65 497.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 142.9 497.62 T
(84) 538.65 497.62 T
4 F
(Chapter 7: Using Prospero: Application Examples) 63.65 458.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.15 458.62 T
(87) 538.65 458.62 T
0 F
(7.1) 63.65 445.62 T
(Introduction) 99.65 445.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 159.4 445.62 T
(87) 538.65 445.62 T
(7.2) 63.65 430.62 T
(Application Structure) 99.65 430.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195.15 430.62 T
(87) 538.65 430.62 T
(7.2.1) 99.65 415.62 T
(Specialisation through Subclassing) 135.65 415.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291.4 415.62 T
(89) 538.65 415.62 T
(7.2.2) 99.65 400.62 T
(Con\336guring or Extending the Base Level) 135.65 400.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 318.9 400.62 T
(89) 538.65 400.62 T
(7.3) 63.65 385.62 T
(The Generic Function Framework) 99.65 385.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 250.15 385.62 T
(91) 538.65 385.62 T
(7.4) 63.65 370.62 T
(Sample Applications) 99.65 370.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.4 370.62 T
(91) 538.65 370.62 T
(7.4.1) 99.65 355.62 T
(Eureka, a Collaborative Polyline Editor) 135.65 355.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 310.65 355.62 T
(92) 538.65 355.62 T
(7.4.2) 99.65 340.62 T
(Bugspray) 135.65 340.62 T
(, a Bug-T) 177.1 340.62 T
(racking Database) 218.57 340.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.9 340.62 T
(93) 538.65 340.62 T
(7.4.3) 99.65 325.62 T
(Bugspray in Use) 135.65 325.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 211.65 325.62 T
(95) 538.65 325.62 T
(7.5) 63.65 310.62 T
(Flexibility) 99.65 310.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 145.65 310.62 T
(96) 538.65 310.62 T
(7.5.1) 99.65 295.62 T
(Comparing Eureka and Bugspray) 135.65 295.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 283.15 295.62 T
(96) 538.65 295.62 T
(7.5.2) 99.65 280.62 T
(Flexibility In Prospero and Other T) 135.65 280.62 T
(oolkits) 290.4 280.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 321.65 280.62 T
(97) 538.65 280.62 T
(7.5.2.1) 135.65 265.62 T
(Surface Flexibility) 171.65 265.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.65 265.62 T
(97) 538.65 265.62 T
(7.5.2.2) 135.65 250.62 T
(Architectural Flexibility) 171.65 250.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 280.4 250.62 T
(97) 538.65 250.62 T
(7.5.3) 99.65 235.62 T
(OI and Re\337ection in Prospero) 135.65 235.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.4 235.62 T
(98) 538.65 235.62 T
(7.6) 63.65 220.62 T
(Summary) 99.65 220.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 142.9 220.62 T
(99) 538.65 220.62 T
4 F
(Chapter 8: Summary and Conclusions) 63.65 181.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 247.4 181.62 T
(101) 533.15 181.62 T
0 F
(8.1) 63.65 168.62 T
(Recapitulation) 99.65 168.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.65 168.62 T
(101) 533.15 168.62 T
(8.2) 63.65 153.62 T
(Claims and Goals) 99.65 153.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 178.65 153.62 T
(102) 533.15 153.62 T
(8.3) 63.65 138.62 T
(Future W) 99.65 138.62 T
(ork and Opportunities) 140.62 138.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.15 138.62 T
(103) 533.15 138.62 T
(8.4) 63.65 123.62 T
(Concluding Remarks) 99.65 123.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195.15 123.62 T
(105) 533.15 123.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Table of Contents.) 472.32 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(13) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
4 11 Q
0 X
(Epilogue) 45.65 737.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 90.65 737.62 T
(107) 515.15 737.62 T
(Collected References) 45.65 724.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 148.4 724.62 T
(109) 515.15 724.62 T
(Appendix A: Code of Application Examples) 45.65 685.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.65 685.62 T
(117) 515.15 685.62 T
0 F
(1) 45.65 672.62 T
(Eureka) 81.65 672.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 118.15 672.62 T
(117) 515.15 672.62 T
(1.1) 81.65 657.62 T
(eureka.lisp) 117.65 657.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.65 657.62 T
(1) 515.55 657.62 T
(17) 520.65 657.62 T
(1.2) 81.65 642.62 T
(ui.lisp) 117.65 642.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 145.65 642.62 T
(1) 515.55 642.62 T
(18) 520.65 642.62 T
(2) 45.65 627.62 T
(Bugspray) 81.65 627.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126.4 627.62 T
(120) 515.15 627.62 T
(2.1) 81.65 612.62 T
(bugs.lisp) 117.65 612.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 159.4 612.62 T
(120) 515.15 612.62 T
(2.2) 81.65 597.62 T
(ui.lisp) 117.65 597.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 145.65 597.62 T
(122) 515.15 597.62 T
(2.3) 81.65 582.62 T
(common.lisp) 117.65 582.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 175.9 582.62 T
(125) 515.15 582.62 T
(2.4) 81.65 567.62 T
(guarantees.lisp) 117.65 567.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 184.15 567.62 T
(126) 515.15 567.62 T
(2.5) 81.65 552.62 T
(client.list) 117.65 552.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 159.4 552.62 T
(127) 515.15 552.62 T
(2.6) 81.65 537.62 T
(server) 117.65 537.62 T
(.lisp) 143.92 537.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 164.9 537.62 T
(128) 515.15 537.62 T
(2.7) 81.65 522.62 T
(\337atten.lisp) 117.65 522.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 164.9 522.62 T
(129) 515.15 522.62 T
(2.8) 81.65 507.62 T
(dbio.lisp) 117.65 507.62 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 156.65 507.62 T
(130) 515.15 507.62 T
(2.9) 81.65 492.62 T
(misc.lisp) 117.65 492.62 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 159.4 492.62 T
(132) 515.15 492.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Table of Contents) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(14) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 1: Introduction.) 454.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(15) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Chapter 1:) 45.65 674.29 T
(Introduction) 45.65 646.29 T
2 14 Q
(1.1  Introductory Remarks) 45.65 552.42 T
0 11 Q
0.19 (This dissertation examines the issue of flexibility in toolkits for creating multi-user applications. In particular,) 45.65 530.42 P
-0.11 (I will show how a novel software architecture technique\321Open Implementation \050OI\051\321can be applied to solve) 45.65 517.42 P
-0.49 (a number of problems inherent in traditional approaches, and I will present a toolkit\321Prospero\321which embod-) 45.65 504.42 P
(ies and demonstrates these ideas.) 45.65 491.42 T
0.28 (The motivation for this work is not simply the technical limitations of a set of software techniques. Certainly,) 45.65 471.42 P
-0.02 (previous work has applied the OI approach to a number of technical areas to solve problems of that sort. How-) 45.65 458.42 P
0.47 (ever, the support for deeper, more thoroughgoing forms of flexibility in support of collaborative work is also) 45.65 445.42 P
(driven by the need to address a split within the disciplinary structure of the field itself.) 45.65 432.42 T
2 14 Q
(1.2  The Emergence of CSCW) 45.65 405.42 T
0 11 Q
0.23 (The field of Computer-Supported Cooperative Work \050CSCW\051 traces its history as an identifiable discipline to) 45.65 383.42 P
0.43 (a workshop held at MIT in 1984 by Irene Grief and Paul Cashman \050who are also responsible for the term\051. It) 45.65 370.42 P
-0.19 (grew quickly; in 1986, MCC sponsored the first bi-annual international conference, subsequently sponsored by) 45.65 357.42 P
-0.38 (the ACM; and in 1989, a bi-annual European conference began, held in the alternate years. CSCW has spawned) 45.65 344.42 P
-0.45 (sub-disciplines of its own \050such as workflow technology, frequently employed within Business Process Reengi-) 45.65 331.42 P
(neering\051, conferences, journals, prototypes, studies, and jargon.) 45.65 318.42 T
-0.1 (Technological and organisational trends of the last ten years have served to reinforce the importance of CSCW) 45.65 298.42 P
-0.02 (by strengthening the motivations which gave rise to the field in the first place. First, the rapid dissemination of) 45.65 285.42 P
0.19 (computer power\321CPU performance, graphics processing, etc.\321associated with the move from mainframe to) 45.65 272.42 P
-0.57 (distributed personal computing in the early 1980s has continued and shows no signs of stopping; and at the same) 45.65 259.42 P
0.57 (time, these powerful PCs and workstations are increasingly connected together over local and wide-area net-) 45.65 246.42 P
1.13 (works. Meantime, business trends mean that organisations are increasingly distributed. Not only is a single) 45.65 233.42 P
-0.57 (organisation more likely to be distributed across multiple sites, or perhaps employ individuals working electron-) 45.65 220.42 P
1.76 (ically away from a principal site, but also increasing moves towards \322outsourcing\323 and inter-organisation) 45.65 207.42 P
0.12 (collaboration makes it more likely that work is being performed through the collaborative activity of remotely) 45.65 194.42 P
1.68 (located individuals. Even within single or co-located organisations, the trend towards automation of tasks) 45.65 181.42 P
0.04 (around explicit models of business processes places an emphasis within computational technology on collabo-) 45.65 168.42 P
(ration and coordination.) 45.65 155.42 T
1.36 (This is the area to which CSCW has addressed itself since the outset\321the use of computer-based tools to) 45.65 135.42 P
-0.27 (enhance and facilitate the performance of collaborative work, potentially distributed in space or time. Its scope,) 45.65 122.42 P
-0.16 (then, is very broad, and this is reflected in the wide range of systems which have been designed, built and stud-) 45.65 109.42 P
0.24 (ied. For example, these have included: shared whiteboard/meeting room systems such as CoLab \050Stefik et al.,) 45.65 96.42 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 1: Introduction) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(16) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.55 (1987a\051 and Dolphin \050Streitz et al., 1994\051; workflow/process-based systems such as The Coordinator \050Winograd,) 63.65 737.62 P
0.14 (1986\051 and the Milan Conversation System \050De Michaelis and Grasso, 1994\051; authoring systems such as PREP) 63.65 724.62 P
0.23 (\050Neuwirth et al., 1990\051 and Quilt \050Fish et al., 1988\051; drawing systems such as Commune \050Bly and Minneman,) 63.65 711.62 P
-0.17 (1990\051 and The Conversation Board \050Brink and Gomez, 1992\051; as well as collaborative Virtual Reality systems,) 63.65 698.62 P
(databases, software design environments, and others.) 63.65 685.62 T
-0.54 (More significantly, perhaps, CSCW, as a field, has also drawn on a similarly wide range of disciplinary perspec-) 63.65 665.62 P
0.15 (tives on its own subject matter. Arising as it did partly out of the field of Human-Computer Interaction \050HCI\051,) 63.65 652.62 P
0.24 (it is unsurprising that, like HCI, it should draw on cognitive and experimental psychology in addition to com-) 63.65 639.62 P
-0.2 (puter science and software engineering. However, much of its development and perspective has been driven by) 63.65 626.62 P
(the early influence of anthropology and sociology.) 63.65 613.62 T
2 14 Q
(1.3  Ethnomethodology and CSCW) 63.65 586.62 T
0 11 Q
0.47 (A highly significant factor in the development of CSCW was the very early involvement of researchers from) 63.65 564.62 P
-0.27 (anthropology and sociology. Just as cognitive psychology provided the underpinnings of much HCI research in) 63.65 551.62 P
0.37 (the late 1970s and early 1980s, so sociology has motivated and grounded much work in CSCW since the late) 63.65 538.62 P
(1980s.) 63.65 525.62 T
1.04 (For a variety of reasons, the area of sociology most prominent in CSCW has been ethnomethodology. Eth-) 63.65 505.62 P
1.4 (nomethodology arose in the 1960s, through the work of Harold Garfinkel and associates. Its roots lie in a) 63.65 492.62 P
0.78 (respecification of the objectives of sociology. In particular, it reacts against a view of human behaviour that) 63.65 479.62 P
0.59 (places social action) 63.65 466.62 P
3 F
0.59 (within) 153.69 466.62 P
0 F
0.59 ( the frame of social groupings and relationships which is the domain of traditional) 181.2 466.62 P
1.03 (sociological theory and discourse\321categories and their attendant social functions. Ethnomethodology\325s pri-) 63.65 453.62 P
-0.07 (mary claim is that individuals do) 63.65 440.62 P
3 F
-0.07 (not) 210.51 440.62 P
0 F
-0.07 (, in their day to day behaviour, act according to the rules and relationships) 224.57 440.62 P
0.13 (which sociological theorising lays down. Quite the opposite. The structures, regularities and patterns of action) 63.65 427.62 P
0.28 (and behaviour which sociology identifies emerge) 63.65 414.62 P
3 F
0.28 (out of) 284.67 414.62 P
0 F
0.28 ( the ordinary, everyday action of individuals, working) 310.32 414.62 P
-0.27 (according to their own common-sense understandings of the way the social world works. These common-sense) 63.65 401.62 P
(understandings are every bit as valid as those of learned professors of traditional sociology.) 63.65 388.62 T
0.32 (From this basic observation, a new picture of social action has arisen. The ethnomethodological view empha-) 63.65 368.62 P
0.01 (sises the way in which social action is not achieved through the execution of pre-conceived plans or models of) 63.65 355.62 P
1.47 (behaviour, but instead is) 63.65 342.62 P
3 F
1.47 (improvised) 179.84 342.62 P
0 F
1.47 ( moment-to-moment, according to the particulars of the situation. The) 228.72 342.62 P
0.53 (sequential structure of behaviour is) 63.65 329.62 P
3 F
0.53 (locally organised) 223.63 329.62 P
0 F
0.53 (, and is) 300.85 329.62 P
3 F
0.53 (situated) 336.66 329.62 P
0 F
0.53 ( in the context of particular settings and) 371.49 329.62 P
(times.) 63.65 316.62 T
0.44 (Ethnomethodology\325s concern, since its beginning, has been the organisation of human action and interaction.) 63.65 296.62 P
0.2 (In 1987, Lucy Suchman published) 63.65 283.62 P
3 F
0.2 (\322Plans and Situated Actions\323) 218.62 283.62 P
0 F
0.2 (,) 350.31 283.62 P
0.2 (which applied the same techniques and per-) 356.01 283.62 P
1.95 (spectives to the organisation of interaction between humans and technology. In doing so, she opened up) 63.65 270.62 P
-0.19 (significant new areas of investigation both for HCI researchers and ethnomethodologists. In both this and other) 63.65 257.62 P
0.22 (work \050e.g. Suchman, 1983; 1993\051, Suchman also helped establish the relationship between ethnomethodology) 63.65 244.62 P
-0.14 (and CSCW, and the same approach has been used by a range of researchers studying work in collaborative set-) 63.65 231.62 P
0.16 (tings such as stock trading rooms \050Heath et al., 1995\051, print shops \050Bowers et al., 1995\051, and air traffic control) 63.65 218.62 P
0.89 (rooms \050Harper and Hughes, 1993\051. The ethnomethodological perspective on CSCW systems and design has) 63.65 205.62 P
0.26 (continually emphasised the flexible and open ways in which working activities are organised, and the distinc-) 63.65 192.62 P
-0.58 (tions between the formal processes and procedures which are often encoded in CSCW systems and the informal,) 63.65 179.62 P
0.08 (flexible and opportunistic practices by which work and interaction actually take place. The flexibility required) 63.65 166.62 P
(of systems to support the development of these working practices is, then, a key feature of their design.) 63.65 153.62 T
2 14 Q
(1.4  The Development of CSCW T) 63.65 126.62 T
(oolkits) 274.5 126.62 T
0 11 Q
-0.56 (Against the backdrop of these investigations of collaborative activity, technological development has proceeded) 63.65 104.62 P
(apace.) 63.65 91.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 1: Introduction.) 454.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(17) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.53 (The earliest CSCW systems were built by hand, extending techniques originally developed for single-user inter-) 45.65 737.62 P
-0.29 (faces and standard distributed systems to the needs of collaboration. Often, they were designed as extensions of) 45.65 724.62 P
-0.31 (existing systems such as databases \050Grief and Sarin, 1988\051 or hypertext systems \050Rein and Ellis, 1991\051. As both) 45.65 711.62 P
1.34 (application and implementation experience grew, specifically multi-user aspects of implementation support) 45.65 698.62 P
0.05 (began to migrate into reusable bodies of code. For explanatory purposes, we can draw an approximate distinc-) 45.65 685.62 P
(tion between) 45.65 672.62 T
3 F
(execution environments) 104.92 672.62 T
0 F
( and) 209.09 672.62 T
3 F
(application toolkits) 230.47 672.62 T
0 F
(.) 315.73 672.62 T
0.15 (Execution environments provide run-time support for multi-user applications. Often, their aim is to allow oth-) 45.65 652.62 P
2.34 (erwise single-user applications to function in multi-user arrangements, although they might also support) 45.65 639.62 P
1.13 (specifically multi-user features. Examples of application environments include commercial systems such as) 45.65 626.62 P
-0.35 (Timbuktu and Shared-X, and research systems such as ABC \050Jeffay, 1992\051. Many early attempts to encapsulate) 45.65 613.62 P
0.83 (and reuse multi-user functionality from earlier monolithic CSCW systems were based on \050or at least, would) 45.65 600.62 P
(include\051 multi-user execution environments.) 45.65 587.62 T
0.17 (A number of execution environments were paired with application toolkits. Toolkits provide libraries of func-) 45.65 567.62 P
-0.12 (tionality for the development of specifically collaborative applications. Multi-user interface widgets, persistent) 45.65 554.62 P
-0.17 (shared data stores and group-replicated objects are examples of abstractions which might be presented in a col-) 45.65 541.62 P
-0.22 (laborative application toolkit. As will be discussed in Chapter 2, the design of these various toolkits reflects the) 45.65 528.62 P
-0.38 (needs of the particular application areas which they were destined to support. The generality or flexibility of the) 45.65 515.62 P
(toolkit, then, is reflected in the range of applications which can be derived from it.) 45.65 502.62 T
2 14 Q
(1.5  Flexibility and T) 45.65 475.62 T
(ailorability in HCI) 168.58 475.62 T
0 11 Q
0.86 (As CSCW development was progressing, questions of openness and customisation of system behaviour had) 45.65 453.62 P
-0 (already become an important research issue in HCI generally \050see, for example, Trigg et al., 1987; Fischer and) 45.65 440.62 P
-0.36 (Girgensohn, 1990; Mackay, 1990; MacLean et al., 1990\051. By and large, the focus of these investigations was on) 45.65 427.62 P
3 F
0.67 (tailorability) 45.65 414.62 P
0 F
0.67 (\321that is, the ways in which applications could be customised to accommodate individual differ-) 98.22 414.62 P
0.3 (ences between members of a user community. Since this work tends to make customisation available through) 45.65 401.62 P
0.78 (named, accessible features of the visual language of the interface, research on tailorability tends to focus on) 45.65 388.62 P
-0 (applications at a fairly high level, providing controls which either affect largely \322surface\323 features of the inter-) 45.65 375.62 P
-0.57 (face or control system behaviour at a fairly gross level. More recently, however, these investigations have begun) 45.65 362.62 P
0.26 (to move into the area of end-user programming, providing greater control over semantic features of the appli-) 45.65 349.62 P
2.14 (cation, which are generally not directly expressed in the interface \050Bentley and Dourish, 1995\051. Notable) 45.65 336.62 P
-0.21 (examples include the work of Nardi \0501993\051 in a variety of domains, Cypher and Smith \0501995\051 with KidSim and) 45.65 323.62 P
(Eisenberg \0501995\051 with SchemePaint.) 45.65 310.62 T
2 14 Q
(1.6  Flexibility and T) 45.65 283.62 T
(ailorability in CSCW Systems and T) 168.58 283.62 T
(oolkits) 387.96 283.62 T
0 11 Q
0.01 (A number of researchers have investigated similar issues of flexibility and tailorability in the domain of multi-) 45.65 261.62 P
-0.4 (user, rather than single-user, interfaces. Greenberg \0501991\051 follows most closely in the tradition of customisation) 45.65 248.62 P
-0 (to accommodate individual differences \050Chapter 2 will discuss other work in more detail\051. Arguably, the prob-) 45.65 235.62 P
-0.27 (lem of tailorability) 45.65 222.62 P
3 F
-0.27 (per se) 130.08 222.62 P
0 F
-0.27 ( is considerably more pressing in multi-user applications than in single-user ones. The) 156.38 222.62 P
0.28 (problem of accommodating individual preferences in single-user systems is akin to the problem of accommo-) 45.65 209.62 P
1.12 (dating the preferences of different groups in the multi-user case; however, multi-user systems also face the) 45.65 196.62 P
-0.02 (problem of accommodating the different preferences of the individual) 45.65 183.62 P
3 F
-0.02 (members) 355.52 183.62 P
0 F
-0.02 ( of each group. However, there) 395.23 183.62 P
-0.18 (is a second, more fundamental, problem which arises when looking at tailorability in multi-user systems; and it) 45.65 170.62 P
0.3 (arises from the traditional separation between the disciplinary perspectives \050loosely, social and computational) 45.65 157.62 P
(sciences\051 which make up the field.) 45.65 144.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 1: Introduction) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(18) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
2 12 Q
0 X
(1.6.1  Flexibility from Social and T) 63.65 736.95 T
(echnical Perspectives) 242.38 736.95 T
0 11 Q
1.66 (The traditional relationship between these disciplines involves sociological analyses of collaborative work) 63.65 719.62 P
0.16 (reaching \322down\323 from the day-to-day organisation of work to the collaborative applications which are used to) 63.65 706.62 P
0.02 (support it, while the systems perspective reaches \322up\323 from the requirements and constraints of the underlying) 63.65 693.62 P
0.14 (systems towards the applications level, determining the range of functionality which can be provided by those) 63.65 680.62 P
(applications. In this arrangement, the perspectives \322meet\323 at the level of applications.) 63.65 667.62 T
-0.56 (More recent work, though, has come to question the separation this implies\321that is, the view that system design) 63.65 647.62 P
-0.23 (requirements and constraints do not have consequences above the level of the application, and that sociological) 63.65 634.62 P
-0.33 (insights do not apply below. As will be discussed in Chapter 3, this notion of the separation of levels of concern) 63.65 621.62 P
-0.03 (is not even entirely appropriate purely from within the systems design perspective. Critically, though, for what) 63.65 608.62 P
-0.17 (is to follow, it is clear that the relationship between the two perspectives is considerably more intricate that this) 63.65 595.62 P
-0.05 (traditional view allows. In general, the) 63.65 582.62 P
3 F
-0.05 (detail of collaborative activity) 235.65 582.62 P
0 F
-0.05 (, as explored by the ethnomethodological) 368.42 582.62 P
-0.6 (perspective, is rooted in the) 63.65 569.62 P
3 F
-0.6 (detail of the technology) 184.71 569.62 P
0 F
-0.6 ( available, whether that technology is comprised of everyday) 286.5 569.62 P
0.12 (physical artifacts \050such as those discussed in Heath et al.\325s \0501995\051 study of broker dealing rooms\051 or computa-) 63.65 556.62 P
(tional ones \050such as those discussed in Grinter\325s \0501995\051 study of software engineers\051.) 63.65 543.62 T
0.39 (For instance, consider the issue of conflict management over shared data. Some data object exists in a shared) 63.65 523.62 P
-0.07 (workspace, and is available to a number of users for viewing and editing. A wide range of techniques might be) 63.65 510.62 P
-0.14 (used to achieve this end in any particular implementation. Actions might be serialised over a single copy of the) 63.65 497.62 P
0.44 (data item; the item might have to be \322locked\323, or \322checked out\323; or conflicts over actions applied to multiple) 63.65 484.62 P
-0.28 (copies might be subject to prioritisation or rollback. The particular strategy used is not at issue here. Rather, the) 63.65 471.62 P
-0.6 (critical observation is that the choice of implementation strategy lies) 63.65 458.62 P
3 F
-0.6 (below) 361.35 458.62 P
0 F
-0.6 ( the application level; it is invisible\321) 387.62 458.62 P
0.61 (or inexpressible\321above it. In terms of the traditional relationship between the perspectives, then, this would) 63.65 445.62 P
2.28 (imply that the choice of implementation strategy is irrelevant as long as the application functionality is) 63.65 432.62 P
(maintained.) 63.65 419.62 T
0.52 (However, the details of the specific implementation strategies carry with them important implications for the) 63.65 399.62 P
-0.26 (nature of the tasks which can be carried out. In an experimental study, Dourish and Bellotti \0501992\051 explored the) 63.65 386.62 P
0.23 (ways in which groups of collaborating authors organised their activity \050both individual and collective\051 around) 63.65 373.62 P
-0.63 (detailed features of the collaborative interface and the shared workspace control mechanisms, as enabled by spe-) 63.65 360.62 P
2.65 (cific implementation mechanisms. Similarly, Greenberg and Marwood \0501994\051 examined the relationship) 63.65 347.62 P
0.47 (between the mechanisms of distributed data management and the functionality of the user interface. As these) 63.65 334.62 P
-0.52 (studies demonstrate, far from being completely independent concerns, the issues of infrastructure flexibility and) 63.65 321.62 P
(usage flexibility are closely related.) 63.65 308.62 T
2 12 Q
(1.6.2  A Cross-Cutting V) 63.65 284.95 T
(iew of Flexibility) 192.82 284.95 T
0 11 Q
-0.35 (The primary topic of this thesis, then, is the provision of flexibility in CSCW toolkits. Flexibility is investigated) 63.65 267.62 P
-0.19 (from both perspectives. From the systems perspective, the goal is to build toolkits which are more flexible than) 63.65 254.62 P
-0.34 (traditional systems, so that a wider range of applications can be supported. From the usage perspective, the goal) 63.65 241.62 P
0.17 (is to be able to provide flexibility in forms which support the emergent work practices which social investiga-) 63.65 228.62 P
-0.24 (tions highlight. Running through both of these concerns, though, is the realisation that they are not independent) 63.65 215.62 P
0.08 (issues. Rather, the relationship between the systems and social perspectives highlights a set of concerns which) 63.65 202.62 P
1.08 (cut across traditional boundaries between aspects of system design and analysis, and which require a novel) 63.65 189.62 P
0.67 (approach to both the form and function of those barriers. At the same time as unifying these two views, this) 63.65 176.62 P
-0.49 (approach supports the development of a toolkit which is much more flexible than traditional techniques allow\321) 63.65 163.62 P
(that is, it extends the \322reach\323 of the toolkit.) 63.65 150.62 T
-0.57 (The technique that I will draw upon is called Open Implementation \050Kiczales, 1996\051. Open Implementation \050OI\051) 63.65 130.62 P
-0.34 (has its roots in a re-evaluation of the notion of abstraction in software engineering. The sorts of problems which) 63.65 117.62 P
0.82 (are encountered in CSCW systems are endemic to systems design, and occur in widely diverse fields. Open) 63.65 104.62 P
-0.48 (Implementations reframe the flexibility problem in terms of the role and use of \322abstraction\323 in current software) 63.65 91.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 1: Introduction.) 454.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(19) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.14 (practice. OI itself has developed from) 45.65 737.62 P
3 F
-0.14 (computational reflection) 213.76 737.62 P
0 F
-0.14 (. Reflection is a mechanism, based on computa-) 322.1 737.62 P
1.55 (tional self-reference, originally employed in programming language design. By providing systems with an) 45.65 724.62 P
0.74 (explicit and manipulable model of their own behaviour, reflection introduces opportunities for the system to) 45.65 711.62 P
3 F
-0.44 (introspect) 45.65 698.62 P
0 F
-0.44 ( \050reason about its own behaviour by examining the model\051 and) 89.65 698.62 P
3 F
-0.44 (intercede) 363.1 698.62 P
0 F
-0.44 ( \050control aspects of its behav-) 404.03 698.62 P
1.83 (iour by modifying the model\051. The OI approach applies this principle more generally to the problems of) 45.65 685.62 P
-0.6 (abstraction, by beginning to \322open up\323 system components and make them amenable to a certain amount of con-) 45.65 672.62 P
(trol from above.) 45.65 659.62 T
2 14 Q
(1.7  What Is T) 45.65 632.62 T
(o Come) 131.24 632.62 T
0 11 Q
(This, then, is the line of argument which this dissertation will lay out and demonstrate:) 45.65 610.62 T
(1.) 45.65 590.62 T
0.45 (That the evidence of empirical and naturalistic studies of cooperative work demonstrates that usage issues) 59.18 590.62 P
(and system issues are fundamentally linked.) 59.18 577.62 T
(2.) 45.65 558.62 T
0.36 (That the re-evaluation of abstraction in software engineering, set out by research in Open Implementation,) 59.18 558.62 P
(applies to these issues as encountered in CSCW) 59.18 545.62 T
(.) 268.68 545.62 T
(3.) 45.65 526.62 T
(That OI/re\337ective principles can be used to design a novel CSCW toolkit.) 59.18 526.62 T
(4.) 45.65 507.62 T
0.37 (That a toolkit built along these lines yields signi\336cant improvements in design \050and hence, usage\051 \337exibil-) 59.18 507.62 P
(ity) 59.18 494.62 T
(.) 70.08 494.62 T
-0.17 (Following on from the discussion here of the social and technical dimensions of CSCW, Chapter 2 will discuss) 45.65 477.62 P
0.03 (the approaches taken by a range of CSCW toolkits and systems, looking in particular at their support for flexi-) 45.65 464.62 P
-0.6 (bility in application design and use. With a clearer view of the problems, then, Chapter 3 will introduce the Open) 45.65 451.62 P
1.03 (Implementations approach, and its analysis of these problems in terms of the use of abstraction in software) 45.65 438.62 P
(design.) 45.65 425.62 T
-0.22 (This approach leads us towards a solution to the problems of flexibility in CSCW systems. Most importantly, it) 45.65 405.62 P
-0.43 (does this in a way which opens up some of the barriers between traditionally \322high\323 and \322low\323 level concerns\321) 45.65 392.62 P
-0.31 (the separation between the disciplines described earlier. Chapter 4 will introduce the use of OI in a CSCW tool-) 45.65 379.62 P
0.3 (kit, Prospero, which attempts to address the problem of flexibility and separation. Dealing especially with the) 45.65 366.62 P
-0.1 (areas of \0501\051 distributed data management and \0502\051 consistency and conflict control, Prospero uses OI techniques) 45.65 353.62 P
-0.4 (to allow applications to become involved in the mechanisms within the toolkit which support them. Application) 45.65 340.62 P
-0.16 (programmers can \322reach in\323 to the toolkit, tailoring and specialising toolkit structures to the particular needs of) 45.65 327.62 P
0.49 (their applications. Chapters 5 and 6 will discuss, in turn, these two principal areas of attention, and the novel) 45.65 314.62 P
1.21 (techniques which Prospero introduces to provide application programmers with toolkit control; and finally,) 45.65 301.62 P
-0.28 (Chapter 7 will present some more extended examples to give a clearer overall picture of the toolkit and its uses.) 45.65 288.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 1: Introduction) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(20) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits.) 399.18 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(21) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Chapter 2:) 45.65 674.29 T
(Flexibility in CSCW T) 45.65 646.29 T
(oolkits) 249.76 646.29 T
2 14 Q
(2.1  Introduction) 45.65 552.42 T
0 11 Q
-0.26 (The previous chapter emphasised the importance of flexibility in collaboration. CSCW applications are charac-) 45.65 530.42 P
0.3 (terised by a diversity of usage patterns, group working styles, interactional requirements and technologies. At) 45.65 517.42 P
-0.33 (the same time, observational and sociological studies of collaborative work highlight the variable, locally-orga-) 45.65 504.42 P
-0.27 (nised nature of the sequential organisation of activity. Flexibility in working styles implies flexibility in CSCW) 45.65 491.42 P
(tools, and in turn, in the technological bases for their development.) 45.65 478.42 T
-0.01 (In this chapter, I will be concerned with issues of flexibility in existing CSCW toolkits. Flexible and adaptable) 45.65 458.42 P
-0.2 (operation is at the heart of toolkit design, since it provides for reuse. I will begin by examining this relationship) 45.65 445.42 P
-0.44 (between flexibility and reuse, from both the system design and HCI perspectives, and then discuss various ways) 45.65 432.42 P
-0.09 (in which flexibility might be embodied in these systems. Following this, in section 2.4, I will present a number) 45.65 419.42 P
0.12 (of existing CSCW toolkits, discussing their main features and facilities, with particular emphasis on their sup-) 45.65 406.42 P
-0.5 (port for flexibility and on the range of applications which they support. Taking these systems as examples, I will) 45.65 393.42 P
0.17 (step back in section 2.5 to consider styles and elements of flexibility more generally. In particular, I will draw) 45.65 380.42 P
0.26 (a distinction between flexible operation through) 45.65 367.42 P
3 F
0.26 (genericity) 261.07 367.42 P
0 F
0.26 ( and through) 305.06 367.42 P
3 F
0.26 (extensibility) 364.19 367.42 P
0 F
0.26 (; and then, on the basis of) 417.35 367.42 P
(this analysis, I will highlight problems common to all the toolkits discussed.) 45.65 354.42 T
2 14 Q
(2.2  Flexibility and Reuse) 45.65 327.42 T
0 11 Q
-0.29 (As in any other area of software design, early CSCW systems were constructed as monolithic entities, specially) 45.65 305.42 P
0.61 (crafted to needs of particular applications, user communities and software environments. As experience with) 45.65 292.42 P
0.97 (these early systems grew, as the scope of applications diversified, and as understandings of system require-) 45.65 279.42 P
-0.59 (ments, application characteristics and usage patterns increased, it became both possible and desirable to embody) 45.65 266.42 P
(common design elements in toolkits) 45.65 253.42 T
0 8.8 Q
(1) 204.54 257.82 T
0 11 Q
(.) 208.94 253.42 T
2 12 Q
(2.2.1  Software Issues) 45.65 229.75 T
0 11 Q
0.3 (From a software perspective, one of the primary goals of toolkit design is) 45.65 212.42 P
3 F
0.3 (reuse) 375.24 212.42 P
0 F
0.3 (. When embodied in a toolkit,) 399.07 212.42 P
-0.1 (components, algorithms and implementations can be recombined and reused in different applications. Much of) 45.65 199.42 P
0.24 (the value of the toolkit resides in the) 45.65 186.42 P
3 F
0.24 (range) 210.73 186.42 P
0 F
0.24 ( of applications it can be used to create. The design of abstractions) 236.39 186.42 P
1.01 (for the toolkit, then, focuses on the balance between two competing requirements. On the one hand, toolkit) 45.65 173.42 P
-0.35 (design strives to maximise the generality or commonality of the toolkit\325s component structures, so that they can) 45.65 160.42 P
-0.02 (be used in multiple applications. On the other, it emphasises the flexibility in the ways they can be instantiated) 45.65 147.42 P
45.65 110.95 531.65 131.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 118.94 177.62 118.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.12 (1.  Note that, in this discussion, I will use the term \322toolkit\323 to include what might otherwise be called libraries, frameworks, etc.\321that) 45.65 104.95 P
(is, systems which are used to generate applications, through specialisation, inclusion, run-time support, etc.) 45.65 94.95 T
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(22) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.38 (and manipulated \050so that a wide range of applications can be derived from these components\051. The flexibility) 63.65 737.62 P
0.57 (which allows common components to be used in different ways and to different purposes has to be balanced) 63.65 724.62 P
(against other criteria such as interoperability, consistency and integration.) 63.65 711.62 T
0.45 (These issues, of course, are common to software concerns in the design of toolkits for any domain. Patterson) 63.65 691.62 P
-0.33 (\0501991\051 discusses some of the particular issues which CSCW systems raise in comparison with single-user inter-) 63.65 678.62 P
0.82 (active systems, focussing in particular on a set of issues addressed in the Rendezvous toolkit, which will be) 63.65 665.62 P
(examined shortly.) 63.65 652.62 T
2 12 Q
(2.2.2  HCI Issues) 63.65 628.95 T
0 11 Q
0.12 (Flexibility is an important issue in HCI research generally, and a number of researchers have studied issues of) 63.65 611.62 P
0.26 (customisation, tailorability and adaptation \050see, for example Trigg et al., 1987; Maclean et al., 1990; Mackay,) 63.65 598.62 P
-0.36 (1989, 1990, 1991; Nardi, 1993\051. HCI\325s concern with flexibility has been motivated by a desire to match the fea-) 63.65 585.62 P
-0.28 (tures and behaviour of interactive tools to the range of working styles and tasks to which they might be applied.) 63.65 572.62 P
-0.44 (The focus of such research, however, has largely been on flexibility within the context of particular applications) 63.65 559.62 P
1 (or particular instances of software systems. In these cases, variability operates across a population of users,) 63.65 546.62 P
0.36 (employing an application in different circumstances. While some of this work \050e.g. Mackay, 1990; Nardi and) 63.65 533.62 P
0.43 (Miller, 1991\051 has emphasised the importance of tailoring as a group activity, this tailoring is still largely per-) 63.65 520.62 P
(formed in support of individual needs.) 63.65 507.62 T
0.44 (In CSCW applications, the problems of flexibility \050or rather, of) 63.65 487.62 P
3 F
0.44 (inflexibility) 349.17 487.62 P
0 F
0.44 (\051 can become more readily appar-) 399.29 487.62 P
1.94 (ent\321and that much greater\321since the \322user\323 of a CSCW system is a) 63.65 474.62 P
3 F
1.94 (group) 394.83 474.62 P
0 F
1.94 ( of individuals. As a result,) 421.11 474.62 P
0.67 (variability can occur within a single group, as well as between different groups. This has led to a number of) 63.65 461.62 P
-0.1 (attempts to incorporate intra-group flexibility, variable interface coupling patterns, etc. \050e.g. Greenberg, 1991\051.) 63.65 448.62 P
-0.06 (As in traditional HCI, however, this type of investigation takes a user focus, and concentrates largely on single) 63.65 435.62 P
(applications or application areas.) 63.65 422.62 T
2 14 Q
(2.3  A Framework for Flexibility) 63.65 395.62 T
0 11 Q
0.43 (In their discussion of tailorability facilities in the Notecards hypertext system, Trigg et al. \0501987\051 set out four) 63.65 373.62 P
(levels of flexibility:) 63.65 360.62 T
(1.) 63.65 340.62 T
0.62 (a) 77.18 340.62 P
3 F
0.62 (\337exible) 85.43 340.62 P
0 F
0.62 ( system provides generic objects and behaviours which can be combined and used dif) 117.2 340.62 P
0.62 (ferently by) 501.07 340.62 P
(dif) 77.18 327.62 T
(ferent users of the system;) 89.21 327.62 T
(2.) 63.65 308.62 T
(a) 77.18 308.62 T
3 F
(parameterised) 84.82 308.62 T
0 F
( system provides objects with a range of alternative behaviours;) 148.37 308.62 T
(3.) 63.65 289.62 T
(an) 77.18 289.62 T
3 F
(integrable) 90.32 289.62 T
0 F
( system can be connected to other system components;) 135.54 289.62 T
(4.) 63.65 270.62 T
(a) 77.18 270.62 T
3 F
(tailorable) 84.82 270.62 T
0 F
( system allows users to change the system itself, add functionality or specialise behaviours.) 128.21 270.62 T
-0.19 (Drawing on the HCI perspective outlined above, this separation focuses on flexibility and adaptability in appli-) 63.65 253.62 P
-0.56 (cations. The concerns in programmable toolkits differ, although we can fruitfully make use of these distinctions.) 63.65 240.62 P
-0.55 (Toolkits are designed to be used to create some range of applications. They are all) 63.65 220.62 P
3 F
-0.55 (flexible) 419.51 220.62 P
0 F
-0.55 ( in Trigg et al.\325s terms.) 451.89 220.62 P
0.62 (The concern which is addressed here is not their) 63.65 207.62 P
3 F
0.62 (being flexible) 284.02 207.62 P
0 F
0.62 (, but the) 344.21 207.62 P
3 F
0.62 (extent of their flexibility) 384.59 207.62 P
0 F
0.62 (\321that is, the) 491.87 207.62 P
-0.14 (range of applications which they can be used to create. This captures not only the range of application domains) 63.65 194.62 P
-0.6 (to which they can be applied, but also the range of interactional styles which can be supported using toolkit com-) 63.65 181.62 P
-0.21 (ponents and mechanisms. So, for my purposes here, flexibility is a relative term, rather than an absolute one. In) 63.65 168.62 P
-0.03 (support of this, the critical aspect which will be addressed here is the fourth level of Trigg et al.\325s analysis,) 63.65 155.62 P
3 F
-0.03 (tai-) 534.37 155.62 P
0.53 (lorability) 63.65 142.62 P
0 F
0.53 (; the extent to which toolkit facilities themselves can be adapted and extended. \050At the same time, I) 104.6 142.62 P
-0.2 (will also continue to use the term \322flexible\323 as a general one, rather than in the specific sense which Trigg et al.) 63.65 129.62 P
(introduce.\051) 63.65 116.62 T
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits.) 399.18 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(23) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.4 (In the analysis which will follow \050section 2.5\051, I will discuss these issues in terms of two particular concepts.) 45.65 737.62 P
-0.24 (G) 45.65 724.62 P
3 F
-0.24 (enericity) 53.59 724.62 P
0 F
-0.24 (, is the extent to which toolkit features are generic, capturing a wide range of behaviours, and the use) 92.08 724.62 P
-0.26 (of this property to support flexible action.) 45.65 711.62 P
3 F
-0.26 (Extensibility) 230.21 711.62 P
0 F
-0.26 (, the extent to which they can be extended and revised to) 285.21 711.62 P
(support new behaviours, and the similar way in which this is used.) 45.65 698.62 T
-0.35 (An orthogonal concern is the \322locus of flexibility\323\321that is, the point within the system where flexibility is han-) 45.65 678.62 P
(dled and exploited. I will distinguish between three points at which flexibility issues come to the fore:) 45.65 665.62 T
(1.) 45.65 645.62 T
3 F
0.34 (Pr) 59.18 645.62 P
0.34 (ogrammer/toolkit) 69.78 645.62 P
0 F
0.34 (\321\337exibility within the toolkit, of) 146.78 645.62 P
0.34 (fered to the programmer so that toolkit structures can) 294.93 645.62 P
(be used variably) 59.18 632.62 T
(, adapted or augmented \050for example, controlling \337oor control criteria\051;) 130.56 632.62 T
(2.) 45.65 613.62 T
3 F
1.55 (Pr) 59.18 613.62 P
1.55 (ogrammer/application) 69.78 613.62 P
0 F
1.55 (\321\337exibility exploited in the application under programmer control. This might) 168.78 613.62 P
0.49 (include, for instance, the use of adaptive algorithms to or) 59.18 600.62 P
0.49 (ganise internal behaviours around the patterns of) 314.24 600.62 P
0.45 (use at a particular time \050for example, dynamic data control which adapts to network bandwidth and topol-) 59.18 587.62 P
(ogy\051;) 59.18 574.62 T
(3.) 45.65 555.62 T
3 F
1.07 (User/application) 59.18 555.62 P
0 F
1.07 (\321\337exibility in the application under user control. This includes parametric control over) 133.74 555.62 P
0.11 (application behaviour \050for example, control over levels of user interface coupling\051, as well as the extension) 59.18 542.62 P
(of applications with new user) 59.18 529.62 T
(-supplied structures or behaviours.) 188.5 529.62 T
0.44 (There is a clear relationship between these three forms of flexibility. Flexibility at any one point is helpful in) 45.65 512.62 P
-0.16 (providing further flexibility down-stream. Here, however, I am concerned with the first level, flexibility within) 45.65 499.62 P
0.52 (the toolkits themselves; the flexibility required to support a diverse range of applications. My focus is on the) 45.65 486.62 P
-0.22 (mechanisms by which such flexibility is realised, how these are specified and used, and with the ways in which) 45.65 473.62 P
(they affect the properties \050and the range\051 of applications which can be developed.) 45.65 460.62 T
2.32 (Even a brief examination of existing CSCW applications reveals a host of systems and interface issues) 45.65 440.62 P
-0.5 (addressed in different ways, which may each be the locus of particular flexibility concerns. Apart from the obvi-) 45.65 427.62 P
-0.11 (ous differences in application domains, these include the techniques by which data is distributed and managed;) 45.65 414.62 P
0.12 (mechanisms for joining and leaving collaborative sessions; mechanisms for mediating between individual and) 45.65 401.62 P
0.36 (group work; means by which individuals become aware of the activity of others; levels of interface coupling;) 45.65 388.62 P
0.07 (temporal aspects of interpersonal interaction; and so forth. Toolkits, similarly, vary in the extent to which pro-) 45.65 375.62 P
0.05 (grammers can gain control over these sorts of issues, and can potentially adapt toolkit mechanisms to the need) 45.65 362.62 P
1.08 (of particular applications. These are the ways in which flexibility is manifest in toolkits themselves, and in) 45.65 349.62 P
(which it is made accessible to programmers developing collaborative applications.) 45.65 336.62 T
2 12 Q
(2.3.1  Collaboration T) 45.65 312.95 T
(ransparency and Collaboration A) 159.92 312.95 T
(wareness) 334.45 312.95 T
0 11 Q
0.15 (One approach to collaboration support, particularly represented in early systems, is organised around the need) 45.65 295.62 P
-0.62 (for) 45.65 282.62 P
3 F
-0.62 (collaboration transparency) 60.6 282.62 P
0 F
-0.62 (\321that is, the collaborative operation of existing single-user applications, without) 180.68 282.62 P
-0.39 (any modification for explicit collaboration support \050Lauwers et al., 1990\051. A number of CSCW systems provide) 45.65 269.62 P
0.09 (run-time environments which allow single-user applications to be shared; examples include Rapport \050Ahuja et) 45.65 256.62 P
-0.24 (al., 1990\051 and Shared X \050Gust, 1988; Garfinkel et al., 1989\051. Others, such as MMConf \050Crowley et al., 1990\051 or) 45.65 243.62 P
(ABC \050Jeffay, 1992\051, support collaboration transparency as one possible mode of operation.) 45.65 230.62 T
0.32 (Typically, such systems interrupt the event flow between application and interface at some point, and insert a) 45.65 210.62 P
-0.62 (multiplexor. This replicates the application\325s actions, making them available at a number of points on a network,) 45.65 197.62 P
0.23 (and can potentially accept user input from multiple streams and channel it to the application. Since the under-) 45.65 184.62 P
-0.18 (lying applications contain no native understanding of the multiple streams which might now be used to interact) 45.65 171.62 P
-0.17 (with them, application sharing environments might also introduce \322floor control\323 mechanisms to manage input) 45.65 158.62 P
0.04 (streams explicitly. These regulate users\325 access to the application input stream, using various policies to deter-) 45.65 145.62 P
(mine how access to the application\325s input stream is to be distributed between the various users.) 45.65 132.62 T
0.28 (In a wide range of situations, support for collaboration transparency is critical. Users typically deploy a range) 45.65 112.62 P
0.12 (of applications in support of a task, and so any of these might need to be made available to a group \050at least in) 45.65 99.62 P
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(24) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.04 (some \322display\323 mode, where one user remains in control\051. However, this approach to application sharing has a) 63.65 737.62 P
0.19 (number of drawbacks. The first is that the forms of collaborative activity which they can support are typically) 63.65 724.62 P
0.39 (quite limited, since the interface is not designed to reflect the activity of multiple users. Floor control mecha-) 63.65 711.62 P
2.44 (nisms restrict access, or provide a controlled sharing model, to support the single-user approach of the) 63.65 698.62 P
0.28 (application, at the cost of restricting the group to one-at-a-time action. The second major drawback is that the) 63.65 685.62 P
0.79 (centralisation implied by collaboration transparency can impose a heavy performance burden. Typically, the) 63.65 672.62 P
0.07 (collaboration run-time mechanism is sharing access to a single application, running at one point on a network;) 63.65 659.62 P
0.23 (the cost of replicating display updates to all the participating hosts can be high, especially over long distances) 63.65 646.62 P
(or low-bandwidth connections.) 63.65 633.62 T
1.93 (In general, though, the collaboration-transparent approach is not of direct concern here; the requirements) 63.65 613.62 P
1.6 (imposed by collaboration transparency limit the options for incorporating variable or flexible mechanisms) 63.65 600.62 P
2.21 (within the infrastructure itself. Instead, I will focus primarily on systems supporting collaboration-aware) 63.65 587.62 P
(applications.) 63.65 574.62 T
0.18 (In the next section, a number of existing CSCW toolkits are presented and briefly described and compared. In) 63.65 554.62 P
0.75 (the subsequent section, I will step back to consider the issues of flexibility more generally, and consider the) 63.65 541.62 P
(ways in which current strategies for incorporating toolkit flexibility are problematic.) 63.65 528.62 T
2 14 Q
(2.4  CSCW T) 63.65 501.62 T
(oolkits and Approaches) 144.55 501.62 T
0 11 Q
1.07 (This section presents six CSCW toolkits of various sorts\321Rendezvous, GroupKit, MEAD, Suite, Oval and) 63.65 479.62 P
-0.29 (COLA. The systems vary widely in both form and focus. After presenting aspects of the structure and design of) 63.65 466.62 P
(each toolkit, I will focus in particular on how they address flexibility issues.) 63.65 453.62 T
2 12 Q
(2.4.1  Rendezvous) 63.65 429.95 T
0 11 Q
-0.07 (Rendezvous \050Patterson et al., 1990; Hill et al., 1994\051 is a CSCW toolkit created at Bellcore. Rendezvous is pri-) 63.65 412.62 P
1.01 (marily designed for building synchronous, graphical groupware applications. Written in Common Lisp, and) 63.65 399.62 P
0.52 (running over the X Window System, it has been used to create a number of applications, from drawing tools) 63.65 386.62 P
-0.66 (such as the Conversation Board \050Brink and Gomez, 1992\051 to distributed user interface prototyping environments) 63.65 373.62 P
(\050Miller et al., 1992\051.) 63.65 360.62 T
-0.38 (The mechanism at the heart of Rendezvous is the) 63.65 340.62 P
3 F
-0.38 (Abstraction-Link-View) 279.31 340.62 P
0 F
-0.38 ( \050ALV\051 structure \050Hill, 1992\051.) 379.53 340.62 P
3 F
-0.38 (Abstrac-) 511.76 340.62 P
2.34 (tions) 63.65 327.62 P
0 F
2.34 ( capture shared aspects of application representations.) 85.04 327.62 P
3 F
2.34 (Views) 340.9 327.62 P
0 F
2.34 ( present individual users with interface) 367.18 327.62 P
0.13 (representations and interaction mechanisms. Different users may see different representations, or be presented) 63.65 314.62 P
0.95 (with different interaction modalities to the same abstraction by their different views. Systems of constraints) 63.65 301.62 P
-0.14 (\050) 63.65 288.62 P
3 F
-0.14 (Links) 67.31 288.62 P
0 F
-0.14 (\051 relate Abstractions to Views. Links are responsible for transforming user interface actions in the Views) 91.15 288.62 P
1.85 (into appropriate modifications to the Abstraction, and similarly for ensuring that Views are appropriately) 63.65 275.62 P
0.35 (updated when any changes are introduced to the common Abstraction. Rendezvous uses this constraint-based) 63.65 262.62 P
0.06 (mechanism to manage all communication between Views and the Abstraction; all messages to the Abstraction) 63.65 249.62 P
(must be implemented in terms of constrained state-changes.) 63.65 236.62 T
2 F
(2.4.1.1  Flexibility in Rendezvous) 63.65 209.62 T
0 F
-0.41 (Rendezvous is, very much, a programmatic toolkit. In other words, the flexibility which it embodies is achieved) 63.65 192.62 P
0.11 (through the ways in which its mechanisms are built into the base language \050Common Lisp\051 and can be manip-) 63.65 179.62 P
-0.66 (ulated and combined using the facilities that the programming language offers. This approach works particularly) 63.65 166.62 P
0.45 (well on top of Lisp as a base language\321Lisp has been insightfully described as a language for building little) 63.65 153.62 P
0.4 (languages. Despite this largely programmatic focus, however, there are also some flexibility issues addressed) 63.65 140.62 P
(by aspects of the system\325s design itself.) 63.65 127.62 T
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits.) 399.18 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(25) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
5 10 Q
0 X
(4.1.1.1  Replication and Centralisation) 45.65 738.29 T
0 11 Q
1.59 (Rendezvous concentrates on support for real-time \050synchronous\051, graphical, direct-manipulation interfaces,) 45.65 721.62 P
0.08 (using the constraint mechanism to provide dynamic feedback between an abstraction and multiple views. This) 45.65 708.62 P
-0.02 (structure is reflected in most derived applications described in the research literature \050Brink and Gomez, 1992;) 45.65 695.62 P
(Brink and Hill, 1993; Hill et al., 1994\051.) 45.65 682.62 T
0.3 (Although the ALV approach presents the abstraction as the central point of coordination, Rendezvous\325 model) 45.65 662.62 P
-0.37 (is not inherently restricted to centralised designs. For example, one could certainly imagine using the same con-) 45.65 649.62 P
-0.35 (straint system which relates Views to Abstractions as a means to synchronise multiple copies of an Abstraction.) 45.65 636.62 P
-0.03 (However, the current Rendezvous implementation uses a centralised model; in fact, the Abstraction object and) 45.65 623.62 P
-0.34 (all View objects exist within a single address space on one machine, using remote X displays to distribute inter-) 45.65 610.62 P
0.05 (faces. The designers comment that they have found a single 64kbps channel sufficient for any of their existing) 45.65 597.62 P
0.47 (implementations \050Hill et al., 1994\051, although they do not discuss issues of latency over long distances, which) 45.65 584.62 P
-0.31 (are surely problematic. They do, however, discuss the desirability of a distributed implementation which would) 45.65 571.62 P
(separate the Views from the Abstraction.) 45.65 558.62 T
5 10 Q
(4.1.1.2  Declarative Event Model) 45.65 533.29 T
0 11 Q
1.05 (Rendezvous\325 strongly object-oriented architecture supports a powerful programming model. In particular, it) 45.65 516.62 P
-0.44 (allows interfaces to be constructed in a declarative style, in both their appearance and behaviour. Graphic object) 45.65 503.62 P
0.17 (classes handle the specifics of particular forms of graphical object; and a powerful event model allows behav-) 45.65 490.62 P
2.18 (iours to be associated with objects declaratively, freeing the programmer from the complex spaghetti of) 45.65 477.62 P
(callbacks and event-handing code.) 45.65 464.62 T
-0.37 (This declarative model lends itself to the encapsulation of interface behaviours not unlike Myers\325 \0501990\051 \322inter-) 45.65 444.62 P
-0.17 (actor\323 approach. As will be discussed in more detail later, this encapsulation of behaviour in an object-oriented) 45.65 431.62 P
-0.4 (structure is particularly interesting when looking at flexibility issues, since it allows behavioural mechanisms to) 45.65 418.62 P
-0.4 (be specialised and modified independently of graphical and other interface features. It allows application devel-) 45.65 405.62 P
0.84 (opers to think in terms of extending the toolkit facilities, and then writing their applications in terms of this) 45.65 392.62 P
(extended functionality.) 45.65 379.62 T
2 12 Q
(2.4.2  GroupKit) 45.65 355.95 T
0 11 Q
-0.53 (GroupKit \050Roseman and Greenberg, 1992; Roseman and Greenberg, 1996\051 is a flexible toolkit for building real-) 45.65 338.62 P
-0.23 (time collaborative applications. Like Rendezvous, it is a programmatic toolkit. The first implementation was in) 45.65 325.62 P
0.25 (the C++ UI toolkit Interviews, and was informed by both programmer-level and user-level requirements from) 45.65 312.62 P
-0.08 (earlier experiments with monolithic groupware applications, as well as the collaborative window system Share) 45.65 299.62 P
-0.49 (\050Greenberg, 1991; Greenberg et al., 1992\051. The current implementation is written in Tcl/Tk \050Ousterhout, 1994\051.) 45.65 286.62 P
-0 (Unlike Rendezvous, the run-time system is based on a replicated object model. Object replication provides the) 45.65 266.62 P
(responsiveness which the system needs to support synchronous graphical applications.) 45.65 253.62 T
-0.16 (GroupKit has three major components. First, a) 45.65 233.62 P
3 F
-0.16 (run-time system) 251.99 233.62 P
0 F
-0.16 ( manages distribution issues and provides trans-) 321.79 233.62 P
1.41 (parent support for sharing application objects. Second, an) 45.65 220.62 P
3 F
1.41 (interface system) 312.92 220.62 P
0 F
1.41 ( \050based on transparent overlays\051) 385.51 220.62 P
0.04 (provides multi-user widgets and components for creating user interfaces with collaborative properties \050such as) 45.65 207.62 P
0.09 (support for telepointers\051. Third, a programming model based on) 45.65 194.62 P
3 F
0.09 (open protocols) 330.28 194.62 P
0 F
0.09 ( accommodates differences for) 396.07 194.62 P
(policy issues such as floor control.) 45.65 181.62 T
2 F
(2.4.2.1  Flexibility in GroupKit: Open Protocols) 45.65 154.62 T
0 F
0.36 (The use of open protocols \050Roseman and Greenberg, 1993\051 is of most relevance to flexibility concerns. Open) 45.65 137.62 P
0.16 (protocols are designed as a technological mechanism to support personalisable groupware, through which dif-) 45.65 124.62 P
(ferent groups and different users can tailor the appearance and behaviour of collaborative systems.) 45.65 111.62 T
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(26) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.28 (The open protocols approach begins with the understanding that system behaviour can be controlled and con-) 63.65 737.62 P
0.85 (figured through manipulation of state. From this, Roseman and Greenberg separate out the three constituent) 63.65 724.62 P
0.3 (components of an open protocol system\321a) 63.65 711.62 P
3 F
0.3 (controlled) 259.15 711.62 P
0 F
0.3 ( object, a) 304.37 711.62 P
3 F
0.3 (controller) 348.04 711.62 P
0 F
0.3 (, and a) 392.04 711.62 P
3 F
0.3 (protocol) 424.71 711.62 P
0 F
0.3 ( between them. The) 461.99 711.62 P
0.05 (controlled object is an abstraction, residing in the \050conceptual\051 server, which makes the protocol available as a) 63.65 698.62 P
1.02 (mechanism for accessing and changing state; the controller resides in clients of the controlled object server) 63.65 685.62 P
0.38 (\050which are, potentially, also user interface clients of the groupware system\051. The server imposes no policy on) 63.65 672.62 P
0.5 (the sequential organisation of state changes, and so clients can embody different policies for manipulation of) 63.65 659.62 P
-0.21 (the information. For instance, floor control can be managed by establishing the \322current floor holder\323 as shared) 63.65 646.62 P
-0.58 (state information in a floor control server, which provides mechanisms for altering that state within the protocol;) 63.65 633.62 P
-0.42 (and the floor control policy \050round-robin, request/grant, etc.\051 can be implemented by clients using the floor con-) 63.65 620.62 P
-0.37 (trol protocol. The server not only does not impose a mechanism, but it is unaware of the mechanism being used,) 63.65 607.62 P
(which may have been developed after the server itself was written.) 63.65 594.62 T
1.78 (So in general, this mechanism can support not only inter-group differences, but also intra-group policies.) 63.65 574.62 P
0.59 (Clearly, however, there is a requirement for coordination between the controller objects, so that they operate) 63.65 561.62 P
-0.24 (coherently together. Coordination mechanisms like these are defined outside the open protocol approach. Open) 63.65 548.62 P
0.71 (protocols simply make the tailoring facilities available; the programmer is then responsible for ensuring that) 63.65 535.62 P
(applications function coherently.) 63.65 522.62 T
2 12 Q
(2.4.3  MEAD) 63.65 498.95 T
0 11 Q
-0.53 (A long-term project at the University of Lancaster focussed on cooperative interface development in the domain) 63.65 481.62 P
1.13 (of air traffic control, integrating ethnographic investigations with the system design process \050Hughes et al.,) 63.65 468.62 P
-0.6 (1993\051. MEAD \050Bentley et al., 1992; Bentley, 1994\051 is a multi-user interface prototyping environment developed) 63.65 455.62 P
(in this project. The need for tailorability was driven by three concerns:) 63.65 442.62 T
(1.) 63.65 422.62 T
0.66 (the need for dif) 77.18 422.62 P
0.66 (ferent views and interaction mechanisms over the shared data for the various participants\325) 146.46 422.62 P
(purposes;) 77.18 409.62 T
(2.) 63.65 390.62 T
(the variety of working practices surrounding air traf) 77.18 390.62 T
(\336c control technologies and artifacts;) 305.18 390.62 T
(3.) 63.65 371.62 T
-0.06 (the need to support collaborative development with users through real-time incremental adjustments to run-) 77.18 371.62 P
(ning prototypes.) 77.18 358.62 T
0.1 (The first two concerns were raised by the domain requirements, particularly as uncovered by the ethnographic) 63.65 341.62 P
(material; the third reflects a concern with iterative, collaborative prototyping.) 63.65 328.62 T
2 F
(2.4.3.1  Flexibility in MEAD: T) 63.65 301.62 T
(ailorable User Display Agents) 206.69 301.62 T
0 F
-0.11 (MEAD supports interface tailoring by introducing User Display Agents which sit between the central informa-) 63.65 284.62 P
1.61 (tion space and individual user interfaces. The User Display Agent is responsible for the management and) 63.65 271.62 P
-0.43 (representation of shared information in each user\325s display. Each user might have multiple User Display Agents) 63.65 258.62 P
0.18 (acting collaboratively to manage information across disparate interface components. Communication between) 63.65 245.62 P
0.01 (the central information store and the display agents is handled via an event mechanism; display agents register) 63.65 232.62 P
0.58 (interests in particular update events, and a pattern-matching mechanism dynamically relates update events to) 63.65 219.62 P
1.07 (display agents which should be notified. Communication between display agents and the information store,) 63.65 206.62 P
-0.07 (then, takes place at a high level, defined in terms of domain semantics; the specifics of interface representation) 63.65 193.62 P
(are the responsibility of the User Display Agent.) 63.65 180.62 T
0.04 (The primary flexibility concern in the User Display Agent model is supporting rapid prototyping and interface) 63.65 160.62 P
0.06 (construction. This is managed through the manipulation of three classes of User Display properties\321selection) 63.65 147.62 P
1.19 (\050objects to be displayed\051, presentation \050forms of graphical representation\051, and composition \050combining the) 63.65 134.62 P
-0.32 (objects into a single display\051. These attributes are available locally at each User Display site, so that they can be) 63.65 121.62 P
0.3 (manipulated dynamically, providing a mechanism for user tailorability \050albeit, again, largely designed in sup-) 63.65 108.62 P
1.26 (port of rapid interface prototyping rather than user tailoring\051. Any changes to the User Display criteria are) 63.65 95.62 P
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits.) 399.18 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(27) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.11 (immediately reflected in the appearance and behaviour of the display. One simplifying factor here is that User) 45.65 737.62 P
-0.06 (Displays are largely independent of each other, operating as separate dynamic visualisations of a shared space;) 45.65 724.62 P
-0.13 (and so, changing aspects of one display will have minimal impact on other Displays \050although a single Display) 45.65 711.62 P
(might be included in more than one user\325s \322working set\323\051.) 45.65 698.62 T
2 12 Q
(2.4.4  Suite) 45.65 674.95 T
0 11 Q
0.1 (Suite is multi-user application toolkit derived from an earlier, single-user application toolkit of the same name) 45.65 657.62 P
1.15 (\050Dewan, 1990; Dewan and Choudhary, 1992\051. Suite focuses on editor-based interfaces implemented over a) 45.65 644.62 P
(shared data model.) 45.65 631.62 T
-0.21 (Sharing and coordination in Suite is achieved through the linkage between) 45.65 611.62 P
3 F
-0.21 (shared active variables) 373.62 611.62 P
0 F
-0.21 (and) 478.4 611.62 P
3 F
-0.21 (interac-) 496.82 611.62 P
1.96 (tion variables) 45.65 598.62 P
0 F
1.96 (. Essentially, this is the point where multi-user fan-out takes place. Shared active variables) 108.42 598.62 P
0.16 (represent the shared abstraction whose value is reflected in some aspect of the interface\321shared because they) 45.65 585.62 P
-0.4 (are common to all users of an application, and active because, from the point of view of any particular interface,) 45.65 572.62 P
-0.48 (their values may change asynchronously. For each shared active variable, there are a number of interaction vari-) 45.65 559.62 P
3.16 (ables, which are the sites of local activity for each interface. Interfaces \050dialogue managers, in Suite) 45.65 546.62 P
-0.33 (terminology\051 operate on interaction variables; the toolkit manages the relationship between the interaction vari-) 45.65 533.62 P
-0.63 (ables and their corresponding shared active variables according to a defined set of rules. Rules can be overridden) 45.65 520.62 P
(in particular applications to customise sharing behaviour.) 45.65 507.62 T
2 F
(2.4.4.1  Flexibility in Suite: Coupling Control) 45.65 480.62 T
0 F
1.59 (Suite provides a rich model for describing the degrees of interface and value coupling between interfaces) 45.65 463.62 P
-0.43 (\050Dewan and Choudhary, 1995\051. Interaction variables are organised into) 45.65 450.62 P
3 F
-0.43 (coupling sets,) 357.95 450.62 P
0 F
-0.43 ( each associated with a set) 418.02 450.62 P
-0.17 (of coupling attributes.) 45.65 437.62 P
3 F
-0.17 (Coupling attributes) 144.74 437.62 P
0 F
-0.17 ( control different aspects of interface coupling\321whether the value is) 230.45 437.62 P
-0.36 (shared, whether forms of presentation are shared, whether scrolling is shared, and so on. The values of coupling) 45.65 424.62 P
0.06 (attributes determine the extent of the coupling.) 45.65 411.62 P
3 F
0.06 (Transmission attributes) 254.45 411.62 P
0 F
0.06 ( control the circumstances under which) 358.73 411.62 P
0.1 (values or the results of actions are made available to other parts of the system: immediately, incrementally, on) 45.65 398.62 P
(commit, after some time interval, etc.) 45.65 385.62 T
-0.29 (Since attributes are associated with coupling sets, rather than the interface as a whole, different coupling modes) 45.65 365.62 P
-0.06 (can be present within the same system; similarly, different coupling modes may be available between different) 45.65 352.62 P
0.38 (users. Each user can set coupling attributes privately; a conservative matching algorithm is used to determine) 45.65 339.62 P
-0.55 (the specific coupling parameters which will be used between any two interaction variables. The fan-out between) 45.65 326.62 P
-0.02 (shared active variables and interaction variables is the point at which Suite offers the programmer control over) 45.65 313.62 P
(styles of interaction in collaborative applications.) 45.65 300.62 T
2 12 Q
(2.4.5  Oval) 45.65 276.95 T
0 11 Q
0.74 (Oval \050Objects, Views, Agents and Links\051 \050Malone et al., 1995\051 is the latest in a long line of related systems) 45.65 259.62 P
-0.07 (development by Tom Malone and colleagues at MIT. Beginning with Lens \050subsequently Information Lens\051, a) 45.65 246.62 P
0.76 (rule-based email processing system, Malone and others developed a model of \322semi-structured\323 information) 45.65 233.62 P
0.37 (processing, with a particular emphasis on end-user customisation and tailoring \050Malone et al., 1987; Mackay,) 45.65 220.62 P
0.44 (1989\051. Semi-structured objects and autonomous agents then became the basis of Object Lens, a more general) 45.65 207.62 P
(system for supporting collaborative applications; and Object Lens has subsequently developed into Oval.) 45.65 194.62 T
0.87 (Oval provides four basic components for which it is named\321) 45.65 174.62 P
3 F
0.87 (Objects) 325.09 174.62 P
0 F
0.87 (,) 358.69 174.62 P
3 F
0.87 (Views) 365.07 174.62 P
0 F
0.87 (,) 391.34 174.62 P
3 F
0.87 (Agents) 397.71 174.62 P
0 F
0.87 ( and) 427.66 174.62 P
3 F
0.87 (Links) 450.78 174.62 P
0 F
0.87 (.) 474.62 174.62 P
3 F
0.87 (Objects) 480.99 174.62 P
0 F
0.87 ( are) 514.6 174.62 P
-0.17 (\322semi-structured\323; that is, an object definition provides an untyped, non-exclusive list of fields which an object) 45.65 161.62 P
0.32 (of that type will contain.) 45.65 148.62 P
3 F
0.32 (Views) 157.84 148.62 P
0 F
0.32 ( are visualisations of objects and object collections, allowing sets of objects to) 184.12 148.62 P
-0.22 (be clustered and presented in various ways depending on their contents, for instance as tables or graphs.) 45.65 135.62 P
3 F
-0.22 (Agents) 501.71 135.62 P
0 F
-0.45 (are production rules associated with objects which trigger when their conditions\321typically, particular values of) 45.65 122.62 P
(object fields\321are met.) 45.65 109.62 T
3 F
(Links) 148.9 109.62 T
0 F
( relate objects, allowing the creation of networks, hierarchies, etc.) 172.74 109.62 T
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(28) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.62 (What Oval provides is essentially a visual programming language, expressed in terms of these objects and deriv-) 63.65 737.62 P
-0.66 (atives of them created by users. So, an application can be constructed by defining a set of objects, creating agents) 63.65 724.62 P
(to trigger behaviours on input or computation, and providing an appropriate set of visualisations.) 63.65 711.62 T
2 F
(2.4.5.1  Flexibility in Oval: Supporting Radical T) 63.65 684.62 T
(ailorability) 293.52 684.62 T
0 F
-0.08 (A major goal of Oval is the provision of \322radical tailorability\323, a form of end-user programming. By tailorabil-) 63.65 667.62 P
-0.37 (ity, Oval\325s designers mean the ability for end-users to modify and customise applications, creating new systems) 63.65 654.62 P
0.22 (out of old, and doing this without programming. By \322radical\323, they mean that this tailorability can encompass) 63.65 641.62 P
(wide changes; much wider than are traditionally associated with tailoring or customising behaviour.) 63.65 628.62 T
-0.34 (As an investigation of the scope which Oval provides for variability, it was used in the experimental \050re-\051imple-) 63.65 608.62 P
0.02 (mentation of four pre-existing systems. The systems chosen were: The Coordinator, an early workflow system) 63.65 595.62 P
0.44 (based on a structured conversation model; gIBIS, a graphical hypertext system supporting design argumenta-) 63.65 582.62 P
-0.01 (tion; Lotus Notes, a collaborative database system for information sharing applications; and Information Lens,) 63.65 569.62 P
-0.04 (an email filtering system. The core Oval components were used to re-implement the functionality of these sys-) 63.65 556.62 P
0.13 (tems, requiring only minimal descent to the systems level, and so demonstrating the value of Oval\325s \322building) 63.65 543.62 P
(block\323 design.) 63.65 530.62 T
-0.38 (There are some important issues which should be borne in mind when evaluating this claim. While the four sys-) 63.65 510.62 P
0.13 (tems vary in their domain detail, they\325re based on the same model of collaboration\321asynchronous interaction) 63.65 497.62 P
0.01 (over messaging systems. This is particularly interesting in the case of the Oval implementation of Notes, since) 63.65 484.62 P
1.05 (true Notes employs a shared database model, which the Oval implementation does not attempt to replicate.) 63.65 471.62 P
-0.58 (Instead, the Oval model captures the behaviour of an) 63.65 458.62 P
3 F
-0.58 (application) 293.67 458.62 P
0 F
-0.58 ( which might be implemented over Lotus Notes) 343.79 458.62 P
-0.29 (\050Notes itself is an infrastructure for the creation of collaborative applications\051. Similarly, the developers explic-) 63.65 445.62 P
0.08 (itly point to \322a shared \324live\325 database\323 as one feature of gIBIS which they have not attempted to reproduce. At) 63.65 432.62 P
-0.33 (the same time, given its intellectual history, it is not surprising to find that the functionality of Information Lens) 63.65 419.62 P
(is easily recaptured in Oval) 63.65 406.62 T
0 8.8 Q
(2) 184.01 411.02 T
0 11 Q
(.) 188.41 406.62 T
1.11 (So, while the reimplementation exercise impressively demonstrates that Oval subsumes the functionality of) 63.65 386.62 P
-0.13 (these disparate systems\321and, even more critically, that it makes sufficient variability available) 63.65 373.62 P
3 F
-0.13 (to the user) 484.34 373.62 P
0 F
-0.13 ( that) 530.53 373.62 P
0.06 (they can be implemented without recourse to system modification\321we must distinguish the variability of col-) 63.65 360.62 P
0.21 (laborative) 63.65 347.62 P
3 F
0.21 (applications) 110.6 347.62 P
0 F
0.21 ( from the variability of) 164.99 347.62 P
3 F
0.21 (patterns of collaboration) 269 347.62 P
0 F
0.21 (. The facilities which Oval provides to) 379.44 347.62 P
-0.29 (users as the means to create and modify applications are largely single-user in nature; sharing and collaboration) 63.65 334.62 P
(remain largely outside its immediate domain.) 63.65 321.62 T
2 12 Q
(2.4.6  COLA) 63.65 297.95 T
0 11 Q
-0.09 (COLA \050Cooperating Objects in Lightweight Activities\051 \050Trevor et al., 1995\051 is a platform for supporting coop-) 63.65 280.62 P
0.63 (erative work which is derived more from a distributed systems perspective than an HCI perspective. That is,) 63.65 267.62 P
-0.16 (Trevor\325s primary concern is to extend distributed system understandings and techniques in light of experiences) 63.65 254.62 P
-0.23 (with distributed interfaces, rather than to extend the understandings and techniques of HCI with input from dis-) 63.65 241.62 P
2.13 (tributed systems. The principal component of the resultant system is a lightweight activity model which) 63.65 228.62 P
0.51 (provides a context within which objects\321perhaps those provided by a separate distributed object platform\321) 63.65 215.62 P
(can be shared.) 63.65 202.62 T
-0.46 (The \322lightweight\323 aspect of the system arises from the fact that the system carries with it only minimal semantic) 63.65 182.62 P
0.71 (implications for the development of applications. So, for instance, the activity model does not introduce any) 63.65 169.62 P
0.4 (requirements for the temporal ordering of tasks \050as would a traditional workflow system, for example\051. Simi-) 63.65 156.62 P
63.65 130.95 549.65 151.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 138.94 195.62 138.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(2.  The developers are at understandable pains avoid confusion between Oval and Information Lens. \322Oval is based strongly on the) 63.65 124.95 T
-0.19 (Object Lens system...\323, they say) 63.65 114.95 P
-0.19 (, \322which should not be confused with the more limited Information Lens system\323 \050Malone et al., 1995\051.) 178.26 114.95 P
(However) 63.65 104.95 T
(, the intellectual heritage is still strong; Object Lens is described elsewhere as \322the \324second generation\325 of the Information) 96.27 104.95 T
(Lens system\323 \050Lai and Malone, 1988\051.) 63.65 94.95 T
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits.) 399.18 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(29) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.79 (larly, issues of context are separated from the basic objects themselves through the use of context-particular) 45.65 737.62 P
3 F
(object adapters) 45.65 724.62 T
0 F
( \050Trevor et al., 1994\051.) 113.78 724.62 T
2 F
(2.4.6.1  Flexibility in COLA: The Policy/Mechanism Split) 45.65 697.62 T
0 F
0.03 (COLA is designed to run in combination with a variety of distributed system infrastructures, as well as in sup-) 45.65 680.62 P
0.86 (port of a range of applications. In fact, one of its principal motivations is also one of mine\321that traditional) 45.65 667.62 P
0.19 (toolkit approaches embody semantics which restrict the application programmer\325s freedom. \050The implications) 45.65 654.62 P
(of this observation will be developed in more detail in Chapter 3.\051) 45.65 641.62 T
-0.35 (COLA\325s approach, however, differs from that which will be subsequently developed here. COLA\325s approach is) 45.65 621.62 P
0.63 (to make a rigorous distinction between) 45.65 608.62 P
3 F
0.63 (mechanism) 222.94 608.62 P
0 F
0.63 ( and) 272.43 608.62 P
3 F
0.63 (policy) 295.07 608.62 P
0 F
0.63 (. This is a common approach across a range of) 321.95 608.62 P
-0.45 (system designs. Mechanism refers to the support for particular actions or system behaviours, while policy refers) 45.65 595.62 P
-0.5 (to the set of decisions about how and when these behaviours will take effect. The X Toolkit, for example, claims) 45.65 582.62 P
-0.56 (to provide the) 45.65 569.62 P
3 F
-0.56 (mechanisms) 107.82 569.62 P
0 F
-0.56 ( required to build a scroll bar \050objects which track the mouse, constrained action, etc.\051) 161.59 569.62 P
-0.23 (but does not provide a scroll bar because that would involve making) 45.65 556.62 P
3 F
-0.23 (policy) 345.97 556.62 P
0 F
-0.23 ( decisions \050such as which side of the) 372.86 556.62 P
0.73 (window it should be on, and which mouse keys should operate it\051. Similarly, in COLA, policy is seen as an) 45.65 543.62 P
-0.23 (application issue\321concerning how people are to work together\321while the toolkit provides \322policy-free mech-) 45.65 530.62 P
(anisms\323 which can be employed in a range of ways in support of different applications or application policies.) 45.65 517.62 T
-0.1 (One aspect of this separation as an approach to toolkit design is that it is typically characterised by a decompo-) 45.65 497.62 P
-0.51 (sition of toolkit components. As a result, the components which are offered by the toolkit are small, atomic units) 45.65 484.62 P
-0.44 (which will then be combined by the application or client of the toolkit, since the nature of their composition will) 45.65 471.62 P
0.2 (involve policy decisions. In other words, it is not simply that the client has) 45.65 458.62 P
3 F
0.2 (control over) 379.1 458.62 P
0 F
0.2 ( policy, but rather that) 433.38 458.62 P
0.3 (it) 45.65 445.62 P
3 F
0.3 (creates) 54.81 445.62 P
0 F
0.3 ( policy in the way in which it uses the lower-level components and mechanisms. COLA provides an) 86.58 445.62 P
-0.13 (event mechanism which can be used to overcome some of the issues of coordination \050that is, maintaining some) 45.65 432.62 P
(correspondence between the states of different components\051 which this implies.) 45.65 419.62 T
0.02 (COLA\325s lightweight approach results in a considerably more flexible structure than a number of the other sys-) 45.65 399.62 P
-0.38 (tems described here, although there are clearly places where some policy decisions must be made. For example,) 45.65 386.62 P
0.52 (the event mechanism is synchronous, favouring particular styles of application; and object adaptors are man-) 45.65 373.62 P
-0.28 (aged by the binder, restricting the ways in which they can be fluidly interchanged within an activity. In general,) 45.65 360.62 P
(however, the policy/mechanism split is clearly an effective means to support programmer/toolkit flexibility.) 45.65 347.62 T
2 12 Q
(2.4.7  Other Systems) 45.65 323.95 T
0 11 Q
0.14 (While my primary concern here is on flexibility in toolkits in particular, it is instructive to look at some appli-) 45.65 306.62 P
0.34 (cations and show how they have been designed for flexible use. These are both suggestive of areas worthy of) 45.65 293.62 P
(particular investigation, and illustrative of the purposes to which infrastructure flexibility is put.) 45.65 280.62 T
2 F
(2.4.7.1  SEPIA) 45.65 253.62 T
0 F
-0.58 (SEPIA \050Streitz et al., 1992; Haake and Wilson, 1992\051, a collaborative hypertext system developed at GMD, sup-) 45.65 236.62 P
2.77 (ports a wide range of applications based on the model of collaborative authoring and interaction over) 45.65 223.62 P
-0.19 (hypermedia documents. The basic hypertext system is based on a persistent storage model which provides sup-) 45.65 210.62 P
0.77 (port for asynchronous collaboration. However, SEPIA is an explicitly collaborative system, and its interface) 45.65 197.62 P
0.91 (supports a range of collaboration modes supporting different forms of interaction. SEPIA\325s three modes are) 45.65 184.62 P
3 F
-0.24 (individual) 45.65 171.62 P
0 F
-0.24 (,) 90.26 171.62 P
3 F
-0.24 (loosely-coupled) 95.52 171.62 P
0 F
-0.24 ( and) 165.17 171.62 P
3 F
-0.24 (tightly-coupled) 186.07 171.62 P
0 F
-0.24 (. Individual work involves activity on a hypertext node which is) 252.68 171.62 P
-0.64 (currently the focus of attention for only one user. Loosely-coupled and tightly-coupled work both involve simul-) 45.65 158.62 P
-0.16 (taneous activity over some node by a number of users, and differ in the ways in which the interface for any one) 45.65 145.62 P
-0.14 (user will reflect the activities of others. When two users are loosely coupled, each is free to scroll around in the) 45.65 132.62 P
0.15 (document and work separately, although the interface makes them aware of each other\325s presence and uses an) 45.65 119.62 P
0.36 (implicit locking mechanism to avoid conflicting changes. When they are tightly coupled, they share the same) 45.65 106.62 P
-0.56 (view of the document \050that is, their interfaces are maintained in lock-step\051, and have a telepointer and audio con-) 45.65 93.62 P
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(30) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
1.88 (nection to support their interaction. The transition between individual and loosely-coupled mode happens) 63.65 737.62 P
-0.33 (automatically when two users enter the same node; the further transition to tightly-coupled working can then be) 63.65 724.62 P
(controlled by the users.) 63.65 711.62 T
2 F
(2.4.7.2  PREP) 63.65 684.62 T
0 F
-0.68 (Early versions of PREP, a collaborative text editor from Carnegie-Mellon University, embodied a strongly asyn-) 63.65 667.62 P
0.68 (chronous model of collaboration. More recent versions, however, have offered users parametric control over) 63.65 654.62 P
0.5 (various aspects of its collaboration support. The basic PREP editor manipulates documents defined as one or) 63.65 641.62 P
0.14 (more columns, which might be used for the main document text, planning and outline information, reviewers\325) 63.65 628.62 P
1.26 (comments, etc. \050Neuwirth et al., 1990\051. Group interaction is supported in an asynchronous, \322draft-passing\323) 63.65 615.62 P
0.63 (mode; however, it provides support for comparing and merging simultaneous copies \050Neuwirth et al., 1992\051.) 63.65 602.62 P
-0.24 (Most recently, user control over aspects of shared interaction have been introduced to explore the utility of var-) 63.65 589.62 P
0.19 (ious parameters for collaborative authors \050Neuwirth et al., 1994\051. These include control over: the grain size of) 63.65 576.62 P
0.17 (update blocks; under what conditions updates should be sent to other participants; the speed at which network) 63.65 563.62 P
-0.52 (agents will exchange information; how one is informed of others\325 changes; and access rights over different parts) 63.65 550.62 P
(of the document.) 63.65 537.62 T
2 14 Q
(2.5  Genericity and Extensibility) 63.65 510.62 T
0 11 Q
0.18 (This quick tour through the CSCW toolkits has revealed a host of mechanisms and approaches taken to a host) 63.65 488.62 P
-0.21 (of different design issues\321interface linkage, data distribution, access control, consistency management, etc. In) 63.65 475.62 P
0.85 (addition, the different systems use different mechanisms to allow their facilities to be tailored, controlled or) 63.65 462.62 P
0.76 (adapted to the variety of applications which they might support. Rather than focussing on the toolkits them-) 63.65 449.62 P
(selves, this section is concerned with ways to characterise their flexibility.) 63.65 436.62 T
-0.26 (If flexibility\321the extent to which it can be applied in a range of circumstances\321is a primary goal in the design) 63.65 416.62 P
-0.36 (of a toolkit, how is this flexibility embodied? For the purposes of this discussion, I will distinguish between two) 63.65 403.62 P
-0.05 (major routes towards flexibility\321) 63.65 390.62 P
3 F
-0.05 (genericity) 213.5 390.62 P
0 F
-0.05 ( and) 257.49 390.62 P
3 F
-0.05 (extensibility) 278.77 390.62 P
0 F
-0.05 (\321and two aspects of toolkit design to which they) 331.93 390.62 P
-0.51 (are applied\321) 63.65 377.62 P
3 F
-0.51 (components) 122.71 377.62 P
0 F
-0.51 ( and) 175.25 377.62 P
3 F
-0.51 (functions) 195.62 377.62 P
0 F
-0.51 (. This second separation is often more conceptual than practical, but will) 235.96 377.62 P
(prove to be a significant distinction in attempting to understand issues of flexibility.) 63.65 364.62 T
-0.27 (Genericity and extensibility were defined in section 2.3. By \322components\323, I refer to) 63.65 344.62 P
3 F
-0.27 (objects embodied in a sys-) 434.64 344.62 P
0.14 (tem) 63.65 331.62 P
0 F
0.14 (, and which the system offers for use by clients. Particular components might be expressed in the interface) 79.53 331.62 P
-0.23 (\050such as the widgets of user interface toolkits\051 or might be realised only within the code itself \050such as common) 63.65 318.62 P
(programming abstractions such as sockets and streams\051.) 63.65 305.62 T
0.23 (By\323 functions\323, I refer to) 63.65 285.62 P
3 F
0.23 (aspects of the functionality of the system) 177.81 285.62 P
0 F
0.23 ( \050rather than the value-returning procedures) 356.99 285.62 P
-0.31 (of programming languages\051. These are the dynamic behaviours in which components engage. Most often, these) 63.65 272.62 P
-0.44 (are directly associated with specific components, and indeed they may be critical to their existence \050a scroll-bar,) 63.65 259.62 P
-0.62 (after all, is only a scroll-bar by dint of its functionality\051. Some systems, however, separate functions into abstract) 63.65 246.62 P
-0.27 (objects in their own right. The Garnet system, for instance, provides abstract \322interactor\323 objects which capture) 63.65 233.62 P
-0.23 (user interface behaviour and can be associated by the programmer with particular aspects of the interface, lead-) 63.65 220.62 P
0.51 (ing to a declarative style of interface programming \050Myers, 1990\051. For example, rather than setting callbacks) 63.65 207.62 P
-0.44 (for keyboard events and then checking if the keys were pressed while the mouse was over a particular rectangle,) 63.65 194.62 P
0.94 (the programmer can associate a \322text-input-interactor\323 with the rectangle; the interactor is a concrete object) 63.65 181.62 P
0.51 (which describes interactive behaviour independent of the graphical form which it might take in any instance.) 63.65 168.62 P
-0.09 (The function has been instantiated as an object. In the terminology in use here, this remains a \322function\323 rather) 63.65 155.62 P
0.25 (than a \322component\323 because its role is more than structural. In a toolkit, the importance of this separation lies) 63.65 142.62 P
0.75 (in the opportunity it provides to express the ways in which functions and components can be combined into) 63.65 129.62 P
0.77 (larger units \050like the \322rectangle and text interactor\323 structure\051, and\321most importantly\321the means by which) 63.65 116.62 P
(associations can be made between them.) 63.65 103.62 T
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits.) 399.18 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(31) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.32 (Traditionally,) 45.65 737.62 P
3 F
0.32 (genericity) 108.91 737.62 P
0 F
0.32 ( is the most significant aspect of toolkit flexibility. It captures the extent to which the) 152.9 737.62 P
0.21 (facilities in the toolkit are \322generic\323, or useful across some range of circumstances or applications. The use of) 45.65 724.62 P
-0.36 (genericity\321the identification, generalisation and separation of facilities determined to be common across some) 45.65 711.62 P
-0.36 (number of applications\321is perhaps most obviously represented by the design histories of early CSCW toolkits.) 45.65 698.62 P
-0.14 (Since they were often derived from earlier specific applications, their features are often generalised versions of) 45.65 685.62 P
0.06 (mechanisms created for the applications. Genericity can \050indeed, should\051 apply equally to the components and) 45.65 672.62 P
0.15 (the functions of the toolkit. Both may be designed to be inherently generic \050that is, applying naturally to some) 45.65 659.62 P
(range of circumstances\051, or may use some parameterisation mechanism to achieve wider applicability.) 45.65 646.62 T
3 F
-0.58 (Extensibility) 45.65 626.62 P
0 F
-0.58 ( is a second route towards the provision of flexibility and increasing the reach of the toolkit. It refers) 100.65 626.62 P
-0.59 (to the opportunity to extend the range of facilities within the toolkit; that is, the extent to which the toolkit allows) 45.65 613.62 P
-0.37 (programmers to create new components and functions which can then be used within the toolkit itself alongside) 45.65 600.62 P
0.32 (those which were already provided. This may be achieved in a variety of ways, and may be organised around) 45.65 587.62 P
0.21 (the modification of existing facilities as well as the creation of new ones; but in any of these cases, the toolkit) 45.65 574.62 P
(acts as a framework for the creation of new) 45.65 561.62 T
3 F
(toolkit) 238.99 561.62 T
0 F
( facilities, rather than the creation of new) 267.11 561.62 T
3 F
(applications) 450.7 561.62 T
0 F
(.) 505.1 561.62 T
2 12 Q
(2.5.1  Genericity and Extensibility in CSCW T) 45.65 537.95 T
(oolkits) 285.06 537.95 T
0 11 Q
-0.31 (These separations\321between genericity and extensibility as techniques, and between components and functions) 45.65 520.62 P
0.32 (as the objects of their action\321create a framework within which we can begin to characterise aspects of flexi-) 45.65 507.62 P
(bility in the toolkits discussed earlier.) 45.65 494.62 T
-0.03 (It seems slightly ironic that, in pursuit of \322radical\323 tailorability, Oval employs exclusively genericity, the more) 45.65 474.62 P
0.63 (traditional of the two techniques. \050The radical element of Oval\325s agenda, of course, is that the tailorability is) 45.65 461.62 P
0.27 (offered to users, rather than programmers; it does not apply to the techniques by which tailorability is accom-) 45.65 448.62 P
0.93 (plished, or to the nature of tailorability itself.\051 Oval offers four highly general components\321objects, views,) 45.65 435.62 P
(agents and links\321which can be combined in different ways, and are associated with behaviours.) 45.65 422.62 T
-0.35 (Oval exploits parameterisation to relate its generic components to specific application needs. For some range of) 45.65 402.62 P
0.16 (behaviours, the parameters are internally determined by the system \050such as the types of views which are sup-) 45.65 389.62 P
-0.25 (ported, and the events to which agents can respond\051. Other parameters are determined by user tailoring; each of) 45.65 376.62 P
0.49 (the components, for instance, may feature some form of parameterisation based on the names of object slots,) 45.65 363.62 P
-0.1 (which are defined by users as part of the customisation process. This second form of parameterisation is key to) 45.65 350.62 P
0.77 (the functioning of the system; it\325s the point of association between components and functions \050functions are) 45.65 337.62 P
-0.1 (associated with named slots, which are embedded in objects\051. However, even though the \322language of parame-) 45.65 324.62 P
1.17 (terisation\323 is, in some ways, being created by the user, this remains parameterisation \050and hence a form of) 45.65 311.62 P
-0.1 (genericity\051 rather than extensibility. Neither new abstractions nor new forms of existing abstractions \050such as a) 45.65 298.62 P
(new view\051 can be introduced into the system.) 45.65 285.62 T
0.1 (COLA also employs genericity, but to somewhat different ends. While Oval relies on generic semantics\321that) 45.65 265.62 P
0.03 (is, the functions which it supports apply in a wide range of application situations\321COLA\325s genericity is more) 45.65 252.62 P
-0.1 (structural, dealing with the sorts of contextual information which collaborative applications, modelled in terms) 45.65 239.62 P
-0.02 (of activities, might need at different points. The structured information which it makes available carries with it) 45.65 226.62 P
0.09 (as little semantic information \050or constraint\051 as possible, so that applications are free to use this information in) 45.65 213.62 P
0.61 (whichever way is appropriate. In some sense, perhaps, the way in which the information can be used in new) 45.65 200.62 P
-0.13 (ways could be seen as a form of extensibility, except that there is nothing to extend. COLA explicitly strives to) 45.65 187.62 P
-0.5 (be policy-free; so application programmers are not) 45.65 174.62 P
3 F
-0.5 (extending) 267.91 174.62 P
0 F
-0.5 ( the facilities to include new policies, but rather are) 310.68 174.62 P
3 F
-0.09 (defining) 45.65 161.62 P
0 F
-0.09 ( new policies which reside entirely outside the toolkit. As a result, COLA is generic, rather than exten-) 81.71 161.62 P
(sible. COLA itself provides no opportunity for explicit control over its own mechanisms.) 45.65 148.62 T
0.17 (MEAD, Rendezvous and Suite begin to open up more explicit control, focussing on particular points of lever-) 45.65 128.62 P
1.74 (age. In MEAD, this is the point of connection between the shared information space and different users\325) 45.65 115.62 P
-0.16 (interfaces; in Rendezvous, it is the relationship between specific parts of a shared abstraction and the reflection) 45.65 102.62 P
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(32) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.59 (of this state in users\325 interfaces. So there is a progression, from MEAD, through Rendezvous, to Suite in the) 63.65 737.62 P
(balance of focus between shared interfaces and shared data.) 63.65 724.62 T
-0.02 (Suite also achieves flexibility through its concentration on one highly general area, the fan-out between shared) 63.65 704.62 P
-0.07 (active variables and interaction variables \050and, relatedly, the coupling between interaction variables\051. The rela-) 63.65 691.62 P
1.78 (tionship between the interaction variables of different dialogue managers reflects, primarily, the issues of) 63.65 678.62 P
-0.66 (multiple interface management and coordination; the relationship between an interaction variable and the shared) 63.65 665.62 P
0.24 (active variable to which it corresponds reflects the split between interface and application. Again, parameteri-) 63.65 652.62 P
0.06 (sation is the primary means by which a range of behaviours can be exhibited by a single mechanism \050this time) 63.65 639.62 P
0.39 (focussed on coupling rule sets, so functions rather than components\051. The Suite toolkit itself sets the terms in) 63.65 626.62 P
0.46 (which coupling can be controlled; the programmer can manipulate these parameters \050or, more accurately, the) 63.65 613.62 P
0.41 (attributes from which specific parameters are derived by the matching algorithm\051. However, there is no route) 63.65 600.62 P
(by which new parameters can be defined, or new mechanisms created out of existing ones.) 63.65 587.62 T
0.26 (Finally, GroupKit provides a set of generic components out of which interfaces might be constructed\321essen-) 63.65 567.62 P
-0.37 (tially, a set of groupware widgets. On the other hand, it also begins to provide a route towards the customisation) 63.65 554.62 P
-0.04 (of behaviour through the open protocols mechanism. Unlike a number of the other approaches presented, open) 63.65 541.62 P
1.39 (protocols begin to make the relationship between system components and behaviours explicit, so that new) 63.65 528.62 P
1.07 (mechanisms can be incorporated into the framework created by the system\325s components and the protocols) 63.65 515.62 P
0.77 (defined on them. The protocols themselves do not embody behaviours; rather, they embody the sequence of) 63.65 502.62 P
(operations out of which behaviours may be created. The result is to allow new behaviours to be incorporated.) 63.65 489.62 T
2 14 Q
(2.6  Problems in T) 63.65 462.62 T
(oolkit Flexibility) 175.69 462.62 T
0 11 Q
0.71 (The CSCW toolkits presented here vary considerably in their form of support for collaborative systems and,) 63.65 440.62 P
0.34 (hence, in the forms of collaborative systems which they can support. However, they use similar sorts of tech-) 63.65 427.62 P
(niques to provide flexible control over their collaboration support mechanisms.) 63.65 414.62 T
0.58 (Typically, the behaviour of these systems is modelled in terms of information flows and constraints between) 63.65 394.62 P
-0.31 (predefined elements\321the ways in which they can be combined and coordinated, and how information and con-) 63.65 381.62 P
-0.43 (trol passes between them. The transmission attributes in Suite and the sharing parameters in PREP, for instance,) 63.65 368.62 P
0.39 (control the flows of information between private and shared locations. Flexibility is achieved through control) 63.65 355.62 P
-0.34 (over the information flows\321their granularity, frequency and distribution. As techniques for incorporating flex-) 63.65 342.62 P
-0.06 (ibility into a toolkit, genericity and parameterisation focus on the) 63.65 329.62 P
3 F
-0.06 (range of ways) 351.78 329.62 P
0 F
-0.06 ( in which information flow can) 413.38 329.62 P
-0.58 (be regulated, and hence the range of behaviours which can be managed. Extensibility, on the other hand, focuses) 63.65 316.62 P
0.67 (on the ability to create) 63.65 303.62 P
3 F
0.67 (new forms) 168.11 303.62 P
0 F
0.67 ( of information available to programmer control,) 214.31 303.62 P
3 F
0.67 (new components) 435.89 303.62 P
0 F
0.67 ( between) 509.58 303.62 P
-0.38 (which information flows can be defined, or) 63.65 290.62 P
3 F
-0.38 (new control mechanisms) 254.06 290.62 P
0 F
-0.38 ( which can be used to regulate the informa-) 362.07 290.62 P
0.52 (tion flows, within the framework which the basic \050non-extended\051 system sets up. However, these approaches) 63.65 277.62 P
(leave two particular problems unresolved.) 63.65 264.62 T
2 12 Q
(2.6.1  Structure and Semantics) 63.65 240.95 T
0 11 Q
0.15 (The first is that, since they concentrate on the) 63.65 223.62 P
3 F
0.15 (structural) 267.83 223.62 P
0 F
0.15 ( aspects of the design\321ways of selecting components) 311.23 223.62 P
-0.06 (and plugging them together\321they typically make it hard to give the programmer control over the) 63.65 210.62 P
3 F
-0.06 (semantics) 494.41 210.62 P
0 F
-0.06 ( of) 537.8 210.62 P
1.28 (information flow. Semantics, typically, will have to reside in existing components, so that manipulation of) 63.65 197.62 P
0.11 (system semantics arises) 63.65 184.62 P
3 F
0.11 (out of) 171.21 184.62 P
0 F
0.11 ( the manipulation of system structure. The basic data model which underlies the) 196.69 184.62 P
-0.38 (structures manipulated is typically unavailable for tailoring. One way to think about this is in terms of the \322rich-) 63.65 171.62 P
0.99 (ness\323 of the language of tailorability \050Bentley and Dourish, 1995\051. In the case of parameterised control, for) 63.65 158.62 P
0.79 (example, the \322language\323 in which programmers express their requirements is restricted to the names of pre-) 63.65 145.62 P
0.98 (defined modes of operation. Toolkits using this sort of approach \050to a greater or lesser degree\051 do not offer) 63.65 132.62 P
0.83 (languages in which new semantic behaviours can be expressed, giving them control only over the structural) 63.65 119.62 P
(aspects of their application support \050how the pre-existing components are to be plugged together\051.) 63.65 106.62 T
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits.) 399.18 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(33) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
2 12 Q
0 X
(2.6.2  Extending versus Revising) 45.65 736.95 T
0 11 Q
0.3 (The second, related problem is that even the more flexible approach, extensibility, typically provides only for) 45.65 719.62 P
(the) 45.65 706.62 T
3 F
(incorporation) 61.84 706.62 T
0 F
( of new mechanisms, rather than the) 122.96 706.62 T
3 F
(modification) 284.86 706.62 T
0 F
( of existing ones.) 340.48 706.62 T
0.8 (In part, this is a question of granularity. With an appropriately fine-grained control, and a framework which) 45.65 686.62 P
0.35 (allowed behavioural delegation within larger structures, we) 45.65 673.62 P
3 F
0.35 (could) 312.04 673.62 P
0 F
0.35 ( consider modifying or replacing the behav-) 336.48 673.62 P
0.34 (iour of particular large-scale structures, by extending just those parts of the structure which we might want to) 45.65 660.62 P
-0.46 (change \050and hence affecting their behaviour\051. However, such fine-grained control is rarely available. In general,) 45.65 647.62 P
-0.42 (the extension model is intended to allow the inclusion of new structures, rather than the modification of existing) 45.65 634.62 P
(ones.) 45.65 621.62 T
-0.51 (One approach might simply be to say that we could \322modify existing structures\323 by introducing new ones which) 45.65 601.62 P
0.87 (act in similar ways, but which include the new behaviours we need. Unfortunately, that \322reimplementation\323) 45.65 588.62 P
0.2 (approach is not sufficient. It still gives no control over the) 45.65 575.62 P
3 F
0.2 (internal) 305.68 575.62 P
0 F
0.2 ( relationships between system components.) 340.52 575.62 P
-0.29 (For example, if a system provided shared text boxes for editing, but used an interaction model unsuited to some) 45.65 562.62 P
-0.4 (particular situation, it\325s not enough to be able to create a new form of text interactor which behaves more appro-) 45.65 549.62 P
0.62 (priately, if the programmer has no means to apply this to any other) 45.65 536.62 P
3 F
0.62 (internal) 350.1 536.62 P
0 F
0.62 ( aspects of the system which use) 384.93 536.62 P
-0.29 (those same text units \050perhaps for error messages or debugging, or some other internally-originated behaviour\051.) 45.65 523.62 P
0.04 (Instead, what\325s required is the ability to \322reach inside\323 and introduce modifications to the system components,) 45.65 510.62 P
0.04 (essentially \322in place\323. Again, internal aspects of the system are unavailable for examination and manipulation.) 45.65 497.62 P
(Extensibility is limited to those areas of design which are \322outside\323 the toolkit itself.) 45.65 484.62 T
2 14 Q
(2.7  Summary) 45.65 457.62 T
0 11 Q
0.05 (To explore the questions of flexibility which were raised in Chapter 1, this chapter has examined how existing) 45.65 435.62 P
0.43 (CSCW toolkits have incorporated flexibility into their designs. The primary concern addressed here has been) 45.65 422.62 P
-0.29 (that of flexibility as a relative, rather than an absolute, property. So, I have focussed on questions such as: What) 45.65 409.62 P
0.98 (range of applications can a toolkit support? What control are programmers offered over toolkit behaviours?) 45.65 396.62 P
(How can new behaviours and application needs be expressed in this toolkit?) 45.65 383.62 T
0.47 (As has been shown, different toolkits have taken very different approaches to these sorts of questions. I have) 45.65 363.62 P
0.44 (used the general notions of \322genericity\323 and \322extensibility\323 as a way of discussing the techniques which they) 45.65 350.62 P
-0.03 (demonstrate. The examination presented here has shown that these CSCW toolkits typically embody restricted) 45.65 337.62 P
0.64 (notions of flexibility, which, while opening up the design space to an extent, give programmers only limited) 45.65 324.62 P
0.22 (control over the ways in which the toolkit mechanisms will support their applications \050and hence, limiting the) 45.65 311.62 P
0.05 (range of applications which each toolkit can support\051. In making some set of structures, behaviours and mech-) 45.65 298.62 P
-0.23 (anisms available to application programmers, these toolkits also make a set of commitments to particular styles) 45.65 285.62 P
(of application and interaction.) 45.65 272.62 T
0.11 (These issues are by no means unique to CSCW design, although, as argued in Chapter 1, there are some prop-) 45.65 252.62 P
-0.23 (erties of CSCW systems which bring them more readily to the fore. In many other areas of system design, from) 45.65 239.62 P
1.01 (HCI to network protocol implementation, from programming language design to operating system architec-) 45.65 226.62 P
1.52 (tures, the same issues of flexibility, openness, and the relationship between internal structure and external) 45.65 213.62 P
-0.6 (requirements have arisen. In the next chapter, I will draw on ongoing work in the use of computational reflection) 45.65 200.62 P
(and Open Implementations to analyse these problems and present a framework for solutions.) 45.65 187.62 T
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 2: Flexibility in CSCW Toolkits) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(34) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation.) 325.66 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(35) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Chapter 3:) 45.65 674.29 T
(Computational Re\337ection and Open) 45.65 646.29 T
(Implementation) 45.65 618.29 T
2 14 Q
(3.1  Flexibility) 45.65 552.42 T
0 11 Q
-0.41 (In Chapter 2, I showed how a number of CSCW systems and toolkits tackle the problems of generality and flex-) 45.65 530.42 P
0.13 (ibility. In the range of components and functions which the toolkits provide \050and in the range of facilities they) 45.65 517.42 P
1.52 (support for combining and composing them\051, the designers of toolkits and similar application frameworks) 45.65 504.42 P
0.28 (attempt to encompass a variety of application styles and requirements. Of course, this is not unique to CSCW) 45.65 491.42 P
0.01 (design, but rather is a motivating factor behind any toolkit, framework, library or language. The goal is to pro-) 45.65 478.42 P
1.47 (vide reusable components which can be combined again and again to support the needs of some range of) 45.65 465.42 P
0.22 (applications. The flexibility which the toolkit embodies determines its range of applicability. In this chapter, I) 45.65 452.42 P
-0.57 (will relate the flexibility issues encountered in Chapter 2 to similar issues in other domains. I will draw on recent) 45.65 439.42 P
-0.05 (work on a novel architectural approach\321) 45.65 426.42 P
3 F
-0.05 (Open Implementation) 228.4 426.42 P
0 F
-0.05 (\321to discuss this problem in terms of the use of) 323.98 426.42 P
0.3 (\322abstraction\323 in system design, and to propose a solution. Along with the OI approach, I will also introduce a) 45.65 413.42 P
-0.14 (design principle on which it is based \050) 45.65 400.42 P
3 F
-0.14 (computational reflection) 211.8 400.42 P
0 F
-0.14 (\051 and a programming technique used to realise it) 320.13 400.42 P
(\050the) 45.65 387.42 T
3 F
(metaobject protocol) 65.5 387.42 T
0 F
(\051.) 153.8 387.42 T
0.43 (Computer systems supporting collaborative work need to be flexible in a number of ways. First, they need to) 45.65 367.42 P
-0.21 (support the variety of working styles which might be adopted by the groups using them. The choice of working) 45.65 354.42 P
0.97 (style might be affected by the particular individuals in the group, by wider organisational factors, or by the) 45.65 341.42 P
0.35 (nature of the task which is being performed. I will refer to this as) 45.65 328.42 P
3 F
0.35 (static) 339.19 328.42 P
0 F
0.35 ( flexibility, since it captures a form of) 363.03 328.42 P
(variability between sessions, but not necessarily within them.) 45.65 315.42 T
0.46 (In contrast to this,) 45.65 295.42 P
3 F
0.46 (dynamic) 129.69 295.42 P
0 F
0.46 ( flexibility refers to the requirement that the system be able to match and adapt to) 166.96 295.42 P
-0.29 (changes in the group\325s interactions over time. In typical settings, groups move fluidly between various styles of) 45.65 282.42 P
1.31 (work. In a typical meeting, we can observe continual movement between, for instance, formal turn-taking,) 45.65 269.42 P
1.16 (brainstorming and private activity. Similarly, the constitution of the group itself is subject to change in the) 45.65 256.42 P
-0.05 (course of collaboration. For instance, Beck and Bellotti \0501993\051 report on a questionnaire study of collaborative) 45.65 243.42 P
0.7 (authoring in which 23% of respondents stated that the membership of their groups changed after the writing) 45.65 230.42 P
(stage had begun.) 45.65 217.42 T
0.48 (Third is) 45.65 197.42 P
3 F
0.48 (implementational) 83.89 197.42 P
0 F
0.48 ( flexibility\321the need to be able to respond to a variety of implementation environ-) 160.89 197.42 P
2.51 (ments, which may themselves change over time. For instance, the technical requirements of supporting) 45.65 184.42 P
0.26 (collaborative activity over local-area and wide-area networks, with different latencies and response character-) 45.65 171.42 P
2.42 (istics, are quite different. Not only might a single tool be used in these various circumstances, but the) 45.65 158.42 P
0.07 (circumstances of use, and therefore the technical requirements, might change) 45.65 145.42 P
3 F
0.07 (in the course of a single session) 388.52 145.42 P
0 F
0.07 (.) 528.9 145.42 P
0.45 (When various group members distributed over a wide area leave and join a session, the effective topology of) 45.65 132.42 P
-0.41 (the network changes, and this may require adaptation in the system\325s support for ongoing collaborative activity.) 45.65 119.42 P
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(36) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
2 12 Q
0 X
(3.1.1  T) 63.65 736.95 T
(ackling Flexibility) 103.01 736.95 T
0 11 Q
-0.08 (The systems outlined in Chapter 2 tackle these problems in various ways. Some, such as Suite) 63.65 719.62 P
0 9 Q
-0.06 (,) 476.46 719.62 P
0 11 Q
-0.08 ( provide a range) 478.71 719.62 P
-0.29 (of options within the toolkit so that applications can vary in their selection of support strategies. Others, such as) 63.65 706.62 P
1.2 (SEPIA, provide various run-time \322modes\323 which embody different policies to match user needs. However,) 63.65 693.62 P
-0.24 (these various toolkits still suffer from serious restrictions, and are applicable only to a range of particular appli-) 63.65 680.62 P
2.63 (cations. The structures which the toolkits embody are not flexible enough to support the full range of) 63.65 667.62 P
-0.42 (collaborative applications which might be needed, nor the range of ways in which a particular application might) 63.65 654.62 P
-0.08 (be used. Any toolkit design embodies prior commitments to styles of application design, and hence to styles of) 63.65 641.62 P
-0.38 (working activity. The focus here, then, is on ways in which this comes about, and hence what can be done about) 63.65 628.62 P
(it.) 63.65 615.62 T
-0.08 (From the perspective of static flexibility, the typical approach is to limit the applicability of the toolkit to some) 63.65 595.62 P
-0.63 (particular range of applications or a particular style of interaction. From these sorts of commitments, we encoun-) 63.65 582.62 P
2.85 (ter the traditional distinctions between application and toolkit types: synchronous versus asynchronous,) 63.65 569.62 P
-0.11 (collaboration-aware versus collaboration-transparent, tightly-coupled versus loosely-coupled, and so on. How-) 63.65 556.62 P
0.06 (ever, as observational studies have highlighted, these are distinctions of use, rather than distinctions of design;) 63.65 543.62 P
(and so the toolkit is not the appropriate place to make such decisions.) 63.65 530.62 T
(From the perspective of dynamic flexibility, they tend to provide little support for changes in group) 63.65 510.62 T
0.44 (membership or working style since the structures and abstractions which they embody are fixed at within the) 63.65 497.62 P
-0.5 (toolkit or application. Where variability is available, it typically takes the form of interface tailoring, or tailoring) 63.65 484.62 P
(of other \322surface\323 features of the application \050Bentley and Dourish, 1995\051.) 63.65 471.62 T
0.16 (The issues which implementational flexibility addresses are also, typically, hidden from the view of the appli-) 63.65 451.62 P
0.94 (cations developer using these toolkits. Abstractions of shared objects, workspaces, telepointers, etc., are too) 63.65 438.62 P
(high-level to include or influence questions of, say, network topology.) 63.65 425.62 T
2 12 Q
(3.1.2  Flexibility and Abstraction) 63.65 401.95 T
0 11 Q
-0.04 (Toolkits offer a range of abstractions which can be arranged as needed for particular applications or situations.) 63.65 384.62 P
0.06 (The abstractions might include) 63.65 371.62 P
3 F
0.06 (components) 202.6 371.62 P
0 F
0.06 ( \050structural units which can be incorporated into programs or inter-) 255.15 371.62 P
0.02 (faces\051,) 63.65 358.62 P
3 F
0.02 (mechanisms) 95.43 358.62 P
0 F
0.02 ( \050procedures managing activities over these components\051 and) 149.2 358.62 P
3 F
0.02 (composition strategies) 421.27 358.62 P
0 F
0.02 ( \050ways) 520.61 358.62 P
1.65 (of combining components and mechanisms to form larger units\051. Tailorability facilities might allow us to) 63.65 345.62 P
3 F
0.02 (parameterise) 63.65 332.62 P
0 F
0.02 ( these abstractions, in order to capture some range of potential needs, by selecting from a number) 121.69 332.62 P
(of pre-defined settings.) 63.65 319.62 T
0.66 (However, parameterisation is only half the problem. The abstractions themselves remain fixed, impenetrable) 63.65 299.62 P
0.68 (and static, in contrast with the flexible and fluid nature of collaborative working activity. It is this mismatch) 63.65 286.62 P
-0.41 (between fixedness and fluidity which results in the problems of flexibility and appropriateness which have been) 63.65 273.62 P
-0.68 (noted; and this problem, the way that computational renditions of conceptual abstractions become static and life-) 63.65 260.62 P
0.99 (less, has been observed by a number of researchers studying CSCW \050e.g. Robinson, 1993; Suchman, 1994;) 63.65 247.62 P
(Button and Dourish, 1996\051.) 63.65 234.62 T
-0.44 (Abstraction and formalisation are at the very heart of computer science; we can\325t build systems without abstrac-) 63.65 214.62 P
0.8 (tions with which to build them. Our strategy here is not to throw away abstraction, but to re-examine it and) 63.65 201.62 P
(reconsider how we wish to use it in system design.) 63.65 188.62 T
2 14 Q
(3.2  Abstraction) 63.65 161.62 T
0 11 Q
-0.37 (Abstraction is one of the fundamental tools of computer science and system design. It is the means by which we) 63.65 139.62 P
-0.54 (can break down large problems into small ones and, conversely, can combine small solutions to create large sys-) 63.65 126.62 P
0.23 (tems. It allows us to isolate one part of a system from another and consider the two separately. It is the key to) 63.65 113.62 P
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation.) 325.66 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(37) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.17 (analysis, modularity and reuse; and it is also, potentially, the source of a range of problems throughout systems) 45.65 737.62 P
(design practice.) 45.65 724.62 T
-0.64 (The traditional form of abstraction in systems design relies on three principal components\321) 45.65 704.62 P
3 F
-0.64 (black boxes) 444.33 704.62 P
0 F
-0.64 (,) 495.32 704.62 P
3 F
-0.64 (clients) 500.18 704.62 P
0 F
-0.64 (,) 528.9 704.62 P
0.4 (and the) 45.65 691.62 P
3 F
0.4 (abstraction barrier) 81.26 691.62 P
0 F
0.4 (, as illustrated in figure 3.1. The black box implements some abstraction, which is) 166.3 691.62 P
-0.31 (offered to clients at an abstraction barrier. The abstraction barrier is a point of separation between the client and) 45.65 678.62 P
-0.46 (the implementation; the concepts, terms and structures in which the abstraction is phrased at the abstraction bar-) 45.65 665.62 P
-0.6 (rier are the only ones which clients can use to manipulate and control the abstraction. In programming languages) 45.65 652.62 P
0.54 (or systems, the abstraction barrier is often presented as an \322interface\323. However, I use the term \322abstraction\323) 45.65 639.62 P
-0.17 (here because the same abstraction principles apply to other situations where the \322interface\323 is less clearly artic-) 45.65 626.62 P
0.96 (ulated \050such as when manipulating graphical objects in an interactive user interface, or performing memory) 45.65 613.62 P
0.35 (references in a virtual memory system\051. Similarly, the term \322barrier\323 refers to the way in which this serves to) 45.65 600.62 P
-0.69 (hide aspects of the implementation from the client. Behind an abstraction barrier, the internal details of an imple-) 45.65 587.62 P
(mentation are not revealed.) 45.65 574.62 T
0.25 (There are two important features of abstraction being employed here. First,) 45.65 340.95 P
3 F
0.25 (separation) 381.64 340.95 P
0 F
0.25 ( divorces the use of the) 428.69 340.95 P
-0.27 (abstraction from the details of its implementation, allowing a client to use an abstraction without understanding) 45.65 327.95 P
1.05 (all the details which lie behind it. Second,) 45.65 314.95 P
3 F
1.05 (generalisation) 241.07 314.95 P
0 F
1.05 ( divorces the abstraction itself from any particular) 304.62 314.95 P
-0.22 (implementation, so that the implementation may be changed without changing the abstraction \050and hence with-) 45.65 301.95 P
-0.51 (out forcing changes in clients which code to the abstraction\051. By using separation and generalisation in this way,) 45.65 288.95 P
1.7 (systems can be modularised and their components reused. This model of abstraction runs through system) 45.65 275.95 P
-0.39 (design. Even the most basic elements of software systems, such as programming languages and instruction sets,) 45.65 262.95 P
(are built upon it.) 45.65 249.95 T
-0.65 (This notion of abstraction, as used in software development, is derived from the mathematical use of abstraction.) 45.65 229.95 P
-0.39 (However, software entities differ from mathematical entities. In software, the abstractions we offer are not truly) 45.65 216.95 P
-0.36 (\322abstract\323. Instead, they are the visible aspects of underlying implementations, and, clearly, the implementation) 45.65 203.95 P
-0.31 (constrains the way in which the abstraction behaves. While any \050correct\051 implementation of the abstraction will) 45.65 190.95 P
-0.24 (agree with the abstraction\325s specification, and hence operate in the \322same\323 way, different implementation strat-) 45.65 177.95 P
-0.02 (egies will result in different performance characteristics, memory usage patterns, and so on. I will use the term) 45.65 164.95 P
-0.08 (\322behaviour\323 to refer to the) 45.65 151.95 P
3 F
-0.08 (manifestation) 164.06 151.95 P
0 F
-0.08 ( of these properties\321that is, not just the semantics of the implementa-) 223.96 151.95 P
(tion, but also the details of its acceptable patterns of operation and performance.) 45.65 138.95 T
0.52 (Lists and arrays, for instance, are different implementations of a Collection abstraction. Although they might) 45.65 118.95 P
1.34 (share an interface, they exhibit different performance characteristics \050different behaviour\051. These particular) 45.65 105.95 P
-0.23 (examples happen to be so endemic to the problems we solve that we think of them as different abstractions; but) 45.65 92.95 P
45.65 87.95 531.65 744.95 C
76.03 357.29 501.26 570.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
211.03 406.29 355.03 451.29 R
0 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
N
211.03 460.29 355.03 460.29 2 L
3 H
N
211.03 507.95 355.03 552.95 R
7 X
V
0.5 H
0 X
N
232.34 474.49 229.03 462.95 225.72 474.49 229.03 474.49 4 Y
V
229.03 507.95 229.03 474.49 2 L
1 H
N
259.34 474.49 256.03 462.95 252.72 474.49 256.03 474.49 4 Y
V
256.03 507.95 256.03 474.49 2 L
N
340.34 474.49 337.03 462.95 333.72 474.49 337.03 474.49 4 Y
V
337.03 507.95 337.03 474.49 2 L
N
306.72 496.42 310.03 507.95 313.34 496.42 310.03 496.42 4 Y
V
310.03 462.95 310.03 496.42 2 L
N
279.72 496.42 283.03 507.95 286.34 496.42 283.03 496.42 4 Y
V
283.03 462.95 283.03 496.42 2 L
N
238.03 417.95 328.03 435.95 R
7 X
V
0 X
N
76.03 365.45 499.03 390.95 R
7 X
V
0 11 Q
0 X
1 (FIGURE 3.1: A traditional black box abstration locks implementation details away behind an) 76.03 383.62 P
(abstraction barrier.) 76.03 370.62 T
(Client) 400.14 534.95 T
(\322Black box\323 abstraction) 393.33 428.45 T
(Abstraction \322barrier\323) 391.03 474.34 T
288.81 440.9 296.81 431.95 285.29 435.3 287.05 438.1 4 Y
V
247.03 426.95 M
 252.76 422.44 279.85 442.18 257.86 417.95 D
 262.33 422.88 284.65 439.27 288.4 417.95 D
 290.43 406.37 279.83 444.41 283.44 417.95 D
 283.03 420.95 283.03 450.95 285.31 426.95 D
 288.16 396.9 309.44 447.2 300.18 426.95 D
 289.26 403.06 267.26 434.61 258.48 437.98 D
 281.76 429.05 304.76 421.56 328.03 415.34 D
 337.12 412.91 312.62 415.05 315.15 416.83 D
 295.76 403.16 309.5 428.46 310.41 435.95 D
 305.58 396.09 276.6 457.84 274.81 426.95 D
 274.33 418.59 265.24 432.51 256.82 436.85 D
 241.59 444.68 266.65 411.32 252.44 435.95 D
 259.47 423.78 281.82 426.39 283.03 426.79 D
 264.98 420.78 292.77 409.7 296.27 422.78 D
 300.2 437.47 303.34 410.09 290.42 426.95 D
 290.43 426.95 272.37 426.96 254.32 427.37 D
 244.31 427.6 251.53 409.73 247.24 417.95 D
 251.75 409.31 245.92 433.06 259.32 433.18 D
 274.03 433.32 283 404.25 299.21 425.28 D
 305.17 433.02 305.9 417.01 312.65 416.18 D
 319.66 415.31 323.19 425.46 320.38 430.28 D
 310.98 446.45 312.19 424.76 311.68 425.28 D
 292.36 444.85 273.19 434.68 278.12 423.62 D
 267.53 447.34 219.66 420.13 245.98 422.16 D
 258.62 423.14 336.13 432.9 283.03 446.93 D
 245.46 456.87 265.73 405.49 277.72 417.95 D
 283.67 424.14 278.83 440.27 287.05 438.1 D
N
369.37 532.75 357.64 535.29 368.93 539.35 369.15 536.05 4 Y
V
395.15 537.79 369.16 536.05 2 L
0.5 H
N
364.62 463.55 352.65 462.79 362.4 469.78 363.51 466.66 4 Y
V
387.65 475.28 363.51 466.66 2 L
N
369.4 424.54 357.65 426.95 368.9 431.13 369.15 427.84 4 Y
V
390.15 429.45 369.15 427.84 2 L
N
45.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(38) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.61 (the differences in their behaviour are) 63.65 737.62 P
3 F
0.61 (not expressed) 232.24 737.62 P
0 F
0.61 ( in the abstraction. This variability is something we often) 293.03 737.62 P
0.67 (depend upon in implementation; for instance, caching in memory systems and memoisation in programming) 63.65 724.62 P
-0.06 (language implementation are both techniques which) 63.65 711.62 P
3 F
-0.06 (change) 295.48 711.62 P
0 F
-0.06 ( performance characteristics while maintaining the) 327.25 711.62 P
3 F
(original) 63.65 698.62 T
0 F
( abstraction.) 99.1 698.62 T
0.02 (This same variability, though, can also introduce significant problems. To illustrate these problems, consider a) 63.65 678.62 P
0.11 (situation opposite to that described above\321rather than one client and multiple possible implementations, con-) 63.65 665.62 P
1.99 (sider a single implementation and multiple clients. This is a common arrangement\321an operating system) 63.65 652.62 P
0.64 (supporting a text editor, an email reader and a database, or a window system supporting a word processor, a) 63.65 639.62 P
1.39 (spreadsheet and a game. The clients all make use of the same implementation, accessed through the same) 63.65 626.62 P
-0.23 (abstraction, in service of whatever functionality they themselves provide to their own clients. However, the cli-) 63.65 613.62 P
-0.27 (ents have different needs and requirements. Imagine the problems which would arise if there were only a single) 63.65 600.62 P
0.69 (implementation of a Collection class. Some clients would need array-style behaviour; some would need list-) 63.65 587.62 P
0.03 (style behaviour; some might want hash-table behaviour. In fact, the more clients there are, the more likely it is) 63.65 574.62 P
0.14 (that there are going to be conflicts in their requirements for the behaviour of the implementation. However, as) 63.65 561.62 P
-0.38 (observed above, the abstraction does not express the difference in behaviour. In fact, those aspects of the imple-) 63.65 548.62 P
1.63 (mentation which would cause a programmer to choose one over another are systematically hidden by the) 63.65 535.62 P
(abstraction barrier.) 63.65 522.62 T
-0.16 (In this case, it\325s not the particular abstraction itself which is at fault. The simple specification of the abstraction) 63.65 502.62 P
0.17 (\050the Collection abstraction, defined in terms of addition or removal of elements, lookup and searching\051 can be) 63.65 489.62 P
-0.17 (used effectively by all the clients. The problem is, first, in the fact that the \322abstraction\323 isn\325t abstract at all, but) 63.65 476.62 P
-0.24 (is the interface to an implementation; and second, in the way in which a single implementation must serve mul-) 63.65 463.62 P
(tiple purposes. But this isn\325t some unusual special case; it\325s simply everyday reuse.) 63.65 450.62 T
2 12 Q
(3.2.1  Mapping Dilemmas) 63.65 426.95 T
0 11 Q
0.68 (The root of these problems can be explained in terms of mapping decisions, mapping conflicts and mapping) 63.65 409.62 P
-0.25 (dilemmas \050Kiczales and Paepcke, forthcoming\051) 63.65 396.62 P
0 8.8 Q
-0.2 (1) 271.29 401.02 P
0 11 Q
-0.25 (. A mapping) 275.69 396.62 P
3 F
-0.25 (decision) 332.37 396.62 P
0 F
-0.25 ( occurs at any point where the implemen-) 369.03 396.62 P
0.97 (tor of an abstraction has to choose between a number of possible strategies for implementing some internal) 63.65 383.62 P
0.83 (mechanism \050that is, for mapping some aspect of the high-level abstraction onto the lower-level structures to) 63.65 370.62 P
-0.15 (which the implementation has access\051. A mapping) 63.65 357.62 P
3 F
-0.15 (conflict) 286.87 357.62 P
0 F
-0.15 ( occurs when some the implementor makes the deci-) 319.87 357.62 P
1.1 (sion one way, but the needs of a client would be better met if the decision had been made another way. A) 63.65 344.62 P
-0.68 (mapping) 63.65 331.62 P
3 F
-0.68 (dilemma) 104.22 331.62 P
0 F
-0.68 ( occurs when two clients of the same implementation require different mapping choices; what-) 142.1 331.62 P
(ever choice is made, a mapping conflict results.) 63.65 318.62 T
0.05 (Mapping decisions are orthogonal to the abstraction. They arise not from the structure of the abstraction itself,) 63.65 298.62 P
-0.34 (but from the way in which it is implemented. Thus, since mapping decisions are not part of the abstraction, they) 63.65 285.62 P
0.52 (are not visible through the abstraction barrier. While it\325s clear that the incidence of mapping conflicts can be) 63.65 272.62 P
0.1 (exacerbated by poor mapping decisions, it\325s important to recognise that the problems of mapping dilemmas in) 63.65 259.62 P
-0.34 (general are not the result of particular implementations or abstractions, but are) 63.65 246.62 P
3 F
-0.34 (inherent in the model of abstrac-) 406.85 246.62 P
63.65 120.95 549.65 141.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 128.94 195.62 128.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.07 (1.  Although retaining Kiczales and Paepcke\325) 63.65 114.95 P
-0.07 (s terminology) 225.93 114.95 P
-0.07 (, I have rede\336ned the terms somewhat. My breakdown is true to the spirit of) 275.03 114.95 P
(their) 63.65 104.95 T
(\325) 80.48 104.95 T
(s, but not the letter) 82.98 104.95 T
(. My terminology refers to points in the design process, while Kiczales and Paepcke\325) 149.73 104.95 T
(s refers more to the out-) 454.44 104.95 T
(come.) 63.65 94.95 T
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation.) 325.66 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(39) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
3 11 Q
0 X
0.23 (tion itself) 45.65 737.62 P
0 F
0.23 (. As such, software developers encounter them every day, and employ a number of strategies to deal) 87.14 737.62 P
(with them.) 45.65 724.62 T
2 F
(3.2.1.1  Hematomas) 45.65 528.45 T
0 F
-0.55 (Two common strategies are identified by Kiczales \0501992\051 as \322code hematomas\323 and \322coding between the lines\323.) 45.65 511.45 P
-0.55 (The hematoma strategy involves the duplication of some piece of abstraction functionality) 45.65 498.45 P
3 F
-0.55 (above) 439.27 498.45 P
0 F
-0.55 ( the abstraction) 465.54 498.45 P
(barrier, embodying a different set of mapping decisions \050see figure 3.2a\051.) 45.65 485.45 T
0.08 (Consider the example \050used by Kiczales, derived from Rao \0501991\051\051 of a spreadsheet application written over a) 45.65 465.45 P
-0.09 (window system. The window system offers a set of abstractions such as window, font, menu, and so on. At the) 45.65 452.45 P
0.34 (level of offered abstractions, the cells of the spreadsheet \050rectangular areas of screen space which can display) 45.65 439.45 P
-0.11 (text and respond to mouse and keyboard input\051 seem very like the windows of the window system \050rectangular) 45.65 426.45 P
0.15 (areas of screen space which can display text and respond to mouse and keyboard input\051. So, since the abstrac-) 45.65 413.45 P
(tions match, why not create one million windows to act as the cells for a 1000 by 1000 cell spreadsheet?) 45.65 400.45 T
-0.45 (However, in conventional window systems, an attempt to use windows as cells are unlikely to succeed. The rea-) 45.65 380.45 P
1.29 (sons for this sort of failure\321either an explicit breakdown or a performance failure\321are implementational,) 45.65 367.45 P
0.2 (arising from such issues as a limit on the number of windows, structure traversal, memory usage and so forth.) 45.65 354.45 P
-0.29 (The implementational details \050how mapping decisions concerning windows have been resolved\051 have a consid-) 45.65 341.45 P
0.31 (erable effect on the ways in which the \322window\323 abstraction can be used. They are not part of the abstraction) 45.65 328.45 P
0.11 (itself, though, and so the abstraction itself offers no information about why this use of it fails \050and similarly, it) 45.65 315.45 P
-0.09 (offers no prior warning\051. As system designers, familiar with the ways in which window systems work, we may) 45.65 302.45 P
-0.17 (recognise the resultant behaviours and the mapping dilemmas which cause them; but this is information extrin-) 45.65 289.45 P
(sic to the abstraction itself. We may intuit it, but we cannot perceive it by looking at the offered abstraction.) 45.65 276.45 T
0.37 (The hematoma strategy involves reimplementing some amount of the window system functionality above the) 45.65 256.45 P
-0.2 (window system abstraction, and coding the application to) 45.65 243.45 P
3 F
-0.2 (that) 299.76 243.45 P
0 F
-0.2 ( version of the abstraction. In this case, the appli-) 316.87 243.45 P
1.4 (cation developer might write a library of routines to manipulate spreadsheet cells within a single window,) 45.65 230.45 P
0.18 (making different mapping decisions to exploit known properties of the application \050e.g. that cells are of a uni-) 45.65 217.45 P
-0.4 (form fixed size, that they are tiled, etc.\051. This library is the \322hematoma\323. It is quite likely that the hematoma will) 45.65 204.45 P
0.28 (reproduce a lot of code and functionality which exists in the implementation below; there may only be one or) 45.65 191.45 P
0.83 (two mapping decisions to be resolved in a new way to suit this application. Typically, though, considerably) 45.65 178.45 P
(more code \050or functionality\051 will have to be reproduced than changed.) 45.65 165.45 T
2 F
(3.2.1.2  Coding Between the Lines) 45.65 138.45 T
0 F
1.96 (The second strategy, \322coding between the lines\323, is another common solution to abstraction problems. It) 45.65 121.45 P
0.43 (involves writing the client code in particular ways so as to avoid expected problems with the implementation) 45.65 108.45 P
-0.64 (underlying the abstraction. This strategy relies on the client programmer having some understanding of the map-) 45.65 95.45 P
45.65 87.95 531.65 744.95 C
76.03 551.79 501.26 720.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
76.03 560.79 499.03 579.95 R
7 X
0 0 0 1 0 0 0 K
V
0 11 Q
0 X
(FIGURE 3.2: Two common solution strategies\321\322hematomas\323 and \322coding between the lines\323.) 76.03 572.62 T
121.03 614.34 247.03 650.34 R
7 X
V
0.5 H
2 Z
0 X
N
121.03 659.34 247.03 659.34 2 L
3 H
N
0.5 H
90 180 27.72 18 211.75 659.34 A
0 90 27.72 18 211.03 659.34 A
202.03 668.34 229.03 668.34 2 L
N
192.43 664.89 222.98 664.89 2 L
N
197.43 672.12 215.76 672.12 2 L
N
216.87 669.89 227.98 669.89 2 L
N
130.76 698.23 230.76 698.23 2 L
N
125.76 693.23 186.32 693.23 2 L
N
144.09 688.23 215.76 688.23 2 L
N
139.65 679.34 189.09 679.34 2 L
N
130.2 672.12 162.43 672.12 2 L
N
183.54 682.12 242.43 682.67 2 L
N
(\050a\051) 177.15 600.17 T
319.03 614.34 445.03 650.34 R
7 X
V
0 X
N
319.03 659.34 445.03 659.34 2 L
3 H
N
328.76 698.23 428.76 698.23 2 L
0.5 H
N
323.76 693.23 384.32 693.23 2 L
N
342.09 688.23 413.76 688.23 2 L
N
337.65 679.34 436.54 679.34 2 L
N
328.2 672.12 435.98 672.12 2 L
N
380.98 682.67 440.43 682.67 2 L
N
(\050b\051) 375.15 600.17 T
321.54 664.67 360.33 671.26 393.86 665.41 432.65 680.78 4 L
N
322.1 688.01 340.43 690.23 343.76 684.12 362.1 684.12 398.21 686.34 432.1 684.12 437.65 689.67 7 L
N
355.98 689.51 383.58 692.45 398.15 682.66 423.45 690.49 425.75 671.9 432.65 677.77 6 L
N
330.98 691.34 345.09 666.34 370.04 676.63 381.97 667.81 397.16 669.28 399.87 675.16 6 L
N
400.43 682.12 415.67 696.34 427.1 678.56 3 L
N
347.65 695.78 384.32 673.56 391.54 681.34 412.1 676.9 418.76 666.34 5 L
N
45.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(40) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.11 (ping decisions and mapping choices made by the implementor of the abstraction. Such an understanding might) 63.65 737.62 P
-0.46 (come from direct experience, or simply from known common practice; but, again, the information is not offered) 63.65 724.62 P
0.38 (in the abstraction itself. At the same time, since the code is being fashioned to fit a set of unexpressed lower-) 63.65 711.62 P
0.36 (level concerns, the resultant structures are often obscure, convoluted and non-intuitive in terms of the desired) 63.65 698.62 P
(behaviour at the module\325s level of abstraction.) 63.65 685.62 T
-0.49 (A frequently-occurring, familiar example of this strategy involves the artful use of virtual memory. The abstrac-) 63.65 665.62 P
-0.57 (tion offered by a canonical virtual memory implementation is simple enough, and very familiar to programmers.) 63.65 652.62 P
0.32 (However, the breakdown of this abstraction and the resultant performance problems are equally familiar. It is) 63.65 639.62 P
-0.27 (seen in a range of cases, such as database or graphics systems, which exhibit poor locality of reference. In these) 63.65 626.62 P
-0.39 (cases, the common solution strategy is to find patterns of memory allocation and traversal which improve local-) 63.65 613.62 P
2.54 (ity and hence perform well over typical \050and, again, well-understood\051 virtual memory implementations.) 63.65 600.62 P
-0.67 (Unfortunately one consequence of this common strategy is to make the application code more complex to under-) 63.65 587.62 P
-0.05 (stand. There are now two elements mixed in together \050the application code, and the stylised strategy to make it) 63.65 574.62 P
-0.27 (work efficiently\051. This \322obscuring\323 problem is inherent in the \322coding between the lines\323 strategy since there is) 63.65 561.62 P
-0.1 (no clean separation the two aspects of the implementation. As well as making the code more difficult to under-) 63.65 548.62 P
0.52 (stand and maintain, it also makes it considerably more difficult to port, since the two aspects of the system\325s) 63.65 535.62 P
1.96 (design\321how the system itself operates, and how it is mapped onto underlying structures\321are mixed up) 63.65 522.62 P
(together.) 63.65 509.62 T
2 12 Q
(3.2.2  Gaining Control over Abstractions) 63.65 485.95 T
0 11 Q
-0.21 (For their part, the implementors of the abstractions can also use a number of strategies to lessen these problems) 63.65 468.62 P
-0.53 (for their users \050the implementors of the clients\051. As systems have become larger and more complex, and as hard-) 63.65 455.62 P
1.71 (ware has improved and exposed more performance problems in software, strategies for overcoming these) 63.65 442.62 P
-0.08 (abstraction problems have become more common. One typical solution is to offer a number of different imple-) 63.65 429.62 P
1.3 (mentations to choose from \050compiler optimisation strategies often operate this way\051. Another is to provide) 63.65 416.62 P
1.07 (switches which allow application to select particular strategies. For instance, the UNIX system call) 63.65 403.62 P
3 F
1.07 (vadvise) 516.66 403.62 P
0 F
0.24 (allows application programmers to specify the style of memory access particular memory regions will experi-) 63.65 390.62 P
(ence) 63.65 377.62 T
3 F
(,) 83.8 377.62 T
0 F
(so that an effective paging strategy can be employed) 89.3 377.62 T
3 F
(.) 320.24 377.62 T
0 F
0.02 (Recently, more radical solutions have been adopted, in various areas of system design. For example, a number) 63.65 357.62 P
-0.16 (of areas of operating systems design have been a focus of attention. The Mach operating system provides facil-) 63.65 344.62 P
1.31 (ities for virtual memory behaviour to be controlled directly by application programs\321the \322external pager\323) 63.65 331.62 P
0.06 (\050Rashid et al., 1987\051. Scheduler activations \050Anderson et al., 1992\051 allow application control over thread facil-) 63.65 318.62 P
-0.5 (ities, addressing the design trade-offs involved in locating thread information and control in user space or kernel) 63.65 305.62 P
-0.16 (space. Cao et al. \0501994\051 have explored application control over filesystem cache policies. More generally, flex-) 63.65 292.62 P
3.35 (ible object-oriented operating systems such as Spring \050Hamilton and Kougiouris, 1993\051 have allowed) 63.65 279.62 P
-0.04 (applications \050or user-space code\051 a great deal of control over the implementation details of \322lower-level\323 oper-) 63.65 266.62 P
(ating system abstractions \050Khalidi and Nelson, 1993; Nelson et al., 1993\051.) 63.65 253.62 T
-0.55 (Similar forces have resulted in the provision of greater client-specific flexibility in network communication pro-) 63.65 233.62 P
-0.23 (tocols; the) 63.65 220.62 P
3 F
-0.23 (x) 111.46 220.62 P
0 F
-0.23 (-kernel supports composable micro-protocols which applications combine to produce lean protocol) 116.34 220.62 P
-0.12 (stacks incorporating just the particular features they need at a given time \050O\325Malley and Peterson, 1992; Bhatti) 63.65 207.62 P
0.24 (and Schlichting, 1995\051. Similarly, responding to the call of Clark and Tennenhouse \0501992\051, other groups have) 63.65 194.62 P
0.4 (investigated ways in which application needs can be used to control protocol implementation \050e.g. Braun and) 63.65 181.62 P
(Diot, 1995\051.) 63.65 168.62 T
2 14 Q
(3.3  Open Implementation) 63.65 141.62 T
0 11 Q
-0.37 (The sudden appearance of all these techniques in different areas suggests some fundamental, common problem.) 63.65 119.62 P
3 F
-0.45 (Open Implementation) 63.65 106.62 P
0 F
-0.45 ( is a relatively new approach to tackling the issues which they raise, looking directly at the) 158.82 106.62 P
-0.07 (way they originate in the differences between mathematical and software abstractions. Originally developed in) 63.65 93.62 P
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation.) 325.66 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(41) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.27 (the area of programming language design and implementation, it has come to be applied to a number of other) 45.65 737.62 P
-0.62 (areas of system design, and provides a route to solving the problems of expression and flexibility raised in Chap-) 45.65 724.62 P
2.39 (ter 2. Essentially, Open Implementation is an approach to computational architecture which \322opens up\323) 45.65 711.62 P
0.28 (abstractions and provides clients with principled access to examine and control aspects of the implementation) 45.65 698.62 P
(behind the abstraction barrier.) 45.65 685.62 T
-0.59 (Probably the most important foundational principle behind the Open Implementation approach is) 45.65 665.62 P
3 F
-0.59 (computational) 468.09 665.62 P
0.1 (reflection) 45.65 652.62 P
0 F
0.1 ( \050Smith, 1982\051. The reflection principle states that a system can embody a) 87.81 652.62 P
3 F
0.1 (causally-connected repre-) 416.38 652.62 P
0.09 (sentation) 45.65 639.62 P
0 F
0.09 ( of its own behaviour, amenable to examination and change from within the system itself. The causal) 85.99 639.62 P
-0.12 (connection sets up a two-way relationship between the representation and the behaviour it describes; the repre-) 45.65 626.62 P
0.26 (sentation is continually maintained in correspondence with the system\325s behaviour, and the behaviour itself is) 45.65 613.62 P
0.67 (controlled through manipulation of the representation. So, a reflective system can examine the model \050) 45.65 600.62 P
3 F
0.67 (intro-) 506.59 600.62 P
1.22 (spection) 45.65 587.62 P
0 F
1.22 (\051 to reason about its own behaviour; and it can make changes to the model \050) 82.31 587.62 P
3 F
1.22 (intercession) 433.29 587.62 P
0 F
1.22 (\051 to effect) 486.45 587.62 P
-0.39 (changes in its behaviour. The causally-connected self-representation creates a link between two \322levels\323 of pro-) 45.65 574.62 P
-0.33 (cessing\321the \322base\323 level, which is the traditional domain of computation for any given system, and the \322meta\323) 45.65 561.62 P
-0.13 (level where the domain of computation is the system itself. Reflective models are clearly a route towards Open) 45.65 548.62 P
(Implementations; however, reflection was originally developed outside this framework.) 45.65 535.62 T
2 12 Q
(3.3.1  3-Lisp and the In\336nite T) 45.65 511.95 T
(ower) 203.08 511.95 T
0 11 Q
0.17 (The first system to be designed along these lines was 3-Lisp \050Smith, 1984\051, a semantically rationalised dialect) 45.65 494.62 P
-0.31 (of Lisp. The reflective link in 3-Lisp was achieved by defining, as part of the language itself, the means for pro-) 45.65 481.62 P
0.46 (grams to gain access to the data structures of their interpreters. Since the 3-Lisp interpreter is meta-circularly) 45.65 468.62 P
-0.54 (defined in terms of 3-Lisp, the 3-Lisp interpreter is, itself, a 3-Lisp program, and so must have access to an inter-) 45.65 455.62 P
1.19 (preter of its own, and so on. This sets up an \322infinite tower of reflective processors\323, each interpreting the) 45.65 442.62 P
0.56 (program at the level below \050generally another 3-Lisp interpreter, except at the base of the tower\051 and, hence,) 45.65 429.62 P
(each potentially accessible through the reflective facilities in the program at the level below it.) 45.65 416.62 T
-0.37 (The infinite recursion of this conceptual model was discharged in the implementation of the) 45.65 396.62 P
3 F
-0.37 (level-shifting inter-) 447.39 396.62 P
0.43 (preter) 45.65 383.62 P
0 F
0.43 ( \050des Rivi\217res and Smith, 1984\051 which extends traditional interpretation mechanisms with the ability to) 72.53 383.62 P
-0.14 (create the data structures of interpreting programs lazily, if needed. Base-level \050traditional\051 processing requires) 45.65 370.62 P
-0.27 (just standard interpretation structures, allowing a 3-Lisp program for some application domain to compute over) 45.65 357.62 P
-0 (representations of base-level concepts, so that, for example, a statistics program might compute over represen-) 45.65 344.62 P
1.28 (tations of data points, distributions and standard deviations, while a graphics program might compute over) 45.65 331.62 P
0.4 (graphical points, polygons and filling patterns. Meta-level processing, or computation over representations of) 45.65 318.62 P
-0.56 (the program itself and its execution, might involve questions like \322where was this procedure invoked?\323, or \322how) 45.65 305.62 P
-0.35 (is this variable bound?\323, and employ\325s 3-Lisp reflective mechanisms to provide access to the lazily-created rep-) 45.65 292.62 P
(resentation of interpreter structures.) 45.65 279.62 T
-0.54 (While 3-Lisp provided an early demonstration of the concepts behind reflection, and spawned a number of other) 45.65 259.62 P
0.37 (systems which embodied many of the same principles \050e.g. 3-KRS \050Maes, 1987\051, a knowledge representation) 45.65 246.62 P
1.6 (language, and Brown \050Friedman and Wand, 1984\051, a reflective extension of Scheme\051, reflection remained) 45.65 233.62 P
0.37 (largely an area of fairly abstract research investigation. It was not until they were applied in the design of the) 45.65 220.62 P
-0.01 (Common Lisp Object System \050CLOS\051 that the ideas behind it began to find their way into wider programming) 45.65 207.62 P
(practice.) 45.65 194.62 T
2 12 Q
(3.3.2  CLOS and the Metaobject Protocol) 45.65 170.95 T
0 11 Q
-0.43 (The Common Lisp Object System \050CLOS\051 was an extension to the original Common Lisp design \050Steele, 1984\051) 45.65 153.62 P
-0.65 (and is a part of the later ANSI Common Lisp standard, defining an object model which extends Lisp\325s traditional) 45.65 140.62 P
0.4 (functional style. At the base level, it is a powerful object programming language, based on generic functions,) 45.65 127.62 P
-0.17 (multi-methods and powerful method combination facilities) 45.65 114.62 P
0 8.8 Q
-0.14 (2) 304.21 119.02 P
0 11 Q
-0.17 (. In addition, CLOS is a reflective language; it pro-) 308.61 114.62 P
-0.31 (vides mechanisms by which programmers can reach into the implementation, examining internal structures and) 45.65 101.62 P
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(42) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.46 (making changes to the object system\325s behaviour. By reaching into the language\325s implementation, program-) 63.65 480.94 P
0.43 (mers can tailor its elements to particular application domains or hardware platforms, or create language-level) 63.65 467.94 P
(extensions.) 63.65 454.94 T
0.44 (The means by which this reflective access is made available differs from the \322tower of reflective processors\323) 63.65 434.94 P
0.49 (used in 3-Lisp. In CLOS, the reflective mechanism is the) 63.65 421.94 P
3 F
0.49 (metaobject protocol) 322.15 421.94 P
0 F
0.49 ( \050MOP\051 \050Kiczales et al., 1991\051.) 410.94 421.94 P
-0.45 (Essentially, the MOP is an explicit self-representation cast in object-oriented terms. The MOP defines the struc-) 63.65 408.94 P
-0.31 (tures of the object system implementation as) 63.65 395.94 P
3 F
-0.31 (metaobjects) 260.37 395.94 P
0 F
-0.31 (, which represent the objects out of which CLOS itself) 312.92 395.94 P
1.12 (is built\321representations of classes, objects, generic functions, methods and so on. Generic function calling) 63.65 382.94 P
-0.33 (sequences, defined for these metaobjects, capture the behaviours in which the object system engages in the pro-) 63.65 369.94 P
0.11 (cess of its execution. So, internal CLOS actions\321such as allocating space for an object\325s slots, computing the) 63.65 356.94 P
0.4 (class precedence list, or looking up slot values\321are defined in terms of method invocation over metaobjects.) 63.65 343.94 P
-0.27 (The metaobject representation is accessible from within CLOS programs, just as the representations of applica-) 63.65 330.94 P
0.71 (tion program structures would be. So, CLOS has an internal representation defined in CLOS, and accessible) 63.65 317.94 P
(throughout the system in terms of CLOS structures and functionality.) 63.65 304.94 T
0.71 (Just as the meta-level representation in CLOS is an object-oriented representation, so the means of effecting) 63.65 284.94 P
1.89 (modifications proceeds through object-oriented mechanisms such as subclassing and specialisation. Meta-) 63.65 271.94 P
0.55 (classes\321classes whose instances are themselves classes\321are classes, and so are subject to the same form of) 63.65 258.94 P
0.3 (manipulations as normal classes. A programmer might make a subclass of the standard metaclass,) 63.65 245.94 P
6 9 Q
0.59 (standard-) 501.05 245.94 P
0.3 (class) 63.65 232.94 P
0 11 Q
0.15 (; call it) 90.65 232.94 P
6 9 Q
0.3 (non-standard-class) 124.41 232.94 P
0 11 Q
0.15 (\050figure 3.3\051. By default,) 227.3 232.94 P
6 9 Q
0.3 (non-standard-class) 335.14 232.94 P
0 11 Q
0.15 ( inherits all the behaviours) 432.33 232.94 P
0 (of its parent,) 63.65 219.94 P
6 9 Q
0.01 (standard-class) 121.71 219.94 P
0 11 Q
0 (, and so instances of) 197.31 219.94 P
6 9 Q
0.01 (non-standard-class) 288.98 219.94 P
0 11 Q
0 ( will behave as normal classes. How-) 386.18 219.94 P
-0.31 (ever, the programmer can now define new methods which apply to instances of) 63.65 206.94 P
6 9 Q
-0.61 (non-standard-class) 411.52 206.94 P
0 11 Q
-0.31 ( \050i.e. they) 508.72 206.94 P
63.65 170.95 549.65 191.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 178.94 195.62 178.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(2.  Generic functions \050Bobrow et al., 1986\051 are a means to combine the functional style of Lisp with the message-passing style of) 63.65 164.95 T
(object-oriented programming. Roughly) 63.65 154.95 T
(, generic functions play the same role as messages in traditional OO languages, naming behav-) 204.3 154.95 T
(iours for invocation on particular objects; however) 63.65 144.95 T
(, they exist as functional objects, and, syntactically) 245.75 144.95 T
(, are \322applied\323 to objects rather) 428.15 144.95 T
-0.01 (than \322sent\323 to them. Multi-methods are methods which dispatch on more than one object; any or all of the ar) 63.65 134.95 P
-0.01 (guments to a generic func-) 453.72 134.95 P
-0.19 (tion can be used to \336nd a method to apply) 63.65 124.95 P
-0.19 (, rather than a single, distinguished object \050as in, say) 212.05 124.95 P
-0.19 (, Smalltalk\051. Finally) 398.2 124.95 P
-0.19 (, method combination) 469.23 124.95 P
-0.13 (allows a number of dif) 63.65 114.95 P
-0.13 (ferent methods to be associated with a generic function invocation, and de\336nes the ways in which methods don\325) 144.45 114.95 P
-0.13 (t) 545.03 114.95 P
(simply override each other) 63.65 104.95 T
(, but may) 159.52 104.95 T
(, in particular circumstances, be combined and dispatched in sequence in response to a single) 192.68 104.95 T
(generic function call.) 63.65 94.95 T
63.65 87.95 549.65 744.95 C
94.03 488.27 519.26 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
194.03 704.29 284.03 731.29 R
7 X
0 0 0 1 0 0 0 K
V
1 H
2 Z
0 X
N
194.03 650.29 284.03 677.29 R
7 X
V
0 X
N
317.86 608.29 407.86 635.29 R
7 X
V
0 X
N
317.86 662.29 407.86 689.29 R
7 X
V
0 X
N
7 X
90 450 45 13.5 239.03 609.79 G
0 X
90 450 45 13.5 239.03 609.79 A
7 X
90 450 45 13.5 362.86 567.79 G
0 X
90 450 45 13.5 362.86 567.79 A
235.73 638.75 239.03 650.29 242.34 638.75 239.03 638.75 4 Y
V
239.03 623.29 239.03 638.75 2 L
N
359.56 596.75 362.86 608.29 366.17 596.75 362.86 596.75 4 Y
V
362.86 581.29 362.86 596.75 2 L
N
359.56 650.75 362.86 662.29 366.17 650.75 362.86 650.75 4 Y
V
362.86 635.29 362.86 650.75 2 L
N
235.73 692.75 239.03 704.29 242.34 692.75 239.03 692.75 4 Y
V
239.03 677.29 239.03 692.75 2 L
N
J
291.25 700.24 283.14 719.62 300.28 707.48 295.77 703.86 4 Y
V
J
317.86 676.29 295.77 703.86 2 L
J
317.86 676.29 316.3 678.24 2 L
3 H
N
[4.1 7.379] 4.1 I
316.3 678.24 297.33 701.91 2 L
N
J
297.33 701.91 295.77 703.86 2 L
N
J
145.33 573.93 156.87 570.62 145.33 567.31 145.33 570.62 4 Y
V
120.86 570.62 145.33 570.62 2 L
1 H
N
J
145.33 554.26 156.87 550.95 145.33 547.65 145.33 550.95 4 Y
V
J
120.86 550.95 145.33 550.95 2 L
J
120.86 550.95 124.61 550.95 2 L
0.5 H
N
[6.207 5.379] 6.207 I
124.61 550.95 141.58 550.95 2 L
N
J
141.58 550.95 145.33 550.95 2 L
N
203.03 709.29 279.86 722.29 R
7 X
V
6 9 Q
0 X
(standard-class) 203.03 716.29 T
J
322.86 667.12 401.2 685.95 R
7 X
V
0 X
(non-standard-) 326.93 679.95 T
(class) 348.53 667.95 T
J
208.2 659.29 273.2 668.29 R
7 X
V
0 X
(foo-class) 216.4 662.29 T
J
203.03 605.29 275.03 614.29 R
7 X
V
0 X
(instance foo) 206.63 608.29 T
J
332.03 617.29 397.87 626.29 R
7 X
V
0 X
(bar-class) 340.65 620.29 T
J
326.86 563.29 398.86 572.29 R
7 X
V
0 X
(instance bar) 330.46 566.29 T
J
J
425.86 662.29 507.03 689.29 13.5 RR
7 X
V
1 H
0 X
N
437.36 668.12 498.86 681.95 R
7 X
V
0 11 Q
0 X
(new methods) 437.36 674.62 T
102.2 705.12 183.36 732.12 13.5 RR
7 X
V
0 X
N
109.53 710.95 179.36 724.79 R
7 X
V
0 X
(CLOS methods) 109.53 717.45 T
(Instance relationship) 166.7 569.01 T
(Subclass relationship) 166.7 548.62 T
184.15 719.45 192.15 719.45 2 L
4 H
3 X
N
408.65 676.62 425.15 676.95 2 L
N
94.82 496.28 519.82 525.45 R
7 X
V
0 X
1.06 (FIGURE 3.3: Instance) 94.82 518.12 P
6 9 Q
2.09 (bar) 199.43 518.12 P
0 11 Q
1.06 ( behaves differently from instance) 215.63 518.12 P
6 9 Q
2.09 (foo) 373.98 518.12 P
0 11 Q
1.06 ( because aspects of the class) 390.18 518.12 P
(behaviour have been changed by the programmer through the metaclass of) 94.82 505.12 T
6 9 Q
(bar-class) 425.65 505.12 T
0 11 Q
(.) 474.25 505.12 T
63.65 87.95 549.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation.) 325.66 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(43) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.17 (are \322specialised on\323) 45.65 737.62 P
6 9 Q
0.33 (non-standard-class) 136.88 737.62 P
0 11 Q
0.17 (\051. Just as methods defined on a subclass of \322rectangle\323 can produce) 234.07 737.62 P
0.07 (rectangles which respond to the same protocol but behave differently, methods defined on a subclass of) 45.65 724.62 P
6 9 Q
0.13 (stan-) 504.65 724.62 P
2.88 (dard-class) 45.65 711.62 P
0 11 Q
1.46 ( can produce classes which respond to the same protocol but behave differently. The methods) 99.65 711.62 P
-0.32 (defined on) 45.65 698.62 P
6 9 Q
-0.63 (standard-class) 94.5 698.62 P
0 11 Q
-0.32 ( are those which implement the behaviour of the object system. So, if new methods) 170.1 698.62 P
0.25 (are defined to override them, then the programmer can) 45.65 685.62 P
3 F
0.25 (change the way in the object system works) 291.08 685.62 P
0 F
0.25 (, for classes) 479.52 685.62 P
0.32 (which are instances of) 45.65 672.62 P
6 9 Q
0.63 (non-standard-class) 147.74 672.62 P
0 11 Q
0.32 (. When the internal generic functions are called, CLOS will exe-) 244.94 672.62 P
0.23 (cute the programmer\325s new methods \050rather than the predefined code\051 for any relevant metaobjects. Not to do) 45.65 659.62 P
-0.46 (so would violate the definition of CLOS as a standard CLOS program. In this example, when classes are created) 45.65 646.62 P
-0.48 (as instances of) 45.65 633.62 P
6 9 Q
-0.95 (non-standard-class) 111.1 633.62 P
0 11 Q
-0.48 (, rather than) 208.3 633.62 P
6 9 Q
-0.95 (standard-class) 262.45 633.62 P
0 11 Q
-0.48 ( \050that is,) 338.05 633.62 P
6 9 Q
-0.95 (non-standard-class) 375.1 633.62 P
0 11 Q
-0.48 ( is their meta-) 472.3 633.62 P
2.23 (class\051, they will behave with the programmer-supplied functionality for those methods which have been) 45.65 620.62 P
1.22 (changed, while, for other methods, they will inherit the default behaviour associated with their metaclass\325s) 45.65 607.62 P
(superclass,) 45.65 594.62 T
6 9 Q
(standard-class) 96.36 594.62 T
0 11 Q
(.) 171.96 594.62 T
0.65 (The metaobject protocol in CLOS, then, illustrates the integration of reflection and object-oriented program-) 45.65 574.62 P
2.5 (ming. It was also the first reflective architecture to be widely developed and distributed. A number of) 45.65 561.62 P
-0.04 (implementations exist as parts of commercial products. It has been used not only to achieve compatibility with) 45.65 548.62 P
-0.61 (older object-oriented extensions to Lisp, and for improved performance on both stock hardware and special-pur-) 45.65 535.62 P
0.18 (pose Lisp machines \050two original motivations for its development\051, but also to provide semantic extensions to) 45.65 522.62 P
0.61 (the language, such as in PCLOS, a persistent implementation of CLOS \050Paepcke, 1988\051, and in ALV, which) 45.65 509.62 P
(incorporates a constraint mechanism for CLOS object slots \050Hill, 1993\051.) 45.65 496.62 T
2 12 Q
(3.3.3  The Metaobject Protocol in General) 45.65 472.95 T
0 11 Q
-0.35 (More recently, the metaobject protocol approach has been exploited to incorporate a notion of language-backed) 45.65 455.62 P
1.26 (deep customisation into systems in other domains. Examples include Silica \050Rao, 1991; 1993\051, a reflective) 45.65 442.62 P
0.04 (window system, and Anibus \050Rodriguez, 1992\051, which uses reflection to tailor parallelisation strategies in par-) 45.65 429.62 P
-0.66 (allel programming. Rao refers to this sort of reflection as) 45.65 416.62 P
3 F
-0.66 (implementational reflection) 292.31 416.62 P
0 F
-0.66 (\321the support for programs) 413.56 416.62 P
-0.27 (to \322become involved in\323 the implementation of the services on which they depend. Implementational reflection) 45.65 403.62 P
0.52 (does not employ the meta-circularity) 45.65 390.62 P
0 8.8 Q
0.42 (3) 209.66 395.02 P
0 11 Q
0.52 ( of previous reflective systems such as 3-Lisp or CLOS, but retains the) 214.06 390.62 P
-0.31 (essential element of reflection\321explicit self-representation. It\325s through this representation that the internals of) 45.65 377.62 P
0.01 (system behaviour can be revealed in a principled way, making them open to examination and manipulation. In) 45.65 364.62 P
0.24 (turn, this mechanism provides for a \322downward\323 information flow across abstraction barriers, so that applica-) 45.65 351.62 P
0.41 (tion needs and requirements can be expressed to the lower levels of the system, and exploited for customised) 45.65 338.62 P
(configuration and behaviour.) 45.65 325.62 T
0.65 (This Open Implementation approach clearly shares many of the same goals as more traditional separation of) 45.65 305.62 P
-0.06 (mechanism and policy \050as discussed when COLA was outlined in Chapter 2\051. However, there are some critical) 45.65 292.62 P
-0.22 (differences. The split between mechanism and policy normally operates by, first,) 45.65 279.62 P
3 F
-0.22 (decomposing) 401.93 279.62 P
0 F
-0.22 ( mechanisms \050to) 459.98 279.62 P
1.03 (remove policy decisions encoded within them\051, and, second, migrating policy) 45.65 266.62 P
3 F
1.03 (above) 400.27 266.62 P
0 F
1.03 ( the abstraction barrier.) 426.53 266.62 P
-0.2 (Applications are responsible not only for defining policy, but also for implementing it; there is no policy below) 45.65 253.62 P
0.59 (the abstraction barrier. In the metaobject protocol approach, however, \322policy\323 resides in the code below the) 45.65 240.62 P
(abstraction barrier, but under the control of the application.) 45.65 227.62 T
-0.08 (There are three consequences. First, the base-level abstraction remains the level at which client and implemen-) 45.65 207.62 P
0.12 (tation interact. This abstraction is, typically, closer to the application\325s level than the raw implementation, and) 45.65 194.62 P
-0.24 (so critical facets of abstraction \050such as information hiding, modularity and decomposition\051 are retained. MOP-) 45.65 181.62 P
-0.52 (based systems offer default behaviours, after all; the goal is to retain and enhance the abstraction, not to do away) 45.65 168.62 P
1.45 (with it. Second, implementation tailoring \050modification through the metalevel interface\051 takes effect at the) 45.65 155.62 P
45.65 120.95 531.65 141.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 128.94 177.62 128.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.16 (3.  Meta-circularity is a form of implementational recursion. It refers to the \050conceptual, at least\051 implementation of a programming lan-) 45.65 114.95 P
(guage in itself. Lisp is traditionally implemented by a meta-circular interpreter \050Steele and Sussman, 1978\051, which is the starting point) 45.65 104.95 T
(for 3-Lisp-in-3-Lisp and CLOS-in-CLOS.) 45.65 94.95 T
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(44) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.14 (implementation level, rather than the client level, optionally making modifications available to other clients. In) 63.65 737.62 P
0.54 (other words, the separation of base and meta levels is akin to a separation of concerns in the implementation) 63.65 724.62 P
-0.16 (design\321the two concerns being the) 63.65 711.62 P
3 F
-0.16 (what) 223.24 711.62 P
0 F
-0.16 ( and) 244.64 711.62 P
3 F
-0.16 (how) 265.71 711.62 P
0 F
-0.16 ( of the implementation\321while separation of mechanism and) 284.04 711.62 P
0.19 (policy simply removes the policy elements, pushing them up to become the concern of each different applica-) 63.65 698.62 P
0.47 (tions. Third, by keeping policy within the implementation \050but allowing control from outside\051, MOP systems) 63.65 685.62 P
-0.55 (can provide simpler modification interfaces. The self-representation which MOP systems present is the) 63.65 672.62 P
3 F
-0.55 (inherent) 512.98 672.62 P
0 F
-0.33 (\050not absolute\051 structure of the system. So, this approach allows the implementation to retain a certain amount of) 63.65 659.62 P
0.45 (control over elements which should not be revealed, and turns control over policy into a negotiation between) 63.65 646.62 P
0.41 (the two system components. This element of partial revelation and partial control is critical in systems where) 63.65 633.62 P
1.59 (control should not be ceded absolutely to individual clients \050such as cases where the abstraction manages) 63.65 620.62 P
(resources for the use of multiple client\321such as physical memory control in a virtual memory system\051.) 63.65 607.62 T
2 14 Q
(3.4  Re\337ection, Open Implementation and Abstraction) 63.65 580.62 T
0 11 Q
-0.27 (The metaobject protocol is a technique for implementing computational reflection, which in turn can be used to) 63.65 558.62 P
0.3 (achieve Open Implementations \050Kiczales, 1996\051\321systems which extend their traditional \050base-level\051 abstrac-) 63.65 545.62 P
4.74 (tion for accessing functionality with a new \050meta-level\051 abstraction for controlling aspects of the) 63.65 532.62 P
0.07 (implementation. One important reason to do this is precisely the sorts of problems which were outlined earlier) 63.65 519.62 P
0.15 (in this chapter, and which echo the problems of CSCW toolkits raised in the previous chapter\321that is, to pro-) 63.65 506.62 P
0.64 (vide flexibility in system infrastructure so that a wide range of application functionality can be supported. A) 63.65 493.62 P
0.81 (CSCW toolkit based on the Open Implementation approach, then, offers a route towards much more radical) 63.65 480.62 P
(flexibility than is achieved by traditional techniques.) 63.65 467.62 T
-0.41 (To date, only a handful of Open Implementations \050largely based on metaobject protocols\051 have been developed,) 63.65 447.62 P
0.66 (and there has been considerable variety in their domains and goals. As a consequence, it is difficult to make) 63.65 434.62 P
-0.06 (generalisations about the process of metalevel design. Based on some particular cases and insights, though, we) 63.65 421.62 P
0.45 (can at least list some desiderata \050which is how we will set out on the design of Prospero in the next chapter\051.) 63.65 408.62 P
(First, a diversion into reflective self-representations is useful to set some context.) 63.65 395.62 T
0.03 (When thinking about self-representations in reflective systems, it\325s important to bear in mind that they are just) 63.65 375.62 P
0.53 (that\321) 63.65 362.62 P
3 F
0.53 (representations) 91.15 362.62 P
0 F
0.53 (. The causal connection, and in particular the computational effectiveness which it sup-) 159.59 362.62 P
0.42 (ports, can lead to a confusion between the representation and the mechanism which is represented. Similarly,) 63.65 349.62 P
0.23 (the metaphoric relationship drawn between reflective systems and mechanical ones\321a story in which mecha-) 63.65 336.62 P
0.88 (nism is \322exposed to view\323, and in which users can \322reach in\323 to effect changes\321can also contribute to this) 63.65 323.62 P
-0.05 (confusion. When thinking of the design of a MOP-based system, there are at least two important aspects of the) 63.65 310.62 P
(representation) 63.65 297.62 T
3 F
(qua representation) 128.71 297.62 T
0 F
( to be borne in mind;) 212.13 297.62 T
3 F
(maintenance) 306.85 297.62 T
0 F
( and) 363.06 297.62 T
3 F
(partiality) 384.44 297.62 T
0 F
(.) 425.39 297.62 T
3 F
-0.04 (Maintenance) 63.65 277.62 P
0 F
-0.04 ( refers to the way in which the representation is actively maintained by the reflective system. Ele-) 121.08 277.62 P
0.63 (ments of the representation are created as needed, and/or maintained in correspondence with elements of the) 63.65 264.62 P
-0.2 (system itself, rather than being continually present. The lazily-created reflective interpreter layers of the 3-Lisp) 63.65 251.62 P
0.82 (implementation illustrate this. While the 3-Lisp model guarantees that the representation is always available) 63.65 238.62 P
-0.25 (when requested, it may not actually exist) 63.65 225.62 P
3 F
-0.25 (until) 244.61 225.62 P
0 F
-0.25 ( its requested. At the point where it is created, the elements of the) 264.78 225.62 P
-0.42 (representation \050or rather, of any instance of the representation\051 are a rationalisation of the system\325s state accord-) 63.65 212.62 P
0.69 (ing to an idealised model. So, when designing the model, and considering the terms in which the meta-level) 63.65 199.62 P
0.18 (interface is cast, it\325s important to remember the distinction between \322exposed structure\323 and the) 63.65 186.62 P
3 F
0.18 (actual) 490.5 186.62 P
0 F
0.18 ( imple-) 518 186.62 P
(mentation mechanisms; a distinction that the system maintains actively.) 63.65 173.62 T
0.02 (A second critical property, which follows from the maintenance of the representation, is its inherent) 63.65 153.62 P
3 F
0.02 (partiality) 505.95 153.62 P
0 F
0.02 (.) 546.9 153.62 P
-0.16 (The purpose of the representation is not to provide an absolute, decontextualised or impartial description of the) 63.65 140.62 P
-0.07 (system\325s activity. Rather, the representation describes some aspects of the system\325s behaviour for the purposes) 63.65 127.62 P
0.57 (of some domain of expected behaviour. It reveals certain aspects of behaviour, and hides others; similarly, it) 63.65 114.62 P
0.52 (supports certain forms of tailoring and modification, but not others. The representation is a) 63.65 101.62 P
3 F
0.52 (designed) 473.06 101.62 P
0 F
0.52 ( artifact;) 512.16 101.62 P
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation.) 325.66 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(45) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
1.25 (and, in line with perceived needs and expectations, the designer sets the bounds on the flexibility which it) 45.65 737.62 P
(embodies.) 45.65 724.62 T
2 12 Q
(3.4.1  CLOS and T) 45.65 700.95 T
(elos) 144.37 700.95 T
0 11 Q
-0.38 (The representation, then, is guided more by expectations of use than it is by the structure of the implementation.) 45.65 683.62 P
0.97 (This is particularly well illustrated by the comparison between two MOPs for ostensibly similar domains\321) 45.65 670.62 P
0.71 (CLOS and Telos. As discussed above, CLOS is the object system for Common Lisp; Telos, similarly, is the) 45.65 657.62 P
-0.06 (object system for EuLisp \050Padget et al., 1993\051. Like CLOS, Telos incorporates a metaobject protocol by which) 45.65 644.62 P
-0.19 (programmers can make changes to the internal behaviour of the object system. The design histories and overall) 45.65 631.62 P
-0.25 (goals of EuLisp and Common Lisp \050and hence, Telos and CLOS\051 are quite different\321in particular, EuLisp and) 45.65 618.62 P
-0.15 (Telos were designed together, whereas CLOS was developed after the original Common Lisp design was com-) 45.65 605.62 P
0.28 (plete\321and to an extent the differences in the MOPs reflect this. However, a number of important distinctions) 45.65 592.62 P
-0.13 (originate in the different set of design criteria at work, and the designers\325 expectations about desired usage pat-) 45.65 579.62 P
(terns \050Bretthauer et al., 1993\051.) 45.65 566.62 T
0.89 (In some areas, the differences highlight the Telos developers\325 concerns with run-time efficiency, and so the) 45.65 546.62 P
0.69 (Telos design moves as much computation as possible to load-time or define-time. For example, to introduce) 45.65 533.62 P
-0.6 (changes to the way in which slots are read, a CLOS MOP programmer would define new methods on the generic) 45.65 520.62 P
0.15 (function) 45.65 507.62 P
6 9 Q
0.29 (slot-value-using-class) 85.21 507.62 P
0 11 Q
0.15 (, running specialised code when the slot is read. Using the Telos MOP, by) 204.01 507.62 P
-0.54 (contrast, this would be achieved by changing the class definition code to install a different slot-reading function;) 45.65 494.62 P
-0.3 (and so the burden of computation \050and optimisation\051 is moved from run-time to define-time) 45.65 481.62 P
0 8.8 Q
-0.24 (4) 445.34 486.02 P
0 11 Q
-0.3 (. At the same time,) 449.74 481.62 P
-0.08 (Telos can be seen as making more aggressive use of the MOP in the language definition itself; Telos has a lay-) 45.65 468.62 P
1.81 (ered structure with different levels of functionality, and uses the MOP to achieve semantic extensions as) 45.65 455.62 P
0.34 (successive layers emerge. For instance, Telos supports only single inheritance at level-1, but multiple inherit-) 45.65 442.62 P
(ance at level-2; this extension is achieved through meta-programming.) 45.65 429.62 T
2 12 Q
(3.4.2  Compile-T) 45.65 405.95 T
(ime and Run-time MOPs) 133.9 405.95 T
0 11 Q
1.12 (The Telos developers are by no means the only group to have investigated the relationships between MOP) 45.65 388.62 P
1.15 (design, areas of MOP control, and performance. PCL, the public-domain implementation of CLOS and the) 45.65 375.62 P
0.54 (CLOS MOP, used aggressive compilation and optimisation techniques to \322win back\323 the performance which) 45.65 362.62 P
-0.57 (was lost through the run-time overhead implied by the metaobject protocol \050Kiczales and Rodriguez, 1990\051. The) 45.65 349.62 P
0.1 (techniques used in PCL preserve the illusion of late-binding and run-time use of the MOP structure during the) 45.65 336.62 P
(object system\325s operation, while moving as much processing as possible to define-time.) 45.65 323.62 T
0.19 (More recently, various projects have investigated the use of compile-time MOPs. These are metaobject proto-) 45.65 303.62 P
-0.49 (cols which are invoked \050and therefore incur processing overhead\051 only during the compilation phase of program) 45.65 290.62 P
-0.05 (development, and therefore will not interfere with run-time performance. Anibus \050Rodriguez, 1992\051 controlled) 45.65 277.62 P
1.52 (the distribution and communication patterns of programs for parallel machines, but the strategies which it) 45.65 264.62 P
1.07 (manipulated were compiled into the parallel programs; there was no run-time interference by the metalevel) 45.65 251.62 P
0.14 (facilities. While the first version of Open C++ \050Chiba and Masuda, 1993\051 incurred a high overhead by using a) 45.65 238.62 P
0.84 (metaobject protocol to control virtual function invocation at run-time, Open C++ version 2 \050Chiba, 1995\051 is) 45.65 225.62 P
0.74 (entirely a compile-time protocol. The modifications which programmers supply to change details of the lan-) 45.65 212.62 P
2.6 (guage implementation are aimed, not at how the run-time system behaves, but about how the targeted) 45.65 199.62 P
-0.44 (behaviours are) 45.65 186.62 P
3 F
-0.44 (compiled) 111.97 186.62 P
0 F
-0.44 (. Since the metaobject protocol controls compilation strategies, the metaobject protocol) 152.3 186.62 P
-0.19 (introduces no inherent run-time overheads. The Intrigue project \050Lamping et al., 1992\051 represents an attempt to) 45.65 173.62 P
(use the same sorts of compile-time techniques in a MOP-controlled compiler for Scheme.) 45.65 160.62 T
45.65 120.95 531.65 141.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 128.94 177.62 128.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.27 (4.  Of course, this is a conceptual distinction, rather than a necessary implementational one. Kiczales and Rodriguez \0501990\051 describe the) 45.65 114.95 P
(use of partial evaluation in PCL, a highly-optimised public-domain implementation of CLOS, which achieves this sort of cost move-) 45.65 104.95 T
(ment, but does it in the implementation rather than in the language de\336nition.) 45.65 94.95 T
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(46) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.25 (Compile-time techniques have also been used in non-language settings. Maeda\325s \0501996\051 MOP-controlled file-) 63.65 737.62 P
0.04 (system provides application programmers with control over filesystem caching policies, but does not force the) 63.65 724.62 P
-0.54 (filesystem to continually indirect through a metaobject layer or metalevel at run-time. The direction of this work) 63.65 711.62 P
0.3 (is to transform what Rao \0501993\051 calls the \322Don\325t use, don\325t lose\323 policy into a policy of \322Use, don\325t lose\323, by) 63.65 698.62 P
0.24 (designing the metaobject protocol explicitly to minimise or eliminate run-time activity. At the same time, this) 63.65 685.62 P
-0.36 (yields a second benefit, which is a simplification of the metaobject protocol technology. If the MOP is designed) 63.65 672.62 P
-0.04 (to minimise the \322performance hit\323, then obviously the effort which must be expended to regain performance is) 63.65 659.62 P
0.35 (correspondingly reduced, and so the metaobject system need not \050necessarily\051 require the level of complexity) 63.65 646.62 P
(that, say, the PCL CLOS implementation does.) 63.65 633.62 T
2 12 Q
(3.4.3  Computational Re\337ection and Metaobject Protocols) 63.65 609.95 T
0 11 Q
1.07 (This chapter has introduced an architectural approach \050) 63.65 592.62 P
3 F
1.07 (Open Implementation) 313.35 592.62 P
0 F
1.07 (\051, a design principle \050) 410.04 592.62 P
3 F
1.07 (computa-) 508.1 592.62 P
1.12 (tional reflection) 63.65 579.62 P
0 F
1.12 (\051 and a programming technique \050) 135.36 579.62 P
3 F
1.12 (metaobject protocols) 285.47 579.62 P
0 F
1.12 (\051. Before proceeding, it is valuable to) 379.17 579.62 P
(spend some time on the relationship between these and some consequences.) 63.65 566.62 T
0.22 (Open Implementation is a general approach to the design and organisation of software systems. The approach) 63.65 546.62 P
-0.07 (is based on the exploration of the role of abstraction presented in this chapter. Reflection is a general computa-) 63.65 533.62 P
-0.49 (tional principle \050about opportunities and consequences of computational self-reference\051. Open Implementations) 63.65 520.62 P
(may be reflective, but that is not inherent.) 63.65 507.62 T
0.1 (The metaobject protocol is one technique for implementing reflective systems. To explore its consequences, it) 63.65 487.62 P
0.91 (is interesting to compare the implementation of two reflective systems presented in this chapter, 3-Lisp and) 63.65 474.62 P
(CLOS. CLOS uses a metaobject protocol, but 3-Lisp does not.) 63.65 461.62 T
0.54 (In 3-Lisp, the reflective representation is provided through access to the language processor. 3-Lisp provides) 63.65 441.62 P
1.12 (mechanisms for moving evaluations between levels of the processor stack \050the \322infinite tower\323\051, as well as) 63.65 428.62 P
-0.31 (describing the structure of the processor \050environments, continuations, etc.\051 so that the relationship between the) 63.65 415.62 P
0.57 (base level and meta level is revealed. One consequence of this \322level-shifting\323 approach is that points where) 63.65 402.62 P
-0.08 (reflection is used, and the means by which it used, are very clear in the program. Reflection is) 63.65 389.62 P
3 F
-0.08 (directly accessi-) 477.94 389.62 P
(ble) 63.65 376.62 T
0 F
(, and is not mediated by any other language feature.) 77.09 376.62 T
0.1 (CLOS\325s reflective link takes the form of a metaobject protocol\321a protocol defined on metaobjects, which are) 63.65 356.62 P
0.24 (themselves explicit representations of structures and mechanisms used at the base level. However, the MOP\325s) 63.65 343.62 P
-0.17 (encoding of the reflective link in terms of object-oriented programming begins to blur the boundaries of reflec-) 63.65 330.62 P
0.34 (tive manipulation. The object-oriented encoding means that reflection is now mediated by the mechanisms of) 63.65 317.62 P
1.72 (object-oriented programming\321subclassing, specialisation, method inheritance, etc. So, the MOP approach) 63.65 304.62 P
-0.5 (does not provide) 63.65 291.62 P
3 F
-0.5 (reflective procedures) 138.22 291.62 P
0 F
-0.5 ( in the sense in which 3-Lisp did. Reflection is achieved through applying) 230.89 291.62 P
-0.26 (standard object-oriented techniques, but applying them to metalevel structures \050the metaobjects and their meth-) 63.65 278.62 P
0.01 (ods\051. In other words, in the MOP approach, the reflection arises through the) 63.65 265.62 P
3 F
0.01 (objects) 399.87 265.62 P
0 F
0.01 ( of actions, not through the) 431.03 265.62 P
3 F
(actions) 63.65 252.62 T
0 F
( themselves.) 95.43 252.62 T
2 14 Q
(3.5  Summary) 63.65 225.62 T
0 11 Q
0.91 (This chapter has introduced: first, a framework by which to understand the flexibility problems which were) 63.65 203.62 P
(encountered in Chapter 2; and second, a route towards a solution.) 63.65 190.62 T
0.32 (The problems of flexibility in CSCW toolkits, as with the design of other toolkits, libraries, languages, lies in) 63.65 170.62 P
-0.43 (the range of purposes to which a client or application might put the structures and mechanisms which the toolkit) 63.65 157.62 P
0.68 (provides. The effective matching of application needs to the toolkit\325s facilities implies either that the two be) 63.65 144.62 P
0.96 (designed together \050or with considerable knowledge of each other\325s behaviour and requirements\051, or that the) 63.65 131.62 P
-0.35 (client somehow be able to \322see through\323 the abstraction barrier which separates them. The problems introduced) 63.65 118.62 P
-0.68 (by this opaque barrier become gradually worse as the number of potential clients increases \050and with it, the range) 63.65 105.62 P
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation.) 325.66 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(47) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.11 (of potential client behaviours\051. So the traditional model of abstraction in system design, which is meant to sup-) 45.65 737.62 P
(port the reuse of implementations, is actually getting in the way of doing precisely that.) 45.65 724.62 T
-0.21 (The Open Implementation \050OI\051 approach provides a new way of thinking about the relationships between a cli-) 45.65 704.62 P
0.26 (ent, the abstraction which the client is using, and the implementation which realises that abstraction. Drawing) 45.65 691.62 P
-0.31 (on computational reflection as a way of relating the abstraction and the implementation, Open Implementations) 45.65 678.62 P
-0.07 (provide clients not only with abstractions which they can use, but also with the means to examine and manipu-) 45.65 665.62 P
1.28 (late those abstractions. Using these facilities, clients can adapt aspects of the systems which support them,) 45.65 652.62 P
(tailoring them and specialising them to their own particular needs.) 45.65 639.62 T
-0.16 (This approach has been demonstrated in a number of systems, including programming languages, window sys-) 45.65 619.62 P
0.22 (tems and operating systems. The problems which OI addresses are precisely those which were encountered in) 45.65 606.62 P
-0.14 (the discussion of CSCW toolkit flexibility in the previous chapter, and so it is an excellent candidate for poten-) 45.65 593.62 P
-0.09 (tial solutions. In the next chapter, I will start off by outlining aspects of the OI design approach, guidelines and) 45.65 580.62 P
-0.09 (desiderata, and then move on to discuss how I have applied OI to the problems of the CSCW toolkit, Prospero.) 45.65 567.62 P
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 3: Computational Reflection and Open Implementation) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(48) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit.) 364.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(49) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Chapter 4:) 45.65 674.29 T
(Applying Re\337ection in a CSCW T) 45.65 646.29 T
(oolkit) 365.97 646.29 T
2 14 Q
(4.1  Introduction) 45.65 552.42 T
0 11 Q
0.16 (Chapter 2 examined a number of CSCW toolkits and their support for flexibility. It showed how the decisions) 45.65 530.42 P
-0.24 (which had been made in the design of the toolkits\325 facilities limited their applicability, by committing to partic-) 45.65 517.42 P
1.54 (ular approaches to collaboration support. In Chapter 3, this problem was discussed with reference to very) 45.65 504.42 P
0.22 (general notions of abstraction in software design, and the Open Implementation approach was introduced as a) 45.65 491.42 P
0.18 (technique to address these problems. Open Implementations reveal aspects of system structure and behaviour,) 45.65 478.42 P
0.32 (providing applications \050clients of the abstractions\051 with principled means for examining and manipulating the) 45.65 465.42 P
0.54 (internal operation of the abstractions. As a result, clients of the abstractions can become involved in how the) 45.65 452.42 P
-0.19 (infrastructure supports their operation, and so can tailor the implementation of system abstractions to their own) 45.65 439.42 P
(particular needs.) 45.65 426.42 T
0.73 (This chapter and those which follow introduce the design and implementation of Prospero, a CSCW toolkit.) 45.65 406.42 P
1.36 (Prospero uses Open Implementation and computational reflection to address the problems identified in the) 45.65 393.42 P
0.68 (design of CSCW toolkits. This chapter is concerned with general design issues, and the scope of the toolkit;) 45.65 380.42 P
-0.24 (Chapters 5 and 6 will introduce the particular techniques developed in Prospero, and show how the apply to the) 45.65 367.42 P
(problems of CSCW flexibility.) 45.65 354.42 T
2 14 Q
(4.2 Designing Open Implementations) 45.65 327.42 T
0 11 Q
0.27 (How would the design of an open CSCW toolkit proceed? To date, there are few examples of complete Open) 45.65 305.42 P
1.42 (Implementation designs, although there are examples of OI-style concepts in otherwise traditional systems) 45.65 292.42 P
0.73 (\050such as the referenced work with composable microprotocols, or external paging facilities\051. On the basis of) 45.65 279.42 P
-0.29 (these experiences, what has emerged is not so much a process for doing Open Implementation design, but more) 45.65 266.42 P
0.14 (a set of principles which should guide specific attempts at creating Open Implementations. Emerging work on) 45.65 253.42 P
-0.08 (Open Implementation Analysis and Design \050OIA/D\051 \050Kiczales et al., 1995\051 represents an early attempt to draw) 45.65 240.42 P
(out these principles.) 45.65 227.42 T
-0.43 (I will describe a number of these principles separately. However, it should be noted \050and will become clear\051 that) 45.65 207.42 P
(they are strongly related to each other.) 45.65 194.42 T
2 12 Q
(4.2.1  Scope Control) 45.65 170.75 T
0 11 Q
-0.61 (One critical property is) 45.65 153.42 P
3 F
-0.61 (scope control) 147.67 153.42 P
0 F
-0.61 (, the ability to restrict attention \050and changes\051 to the particular set of objects) 206.63 153.42 P
0.45 (which should be affected. The ability to maintain and manipulate different scopes not only sets up protection) 45.65 140.42 P
(boundaries, but also allows for different behaviours to be mixed together in a single system.) 45.65 127.42 T
1.3 (In CLOS, for instance, this is achieved through the class/metaclass mechanism. Since class behaviours are) 45.65 107.42 P
-0.21 (encapsulated by metaclasses, new behaviours are only introduced into those classes which specify a new, mod-) 45.65 94.42 P
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(50) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.14 (ified class as their metaclass. Introducing a change to slot access or method despatch will not affect every class) 63.65 737.62 P
-0.43 (in the system. The metaclass mechanism bounds the effect of the change, restricting its scope. At the same time,) 63.65 724.62 P
-0.13 (this also allows multiple behaviours to coexist. While a change to the slot access mechanism can be introduced) 63.65 711.62 P
0.57 (for a new metaclass, the default behaviour exists alongside it, associated with the original metaclass. Indeed,) 63.65 698.62 P
2.26 (any number of new behaviours might be introduced, and the scope control introduced by the metaclass) 63.65 685.62 P
0.47 (namespace allows them to sit alongside each other without interference. A similar approach is used in Silica,) 63.65 672.62 P
(through the use of specific \322contracts\323 between types of windows and their subwindows.) 63.65 659.62 T
0.53 (The ability to name and distinguish between sets of alternative behaviours is not the only important factor in) 63.65 639.62 P
-0.07 (maintaining scope control. It is also critical that the groupings and categories to which these can be applied are) 63.65 626.62 P
-0.02 (at appropriate levels of granularity. For example, in CLOS, it would be unwieldy to have to discuss metaclass-) 63.65 613.62 P
-0.54 (level behaviours individually for each instance of a class, or to have to talk about all classes at once. CLOS asso-) 63.65 600.62 P
1.49 (ciates these behaviours with classes, which are a convenient unit of scope for the flexibility which CLOS) 63.65 587.62 P
-0.06 (provides. So the provision of scope control means not only setting up the boundaries between different scopes,) 63.65 574.62 P
1.12 (but also providing an appropriate level of granularity for bounding the effects of changes introduced at the) 63.65 561.62 P
(metalevel.) 63.65 548.62 T
2 12 Q
(4.2.2  Conceptual Separation) 63.65 524.95 T
0 11 Q
-0.56 (A second key property is the separation of conceptual concerns expressed by the metalevel interface. Again, this) 63.65 507.62 P
-0.09 (is essentially a scoping issue, but of a different sort\321scope control addresses) 63.65 494.62 P
3 F
-0.09 (which objects) 405 494.62 P
0 F
-0.09 ( will be affected by) 465.1 494.62 P
1.57 (a particular change, while conceptual separation is concerned with the) 63.65 481.62 P
3 F
1.57 (extent of the behaviours) 390.6 481.62 P
0 F
1.57 ( which are) 500.7 481.62 P
(affected.) 63.65 468.62 T
0.86 (The meta-level interface expresses a range of different behaviours and aspects of the system\325s internals; the) 63.65 448.62 P
0.41 (principle of conceptual separation states that the separation between different aspects of the system\325s internal) 63.65 435.62 P
0.82 (behaviour should be expressed in a similar separation between those aspects of the interface used to control) 63.65 422.62 P
0.3 (them. So, it should be possible to introduce a change to one aspect of the system\325s behaviour, relatively inde-) 63.65 409.62 P
-0.24 (pendently of the other aspects which the metalevel interface may control; and similarly, it should be possible to) 63.65 396.62 P
0.09 (do this using only specific aspects of the metalevel interface relevant for that concern, without having to bring) 63.65 383.62 P
(in \050or even, perhaps, understand\051 the other areas. Simple changes should be simple to introduce.) 63.65 370.62 T
-0.35 (The separation of base and meta levels can be thought of in terms of a traditional \322separation of concerns\323; con-) 63.65 350.62 P
-0.15 (ceptual separation, here, deals with the further separation of concerns) 63.65 337.62 P
3 F
-0.15 (at the metalevel.) 370.03 337.62 P
0 F
-0.15 (Perhaps even more than) 444.72 337.62 P
-0.2 (the other principles, this highlights the fact that the metalevel interface is designed to support a particular range) 63.65 324.62 P
0.02 (of customisation behaviours, based on the designer\325s expectations or understandings of the system\325s particular) 63.65 311.62 P
-0.04 (domains of use. For example, the CLOS metaobject protocol opens up certain areas of processing \050such as slot) 63.65 298.62 P
0.02 (access, method invocation and slot initialisation\321while leaving other areas unexplored \050such as name binding) 63.65 285.62 P
0.25 (and argument processing\051. This is done on the basis of the perceived needs of CLOS users and implementors.) 63.65 272.62 P
0.02 (The separation of concerns in the metalevel interface reflects assumptions and expectations about the different) 63.65 259.62 P
(behaviours likely to be tailored independently.) 63.65 246.62 T
2 12 Q
(4.2.3  Incrementality) 63.65 222.95 T
0 11 Q
-0.33 (Incrementality deals with the ways in which changes introduced into the system relate to, and build upon, exist-) 63.65 205.62 P
(ing or default behaviours.) 63.65 192.62 T
0.78 (The provision of a meta-level interface, and thereby a means to change the system and adapt it to particular) 63.65 172.62 P
-0.08 (needs and circumstances, does not relieve the system designer of the burden of designing a good system. Open) 63.65 159.62 P
-0.58 (Implementations are intended to be usable designs with the metalevel interface as an added facility. They should) 63.65 146.62 P
(have good default behaviour.) 63.65 133.62 T
0.37 (The default behaviour serves two ends. First, it provides the standard functionality of the toolkit. It should be) 63.65 113.62 P
-0.52 (usable in a normal range of circumstances, without any appeal to the metalevel interface. Second, when the met-) 63.65 100.62 P
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit.) 364.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(51) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.25 (alevel interface is used to introduce changes, the default behaviour should be a basis for reuse. Incrementality) 45.65 737.62 P
-0.09 (concerns this second use of default behaviours. This principle states that it should be possible to introduce new) 45.65 724.62 P
-0.31 (behaviours by incrementally changing old ones, specifying just what\325s new and different relative to the original) 45.65 711.62 P
0.7 (behaviour. The programmer should not have to recraft the behaviour from scratch, but rather use the default) 45.65 698.62 P
0.18 (behaviour as a baseline. So, the default behaviour is provided not only as a usable system in its own right, but) 45.65 685.62 P
(also as the basis for redefinition and reconstruction.) 45.65 672.62 T
2 12 Q
(4.2.4  Robustness) 45.65 648.95 T
0 11 Q
-0.26 (Open Implementation allows applications to introduce modifications to the infrastructures which support them.) 45.65 631.62 P
-0.07 (In the presence of these sorts of changes, how can robustness be maintained? Although this issue has been rec-) 45.65 618.62 P
(ognised as critical from the outset, relatively little work has addressed it directly until recently.) 45.65 605.62 T
0.45 (As a first step, the use of) 45.65 585.62 P
3 F
0.45 (scope control) 160.61 585.62 P
0 F
0.45 ( can be seen, to an extent, as a damage limitation exercise to preserve) 220.63 585.62 P
0.3 (robustness, by providing the mechanisms to limit changes to specifically those objects in the system to which) 45.65 572.62 P
0.01 (they need to apply. So, if a CLOS programmer designs a new slot lookup mechanism which is slow or flawed,) 45.65 559.62 P
0.05 (then those changes are restricted to the programmer\325s new classes and so the behaviour of the whole system is) 45.65 546.62 P
1.98 (not endangered. Similarly, in metacircular systems, this scope control approach prevents a programmer\325s) 45.65 533.62 P
-0.29 (\050potentially incorrect or damaging\051 changes from affecting the internal behaviour of the system. At least, it pre-) 45.65 520.62 P
2.06 (vents) 45.65 507.62 P
3 F
2.06 (accidental) 73.68 507.62 P
0 F
2.06 ( incursions. In many systems, the programmer could deliberately specify internal system) 119.5 507.62 P
(components as the objects of change.) 45.65 494.62 T
-0.63 (Another approach to robustness is the use of) 45.65 474.62 P
3 F
-0.63 (declarative) 238.55 474.62 P
0 F
-0.63 ( interfaces to the metalevel, rather than) 288.04 474.62 P
3 F
-0.63 (procedural) 457.73 474.62 P
0 F
-0.63 ( ones.) 506.62 474.62 P
-0.34 (With a procedural interface, the metalevel programmer provides new code which will be executed as part of the) 45.65 461.62 P
-0.06 (operation of the underlying implementation. With a declarative interface, on the other hand, the metalevel pro-) 45.65 448.62 P
-0.23 (grammer describes properties of desired state. In this case, the system retains control over its own mechanisms,) 45.65 435.62 P
0.22 (incorporating the declared properties and balancing them against other needs within the system. A declarative) 45.65 422.62 P
-0.57 (model provides fewer opportunities for a poorly-considered metalevel change to undermine the system\325s behav-) 45.65 409.62 P
(iour or performance.) 45.65 396.62 T
1.18 (Some aspects of metalevel design lend themselves more naturally to a procedural approach, and some to a) 45.65 376.62 P
-0.06 (declarative. Both may be present within a single system. For example, recent OI work related to operating sys-) 45.65 363.62 P
2.89 (tems, and most particularly Maeda\325s OI filesystem \050Maeda, 1996\051, has distinguished between areas of) 45.65 350.62 P
3 F
-0.43 (abstraction mapping) 45.65 337.62 P
0 F
-0.43 ( and) 136.58 337.62 P
3 F
-0.43 (resource allocation) 157.1 337.62 P
0 F
-0.43 (. Abstraction mapping deals largely with the way in which a single) 242.52 337.62 P
0.35 (process \050or a single client\051 sees and manipulates underlying abstractions, while resource allocation involves a) 45.65 324.62 P
-0.4 (balance between the simultaneous requirements of multiple clients. Maeda\325s metalevel interface uses more pro-) 45.65 311.62 P
0.14 (cedural interfaces for control of abstractions, and more declarative interfaces for resource allocation concerns,) 45.65 298.62 P
(so that a single client will not be able to adversely affect the allocation of resources for others.) 45.65 285.62 T
2 14 Q
(4.3 CSCW) 45.65 258.62 T
(: The Locus of Flexibility) 111.52 258.62 T
0 11 Q
-0.62 (A second question to be addressed is, what is the locus of flexibility? What sort of flexibility should be provided,) 45.65 236.62 P
(and to whom? We can revisit the distinctions outlined in Chapter 2, looking at them from the OI perspective:) 45.65 223.62 T
(1.) 45.65 203.62 T
3 F
0.31 (Pr) 59.18 203.62 P
0.31 (ogrammer/T) 69.78 203.62 P
0.31 (oolkit Flexibility) 123.76 203.62 P
0 F
0.31 (. The traditional point of application of re\337ective/OI concepts is at the tool-) 196.39 203.62 P
1.27 (kit level, allowing the programmer to adapt elements of the toolkit to the needs of particular situations,) 59.18 190.62 P
(extending the range of applications which can be built with the toolkit.) 59.18 177.62 T
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(52) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
(2.) 63.65 737.62 T
3 F
0.62 (Pr) 77.18 737.62 P
0.62 (ogrammer/Application Flexibility) 87.78 737.62 P
0 F
0.62 (. A second possible point of application would allow the programmer) 235.88 737.62 P
0.62 (,) 546.9 737.62 P
0.27 (in an application, to appeal to the self-representation to support \337exible or adaptive behaviour) 77.18 724.62 P
0.27 (. The control) 492.58 724.62 P
-0.13 (which the programmer would exert could be used to adapt the application dynamically to particular circum-) 77.18 711.62 P
(stances of use \050such as current patterns of interaction or network topology\051.) 77.18 698.62 T
(3.) 63.65 679.62 T
3 F
-0.26 (User/Application Flexibility) 77.18 679.62 P
0 F
-0.26 (. Finally) 199.95 679.62 P
-0.26 (, means of introspection and intercession could be of) 235.65 679.62 P
-0.26 (fered at run-time to) 465.21 679.62 P
0.13 (the users of the system. The user interface could present them, singly or collectively) 77.18 666.62 P
0.13 (, with the means to tai-) 448.16 666.62 P
(lor the internal mechanisms of the system to their own preferences, process or procedures.) 77.18 653.62 T
-0.15 (These approaches are different but not unrelated, and a case made for any one of them is, essentially, a case for) 63.65 636.62 P
0.01 (all. They can also be seen as a progression, each building upon the flexibility mechanisms provided in the pre-) 63.65 623.62 P
(vious approach.) 63.65 610.62 T
0.59 (Prospero\325s design adopts the first approach, using reflection and OI techniques to open up the toolkit to pro-) 63.65 590.62 P
0.3 (grammer specialisation. This is the approach most directly related to previous work in Open Implementations) 63.65 577.62 P
-0.26 (\050such as in CLOS, Silica or Anibus\051. Aspects of the second approach are being explored in attempts to incorpo-) 63.65 564.62 P
0.26 (rate into OI practice lessons and techniques from work on adaptive computation \050Lopes, 1996\051. Similarly, the) 63.65 551.62 P
-0.11 (third issue is being addressed separately in the development of a notion of interface) 63.65 538.62 P
3 F
-0.11 (accounts) 431.75 538.62 P
0 F
-0.11 (\321the use of com-) 470.86 538.62 P
1.12 (putationally reflective models as \322stories\323 which systems tell about their own structure and behaviour, as a) 63.65 525.62 P
(resource for improvised action \050Dourish, 1995\051.) 63.65 512.62 T
2 14 Q
(4.4 CSCW T) 63.65 485.62 T
(oolkits: Areas of Concern) 140.66 485.62 T
0 11 Q
0.22 (When existing CSCW toolkits were presented in Chapter 2, attention focussed on ways in which specific sys-) 63.65 463.62 P
0.69 (tems had made provision for flexibility and diversity in creating applications. The discussion above, though,) 63.65 450.62 P
0.32 (illustrates that a hodge-podge of the various facilities they provided would be of little help in an Open Imple-) 63.65 437.62 P
1.13 (mentation. Instead, this section lays out the various areas of concern and functionality which those toolkits) 63.65 424.62 P
-0.28 (addressed, as a starting point in the design of Prospero. In particular, I will detail five particular areas of CSCW) 63.65 411.62 P
(toolkit concern which emerge from current practice.) 63.65 398.62 T
2 12 Q
(4.4.1  Data Distribution) 63.65 374.95 T
0 11 Q
-0.67 (Data distribution concerns the ways in which user and system data are distributed across a network. Issues which) 63.65 357.62 P
(arise include:) 63.65 344.62 T
(1.) 63.65 324.62 T
3 F
0.94 (Replication) 77.18 324.62 P
0 F
0.94 (. Are multiple copies of data items available at once at dif) 127.9 324.62 P
0.94 (ferent points in the network? If so,) 392.19 324.62 P
0.42 (how many? How are decisions to replicate data made? How are multiple copies of data items held consis-) 77.18 311.62 P
(tent?) 77.18 298.62 T
(2.) 63.65 279.62 T
3 F
0.22 (Migration) 77.18 279.62 P
0 F
0.22 (. Are data units held at a single location for their lifetime, or for the lifetime of a session? If data) 121.8 279.62 P
(units move from place to place, what determines when they should move, and to where?) 77.18 266.62 T
(3.) 63.65 247.62 T
3 F
0.87 (Location) 77.18 247.62 P
0 F
0.87 (. How can objects be located? What determines the mapping between an object presented at the) 116.3 247.62 P
(user interface, an internal representation, and the current location of that object?) 77.18 234.62 T
-0.34 (Like the other concerns to be presented in this section, these data distribution issues are normally addressed and) 63.65 217.62 P
-0.38 (encapsulated at the lower levels of the system. The details of object replication, for instance, would normally be) 63.65 204.62 P
0.14 (seen as lying below a \322shared object\323 layer \050which itself is encapsulated below the level of applications them-) 63.65 191.62 P
0.69 (selves\051. However, these are precisely the areas to which Prospero is addressed; areas of \322low-level\323 concern) 63.65 178.62 P
(which, as shown in previous chapters, have a significant impact on patterns of collaboration and interaction.) 63.65 165.62 T
2 12 Q
(4.4.2  Concurrency and Exclusion Control) 63.65 141.95 T
0 11 Q
0.75 (CSCW systems coordinate the activity of multiple users, across time and space. At different times, different) 63.65 124.62 P
0.78 (numbers of users, corrected to varying degrees over a network, may be simultaneously working in the same) 63.65 111.62 P
0.26 (workspace. How is the concurrent activity of these users managed? How does the system ensure that simulta-) 63.65 98.62 P
FMENDPAGE
%%EndPage: "52" 52
%%Page: "53" 53
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit.) 364.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(53) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
2.02 (neous action doesn\325t introduce inconsistency into the network? How is inconsistency avoided or conflict) 45.65 737.62 P
(managed?) 45.65 724.62 T
2 12 Q
(4.4.3  Representations of Activity) 45.65 700.95 T
0 11 Q
1.15 (Both experimental studies \050e.g. Dourish and Bellotti, 1992\051 and observational studies \050e.g. Heath and Luff,) 45.65 683.62 P
0.36 (1992\051 have illustrated the ways in which individual activities in collaborative work are organised around per-) 45.65 670.62 P
1.27 (ceptions and understandings of the ongoing work of others. As a result, an important area of design is the) 45.65 657.62 P
0.19 (provision for representations, explicit or implicit, of the activities of other users. These may be integrated into) 45.65 644.62 P
0.27 (the shared workspace \050e.g. Hill et al., 1992\051, or provided externally; be at different levels of specificity; focus) 45.65 631.62 P
-0.15 (on current or previous activity; focus on task-intrinsic or extrinsic features; focus on the character or context of) 45.65 618.62 P
(activity \050Dourish and Bellotti, 1992\051; encode or mediate information \050Bentley and Dourish, 1995\051; etc.) 45.65 605.62 T
2 12 Q
(4.4.4  User Interface Linkage) 45.65 581.95 T
0 11 Q
0.42 (In CSCW systems, it is not only the application, but also the interface, which is distributed. Different CSCW) 45.65 564.62 P
0.48 (systems provide different levels of interface linkage. Two possible examples of interface linkage patterns are) 45.65 551.62 P
0.01 (illustrated in figure 4.1. The strongest form of linkage is the screen-based sharing of systems, in which partici-) 45.65 538.62 P
0.9 (pants\325 screens mirror each other \050shown in 4.1\050a\051\051. A more flexible form of sharing replicates only window) 45.65 304.62 P
-0.67 (contents; this is supported by Shared-X, for example. More flexible yet are systems which share only application) 45.65 291.62 P
(data, and may allow users to have different views of the data concurrently \050shown in 4.1\050b\051\051.) 45.65 278.62 T
0.11 (Again, forms of interface linkage will clearly affect the styles and patterns of group interaction. \050For example,) 45.65 258.62 P
-0.22 (see Stefik et al. \0501987b\051 and Tatar et al. \0501991\051 for accounts of the relationship between different interface link-) 45.65 245.62 P
-0.07 (age strategies in Colab and user experiences.\051 This, then, is another area where flexibility in a CSCW toolkit is) 45.65 232.62 P
(important.) 45.65 219.62 T
2 12 Q
(4.4.5  Conference and Session Management) 45.65 195.95 T
0 11 Q
-0.44 (Finally, areas of concern for a CSCW toolkit are the management of conferences and sessions. Existing systems) 45.65 178.62 P
-0.41 (vary in their definition of these terms. For the purposes of this discussion, I will regard a conference as a longer-) 45.65 165.62 P
0.12 (lived unit than a session. Conferences are persistent even when there are no active users. Users may come and) 45.65 152.62 P
-0.08 (go, joining and leaving conferences as they please. A session is a period of activity within a conference. A ses-) 45.65 139.62 P
(sion begins when the first active user joins the conference, and ends when the last active user leaves.) 45.65 126.62 T
-0.29 (Conference management, then, is largely concerned with issues of naming and identification; the association of) 45.65 106.62 P
-0.29 (data and users together to form a single, identifiable conference entity. Session management, on the other hand,) 45.65 93.62 P
45.65 87.95 531.65 744.95 C
78.89 325.45 498.4 534.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
222.9 382.95 264.57 400.95 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
281.24 382.95 322.9 400.95 R
7 X
V
0 X
N
214.9 489.95 256.57 507.95 R
7 X
V
0 X
N
290.24 489.95 331.9 507.95 R
7 X
V
0 X
N
367.9 417.95 409.57 435.95 R
7 X
V
0 X
N
443.24 417.95 484.9 435.95 R
7 X
V
0 X
N
367.9 489.95 409.57 507.95 R
7 X
V
0 X
N
443.24 489.95 484.9 507.95 R
7 X
V
0 X
N
367.9 453.95 409.57 471.95 R
7 X
V
0 X
N
443.24 453.95 484.9 471.95 R
7 X
V
0 X
N
265.9 391.95 279.65 391.95 2 L
3 H
N
222.9 453.95 264.57 471.95 R
7 X
V
0.5 H
0 X
N
281.24 453.95 322.9 471.95 R
7 X
V
0 X
N
265.9 462.95 279.65 462.95 2 L
3 H
N
222.9 417.95 264.57 435.95 R
7 X
V
0.5 H
0 X
N
281.24 417.95 322.9 435.95 R
7 X
V
0 X
N
265.9 426.95 279.65 426.95 2 L
3 H
N
375.9 381.95 417.57 399.95 R
7 X
V
0.5 H
0 X
N
434.24 381.95 475.9 399.95 R
7 X
V
0 X
N
418.9 390.95 432.65 390.95 2 L
3 H
N
302.39 481.02 310.4 489.95 308.33 478.13 305.36 479.58 4 Y
V
301.65 471.95 305.36 479.58 2 L
0.5 H
N
235.1 478.16 232.9 489.95 241.02 481.12 238.06 479.64 4 Y
V
241.9 471.95 238.06 479.64 2 L
N
297.85 442.42 301.15 453.95 304.46 442.42 301.15 442.42 4 Y
V
301.15 435.95 301.15 442.42 2 L
N
240.1 442.67 243.4 454.2 246.71 442.67 243.4 442.67 4 Y
V
243.4 436.2 243.4 442.67 2 L
N
297.6 406.68 300.9 418.22 304.21 406.68 300.9 406.68 4 Y
V
300.9 401.2 300.9 406.68 2 L
N
239.85 406.92 243.15 418.45 246.46 406.92 243.15 406.92 4 Y
V
243.15 401.44 243.15 406.92 2 L
N
454.63 409.53 462.65 418.45 460.58 406.63 457.61 408.08 4 Y
V
453.9 400.45 457.61 408.08 2 L
N
389.35 406.66 387.15 418.45 395.27 409.62 392.31 408.14 4 Y
V
396.15 400.45 392.31 408.14 2 L
N
460.6 442.42 463.9 453.95 467.21 442.42 463.9 442.42 4 Y
V
463.9 436.2 463.9 442.42 2 L
N
384.35 442.67 387.65 454.2 390.96 442.67 387.65 442.67 4 Y
V
387.65 436.45 387.65 442.67 2 L
N
384.6 478.67 387.9 490.2 391.21 478.67 387.9 478.67 4 Y
V
387.9 472.45 387.9 478.67 2 L
N
460.35 478.54 463.65 490.08 466.96 478.54 463.65 478.54 4 Y
V
463.65 472.33 463.65 478.54 2 L
N
161.46 388.62 188.57 397.62 R
7 X
V
0 11 Q
0 X
(Data) 161.46 390.29 T
154.24 495.06 188.57 504.06 R
7 X
V
0 X
(Screen) 154.24 496.73 T
145.35 459.06 188.01 468.06 R
7 X
V
0 X
(Window) 145.35 460.73 T
131.46 423.06 189.13 432.06 R
7 X
V
0 X
(Presentation) 131.46 424.73 T
J
128.04 483.5 495.27 483.5 2 L
J
128.04 483.5 131.79 483.5 2 L
N
[7.568 6.559] 7.568 I
131.79 483.5 491.51 483.5 2 L
N
J
491.51 483.5 495.27 483.5 2 L
N
J
128.04 447.63 495.27 447.63 2 L
J
128.04 447.63 131.79 447.63 2 L
N
[7.568 6.559] 7.568 I
131.79 447.63 491.51 447.63 2 L
N
J
491.51 447.63 495.27 447.63 2 L
N
J
128.54 410.63 495.77 410.63 2 L
J
128.54 410.63 132.29 410.63 2 L
N
[7.568 6.559] 7.568 I
132.29 410.63 492.01 410.63 2 L
N
J
492.01 410.63 495.77 410.63 2 L
N
J
82.21 329.66 494.07 361.38 R
7 X
V
0 X
-0.12 (FIGURE 4.1: Distinguishing styles of interface linkage in terms of the level of user and group) 82.21 354.05 P
(control.) 82.21 341.05 T
(\050a\051) 268.04 372.28 T
(\050b\051) 421.38 371.45 T
45.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "53" 53
%%Page: "54" 54
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(54) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.65 (is primarily concerned with the recording, preservation and presentation of information about user activities.) 63.65 737.62 P
0.05 (That is, the conference is the means by which a user might identify a collaborative activity in which they want) 63.65 724.62 P
-0.49 (to engage; the session is the means by which they catch up with ongoing activity and their own activity becomes) 63.65 711.62 P
(associated with the data \050and hence shared with other users\051.) 63.65 698.62 T
2 14 Q
(4.5 Design Concerns in Prospero) 63.65 671.62 T
0 11 Q
0.28 (The previous section highlighted some design themes. Each reflects a different set of concerns, but clearly all) 63.65 649.62 P
-0.31 (are relevant to overall issues in the interaction between system structure and user behaviour, and each is an area) 63.65 636.62 P
(where the provision of flexibility in a toolkit is important.) 63.65 623.62 T
0.2 (The two themes which will be explored in particular in this dissertation are) 63.65 603.62 P
3 F
0.2 (data distribution) 399.02 603.62 P
0 F
0.2 ( and) 472.88 603.62 P
3 F
0.2 (concurrency) 494.67 603.62 P
0.54 (and exclusion management) 63.65 590.62 P
0 F
0.54 ( \050which, for convenience, I will jointly describe as) 184.48 590.62 P
3 F
0.54 (distributed data management) 413.22 590.62 P
0 F
0.54 (\051.) 543.23 590.62 P
-0.36 (There are two reasons for this narrowing of focus. The first is purely practical; any effort must start somewhere.) 63.65 577.62 P
-0.54 (The second reason is that these are the areas of greatest leverage. Tackling the problems of distributed data man-) 63.65 564.62 P
0.65 (agement provides a base for handling issues in activity representation and user interface linkage. Distributed) 63.65 551.62 P
(data management subsumes both.) 63.65 538.62 T
2 12 Q
(4.5.1  Distributed Data Management subsumes Activity Representation) 63.65 514.95 T
0 11 Q
0.54 (In supporting flexibility in the representation of user and group activities\321flexibility intended to support the) 63.65 497.62 P
-0.14 (creation of varied applications and styles of use\321the primary problem is in the separation and identification of) 63.65 484.62 P
0.14 (related activities. As will be the discussed in Chapter 5, CSCW systems traditionally take a fairly simple view) 63.65 471.62 P
0.06 (of user action, which supports the illusion of a) 63.65 458.62 P
3 F
0.06 (single stream of activity) 270.73 458.62 P
0 F
0.06 (, partitioned in time or space between a) 376.32 458.62 P
-0.62 (number of users. This simplifies distributed data processing tremendously since, even when data objects are rep-) 63.65 445.62 P
-0.27 (licated, there is only ever one single stream of activity over the specific data representations. However, Chapter) 63.65 432.62 P
0.8 (5 will introduce an alternative mechanism which directly supports multiple, parallel streams of activity. Not) 63.65 419.62 P
0.16 (only is this a better match to the actual patterns of user activity, but it is also a necessary step toward the level) 63.65 406.62 P
(of flexibility and scalability in data management which is required.) 63.65 393.62 T
0.14 (At the same time, however, it creates a new abstraction which gives the programmer direct access to encapsu-) 63.65 373.62 P
0.37 (lations of user activity. This separation between the activities of different users or groups in turn provides for) 63.65 360.62 P
0.06 (distinctions between styles of activity representation within the user interface. As such, then, the data distribu-) 63.65 347.62 P
0.03 (tion and control model which will be introduced is also, critically, the basis for flexibility in representations of) 63.65 334.62 P
(activity.) 63.65 321.62 T
2 12 Q
(4.5.2  Distributed Data Management subsumes User Interface Linkage) 63.65 297.95 T
0 11 Q
-0.53 (The structure of \336gure 4.1 shows that the variety of interface linkage in CSCW systems can be analysed in terms) 63.65 280.62 P
0.17 (of the level at which control passes from a single user to the group. In \336gure 4.1, there are four levels \050screen,) 63.65 267.62 P
-0.21 (window) 63.65 254.62 P
-0.21 (, presentation and data\051, although more can be incorporated. In this model, where a single user has con-) 98.38 254.62 P
1.2 (trol over window placement, size, view and representation of the shared workspace, the user interfaces are) 63.65 241.62 P
0.04 (\322loosely coupled\323. In \322tightly coupled\323 mode, on the other hand, more facets of the presentation \050in particular) 63.65 228.62 P
0.04 (,) 546.9 228.62 P
-0.52 (traditionally) 63.65 215.62 P
-0.52 (, the representation used and the view of the shared workspace presented in a window\051 will be under) 116.71 215.62 P
1.49 (group control rather than user control. The meaning of \322control\323, in this case, concerns the way in which) 63.65 202.62 P
-0.19 (changes are communicated to the group. Some aspect of user interface behaviour which is under \322user control\323) 63.65 189.62 P
0.14 (can be modi\336ed by the user without af) 63.65 176.62 P
0.14 (fecting the equivalent aspects of other users\325 interfaces; whereas, if it is) 233.41 176.62 P
0.36 (under \322group control\323, there may be a protocol restricting access or changes, and any change introduced by a) 63.65 163.62 P
0.66 (single user will be communicated to other members of the group \050by being re\337ected in changes in their user) 63.65 150.62 P
-0.06 (interfaces\051. In other words, decisions about user interface linkage are concerned with which aspects of the user) 63.65 137.62 P
(interface components are shared by the group, and which are privately controlled by individuals.) 63.65 124.62 T
-0.27 (This characterisation of interface linkage in terms of information sharing leads to an obvious simplification. By) 63.65 104.62 P
0.19 (its very nature, a CSCW system already provides a mechanism to control data sharing\321the standard data dis-) 63.65 91.62 P
FMENDPAGE
%%EndPage: "54" 54
%%Page: "55" 55
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit.) 364.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(55) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.16 (tribution and control mechanism which is used for application data. This same mechanism can also be used to) 45.65 737.62 P
0.8 (share, distribute and manage access to) 45.65 724.62 P
3 F
0.8 (user interface) 221.22 724.62 P
0 F
0.8 ( data. When this happens, user interface linkage can be) 282.82 724.62 P
-0.13 (managed by placing aspects of the user interface controls into the shared workspace; and control over interface) 45.65 711.62 P
-0.2 (linkage is achieved through control over which aspects of the user interface components are shared in this way.) 45.65 698.62 P
-0.25 (So, within a toolkit or application, we can achieve considerable control over the extent of user interface linkage) 45.65 685.62 P
0.05 (available to us by giving the programmer or user control over the way in which user interface components can) 45.65 672.62 P
(be selectively moved in to, and out of, the shared workspace.) 45.65 659.62 T
-0.45 (One way to conceptualise this is to think of a CSCW system which provides users with a view over some shared) 45.65 639.62 P
0.12 (data space \050such as in a collaborative drawing tool, for instance\051. Conceptually, the user interface is a window) 45.65 626.62 P
-0.65 (onto a shared data space lying behind. The proposal, then, is that user interface components in the user\325s window) 45.65 379.62 P
0.13 (can be \322pushed through\323 to the shared data space behind, taking on shared semantics \050as shown in figure 4.2\051.) 45.65 366.62 P
-0.38 (So, a scroll bar which is at the user window level provides control over the user\325s own view, and changes to that) 45.65 353.62 P
0.08 (scroll bar do not affect the other user\325s view; the scroll bar, and its control data, is local and private. However,) 45.65 340.62 P
-0.29 (when the scroll bar is \322pushed through\323 to the shared workspace, it becomes a shared scroll bar, controllable by) 45.65 327.62 P
-0.1 (either user \050under whatever access control mechanism or floor control policy applies to the shared workspace\051,) 45.65 314.62 P
(and with shared effect.) 45.65 301.62 T
2 14 Q
(4.6 Communicating Application Semantics) 45.65 274.62 T
0 11 Q
0.27 (Clearly, the key design criterion here is flexibility. It is, after all, in pursuit of a new, deep form of toolkit tai-) 45.65 252.62 P
0.64 (lorability that Prospero adopts the reflective approach. This flexibility is intended to address issues of use as) 45.65 239.62 P
0.42 (well as issues of design; and hence much of the control over the parameters of system flexibility comes from) 45.65 226.62 P
-0.16 (\322above\323. Variability in purposes and usage patterns drives flexibility in application areas and in user and group) 45.65 213.62 P
(interaction, which in turn drives flexibility in data representations and distribution control, etc.) 45.65 200.62 T
-0.29 (Traditional models of abstraction in toolkit building work in the opposite direction. Designing a language, tool-) 45.65 180.62 P
1.05 (kit or other infrastructural system inevitably involves making decisions, which then become articulated and) 45.65 167.62 P
1.08 (embodied in the system\325s implementation. These decisions\321whatever their details might be\321constrain the) 45.65 154.62 P
0.4 (actions and behaviour of applications which are built on top of the infrastructure. So, instead of requirements) 45.65 141.62 P
0.63 (and needs flowing down from the top\321from use, to application, to infrastructure\321we actually observe con-) 45.65 128.62 P
(straints flowing upwards from the bottom\321from the infrastructure, to applications, to forms of use.) 45.65 115.62 T
45.65 87.95 531.65 744.95 C
79.57 393.75 497.73 622.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
219.66 519.75 359.67 592.93 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
90 450 10 5.36 245.38 561.86 A
277.52 560.78 292.52 572.93 R
N
261.09 542.21 275.38 551.5 R
N
320.38 549.36 338.95 562.21 R
N
90 450 10.36 5 297.88 549.35 A
255.38 562.93 277.24 566.29 2 L
N
292.52 565.78 320.38 555.78 2 L
N
275.38 547.21 287.24 549.04 2 L
N
268.24 551.5 285.02 560.78 2 L
N
232.24 541.04 279.24 573.29 R
1 H
3 X
N
265.88 552.68 312.88 584.93 R
N
212.12 460.4 259.12 492.65 R
N
320.62 460.9 367.62 493.15 R
N
338.75 503.88 344.12 493.15 333.88 499.4 336.31 501.64 4 Y
V
289.38 552.68 336.32 501.64 2 L
N
242.45 502.52 235.62 492.65 236.18 504.63 239.32 503.58 4 Y
V
251.99 541.04 239.32 503.57 2 L
N
371.57 460.23 379.34 493 R
7 X
V
0.5 H
0 X
N
373.79 483 377.12 490.23 R
7 X
V
0 X
N
373.79 472.45 377.12 479.67 1.67 RR
7 X
V
0 X
N
373.23 464.6 375.7 468.7 377.73 464.29 3 Y
7 X
V
0 X
N
262.9 460.23 270.68 493 R
7 X
V
0 X
N
265.12 483 268.46 490.23 R
7 X
V
0 X
N
265.12 472.45 268.46 479.67 1.67 RR
7 X
V
0 X
N
264.57 464.6 267.03 468.7 269.07 464.29 3 Y
7 X
V
0 X
N
346.9 524.89 354.68 557.67 R
7 X
V
0 X
N
349.12 547.67 352.46 554.89 R
7 X
V
0 X
N
349.12 537.12 352.46 544.34 1.67 RR
7 X
V
0 X
N
348.57 529.26 351.03 533.36 353.07 528.95 3 Y
7 X
V
0 X
N
316.23 455.12 384.9 498.45 R
N
206.23 454.45 274.9 497.79 R
N
278.65 495.93 266.89 493.54 275.6 501.8 277.12 498.87 4 Y
3 X
V
346.23 534.87 277.13 498.87 2 L
1 H
N
370.51 504.29 374.89 493.12 365.25 500.27 367.88 502.28 4 Y
V
350.9 524.45 367.88 502.28 2 L
N
82.32 387.95 487.48 436.45 R
7 X
V
0 11 Q
0 X
1.59 (FIGURE 4.2: Using the shared workspace for user interface linkage. The two interfaces) 82.32 429.12 P
0.06 (shown on the bottom have different views into the shared object space, but they share a tool) 82.32 416.12 P
(palette.) 82.32 403.12 T
45.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "55" 55
%%Page: "56" 56
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(56) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.18 (This is exactly the problem\321application requirements pushing down against implementation constraints push-) 63.65 737.62 P
4.05 (ing up\321which the Open Implementation approach addresses. Essentially, the characteristic of Open) 63.65 724.62 P
0.89 (Implementation which will be employed in the next few chapters is its provision for exploiting higher-level) 63.65 711.62 P
-0.49 (semantics in lower-level system components. The information which is passed down is not only a set of require-) 63.65 698.62 P
1.93 (ments but also an account of how these requirements are realised. By appeal to reflective models, Open) 63.65 685.62 P
-0.21 (Implementation allows clients to specify not only) 63.65 672.62 P
3 F
-0.21 (what) 282.45 672.62 P
0 F
-0.21 ( is to be done, but also aspects of) 303.84 672.62 P
3 F
-0.21 (how) 449.79 672.62 P
0 F
-0.21 ( it is to be done, so) 468.12 672.62 P
(that the specific details of the client\325s behaviour can be used to specialise the implementation.) 63.65 659.62 T
2 14 Q
(4.7 An Overview of Prospero) 63.65 632.62 T
0 11 Q
-0.35 (So far, I have dealt largely with general issues motivating the application of the Open Implementation approach) 63.65 610.62 P
-0.39 (to CSCW, and some design issues which arise as a result. The next two chapters will be concerned with specific) 63.65 597.62 P
-0.37 (techniques developed in Prospero, a prototype OI CSCW toolkit. While the details of Prospero will be unfolded) 63.65 584.62 P
-0.08 (in those discussions of particular techniques and areas of concern, it is appropriate to preface those discussions) 63.65 571.62 P
-0.5 (with a high level description of Prospero and some background on what role it plays, how it appears to program-) 63.65 558.62 P
(mers, and the general concerns of the role which computational reflection plays in its design and use.) 63.65 545.62 T
2 12 Q
(4.7.1  Base Level Programming in Prospero) 63.65 521.95 T
0 11 Q
0.43 (Prospero is designed as a toolkit for building CSCW applications. Its users are programmers, who are in turn) 63.65 504.62 P
1.29 (designing applications to support cooperative work. The abstractions which Prospero offers, then, are ones) 63.65 491.62 P
-0.56 (which can be used to support cooperative work. The basic abstractions which it presents are divergence and syn-) 63.65 478.62 P
1.18 (chronisation of) 63.65 465.62 P
3 F
1.18 (streams) 135.05 465.62 P
0 F
1.18 ( of) 169.27 465.62 P
3 F
1.18 (actions) 186.28 465.62 P
0 F
1.18 ( \050to be discussed in Chapter 5\051 and consistency management through the) 218.06 465.62 P
-0.11 (exchange of) 63.65 452.62 P
3 F
-0.11 (promises) 119.64 452.62 P
0 F
-0.11 ( and) 159.36 452.62 P
3 F
-0.11 (guarantees) 180.53 452.62 P
0 F
-0.11 ( \050to be discussed in Chapter 6\051. Programmers use streams, actions, prom-) 229.41 452.62 P
0.26 (ises and guarantees to describe and implement their CSCW applications. These abstractions and the functions) 63.65 439.62 P
-0.49 (for their manipulation \050creating them, and using them to support cooperation\051 constitute the base level interface.) 63.65 426.62 P
2 12 Q
(4.7.2  Metalevel Programming in Prospero) 63.65 402.95 T
0 11 Q
0.25 (Prospero is implemented in CLOS \050CMU Common Lisp 17c, with an optimised CLOS implementation based) 63.65 385.62 P
-0.16 (on PCL of September 1992\051. As already discussed, CLOS is a reflective language; however, reflection in Pros-) 63.65 372.62 P
0.89 (pero is independent of reflection in CLOS. Prospero, and the abstractions it employs to support cooperative) 63.65 359.62 P
0.73 (applications and reflective processing over those abstractions, could also be implemented in a non-reflective) 63.65 346.62 P
-0.39 (language. The style of Prospero, however, lends it more to implementation in a symbolic, dynamic language, so) 63.65 333.62 P
-0.25 (it would be easier \050or more natural\051 to reimplement in Smalltalk than in C++. The general principles which will) 63.65 320.62 P
0.26 (be discussed in the following chapters, however, are independent of the implementation language, and in par-) 63.65 307.62 P
(ticular, are independent of the language\325s reflective facilities.) 63.65 294.62 T
-0.27 (Just as reflection in CLOS is used to give the programmer control over aspects of its implementation, reflection) 63.65 274.62 P
-0.47 (is used in Prospero to give the application programmer control over the strategies which Prospero uses to imple-) 63.65 261.62 P
0.26 (ment the abstractions offered at the base level interface. The metalevel interface comprises those mechanisms) 63.65 248.62 P
-0.31 (which provide metalevel control. This is done through a metaobject protocol. In other words, Prospero does not) 63.65 235.62 P
-0.42 (provide a set of functions which change specific aspects of its implementation, but rather it makes internal com-) 63.65 222.62 P
0.32 (ponents available as metaobjects, and documents the protocol by which they are related. Abstractions such as) 63.65 209.62 P
0.09 (\322stream\323 and \322promise\323 are) 63.65 196.62 P
3 F
0.09 (used) 188.65 196.62 P
0 F
0.09 ( at the base level; but they are) 208.81 196.62 P
3 F
0.09 (themselves) 343.38 196.62 P
0 F
0.09 ( the direct objects of attention at the) 391.03 196.62 P
(metalevel, through which issues such as synchronisation and editing can be reached \050as shown in figure 4.3\051.) 63.65 183.62 T
-0.5 (The metaobject protocol approach to reflective programming, as presented in CLOS, was discussed earlier \050sec-) 63.65 163.62 P
-0.57 (tion 3.4.3\051. Just as in CLOS, Prospero\325s metaobject protocol approach to reflection uses subclassing, inheritance) 63.65 150.62 P
-0.22 (and specialisation as mechanisms to effect metalevel control. As discussed earlier, subclassing, inheritance and) 63.65 137.62 P
0.71 (specialisation are not, themselves, reflective techniques. Reflection arises in the way in which this control is) 63.65 124.62 P
0.07 (related to the base level; in particular, in the way that the focus of attention at the metalevel is the explicit rep-) 63.65 111.62 P
FMENDPAGE
%%EndPage: "56" 56
%%Page: "57" 57
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit.) 364.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(57) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0 (resentations of the abstractions used at the base level. The same relationship characterises the reflective link in) 45.65 737.62 P
(3-Lisp, even though 3-Lisp does not model it in terms of object-oriented programming mechanisms.) 45.65 724.62 T
0.16 (For the purposes of this dissertation, Prospero is designed as a demonstration of the value of Open Implemen-) 45.65 499.12 P
-0.24 (tation applied to CSCW. In Chapter 7, examples will be presented of applications built using Prospero, to show) 45.65 486.12 P
0.26 (how Prospero\325s reflection can be used by programmers to tailor the toolkit to specific application needs. Data) 45.65 473.12 P
-0.24 (distribution and consistency management are the particular areas which Prospero opens up to programmer con-) 45.65 460.12 P
-0.44 (trol. Clearly, a number of other areas \050and, as previously demonstrated, the relationships between them\051 are also) 45.65 447.12 P
1.94 (critical to the design of effective, flexible CSCW systems, but are beyond the scope of this dissertation.) 45.65 434.12 P
-0.63 (Although this chapter has already discussed some of these areas in general, it is valuable to discuss some of them) 45.65 421.12 P
-0.14 (here in the context of Prospero in particular, to explore their consequences and help frame the discussion in the) 45.65 408.12 P
(chapters which follow.) 45.65 395.12 T
2 F
(4.7.2.1  User Interface) 45.65 368.12 T
0 F
-0.49 (Prospero does not provide functions for user interface construction or management. Instead, it relies upon exter-) 45.65 351.12 P
(nal facilities provided in whatever environment is available.) 45.65 338.12 T
0.67 (Clearly, user interface issues are critical to the development of successful CSCW applications. More signifi-) 45.65 318.12 P
0.53 (cantly, here, this dissertation pursues an argument on the relationship between user interface and \322low level\323) 45.65 305.12 P
1.06 (systems issues in CSCW design. From this perspective, then, it might seem unusual that Prospero does not) 45.65 292.12 P
(include such facilities.) 45.65 279.12 T
-0 (There are two significant points here. The first is that the argument I have pursued on the relationship between) 45.65 259.12 P
-0.31 (user interface and infrastructure design focuses particularly on the architectural issues in infrastructure, arguing) 45.65 246.12 P
-0.15 (that they should be opened up to make them accessible from higher levels, so that precisely this issue about the) 45.65 233.12 P
0.46 (relationship of interface and infrastructure can be addressed. It is this \322opening up\323 which Prospero serves to) 45.65 220.12 P
0.91 (demonstrate. The second, and consequent, point is that this mechanism is then generally independent of the) 45.65 207.12 P
(mechanism by which buttons, scroll bars and graphical objects are managed at the interface.) 45.65 194.12 T
1.3 (In the applications which will be shown, the user interfaces have been constructed and managed using the) 45.65 174.12 P
-0.37 (Garnet user interface software \050Myers et al., 1990\051. Garnet\325s user interface model is presented in terms of a pro-) 45.65 161.12 P
0.86 (totype-based object system with dynamic constraints, and specialisable interactors to encapsulate interactive) 45.65 148.12 P
0.4 (behaviours independent of the graphical structures with which they are associated. As it turns out, this model) 45.65 135.12 P
-0.1 (fits easily and naturally with the mechanisms used in Prospero. Indeed, the interactors mechanism would be an) 45.65 122.12 P
(obvious starting-point for extensions of Prospero\325s approach into the user interface domain.) 45.65 109.12 T
45.65 87.95 531.65 744.95 C
79.7 515.45 497.6 720.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
175.21 588.95 355.21 634.95 R
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 10 Q
(<stream>) 184.71 614.95 T
(<guarantee>) 191.21 593.95 T
(<promise>) 224.21 618.95 T
272.21 634.95 272.21 589.2 2 L
N
(synchronisation) 282.21 619.45 T
(editing) 303.46 601.7 T
90 450 18.88 6.12 316.83 604.08 A
90 450 33.62 7.75 313.33 621.45 A
(<action>) 210.71 604.45 T
174.71 645.45 355.21 645.45 2 L
1 H
N
(Prospero) 247.71 578.45 T
368.21 635.45 368.21 589.45 2 L
N
221.53 696.45 284.53 696.45 2 L
0.5 H
N
231.53 689.45 294.53 689.45 2 L
N
218.03 676.95 281.03 676.95 2 L
N
212.03 683.95 239.03 683.95 2 L
N
257.03 683.95 302.03 683.95 2 L
N
249.03 669.95 321.03 669.95 2 L
N
236.46 644.55 231.21 635.45 225.96 644.55 231.21 644.55 4 Y
V
231.21 665.95 231.21 644.55 2 L
3 H
N
275.96 656.86 281.21 665.95 286.46 656.86 281.21 656.86 4 Y
V
281.21 656.86 281.21 637.45 2 L
N
379.01 617.49 368.2 618.95 374.87 627.59 376.94 622.54 4 Y
V
293.99 360 21.5 41.5 368.21 660.45 A
0 90 66 29 323.21 661.45 A
81.37 519.95 494.54 565.95 R
7 X
V
0 11 Q
0 X
0.43 (FIGURE 4.3: Base and meta-level in Prospero. Prospero offers abstractions and mechanisms) 81.37 558.62 P
0.67 (for building collaborative applications, as well as meta-level control over the ways in which) 81.37 545.62 P
(those abstractions and behaviours are realised.) 81.37 532.62 T
45.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "57" 57
%%Page: "58" 58
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(58) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.21 (Since Prospero does not manage the user interface itself, it also has no way to handle the management of user) 63.65 737.62 P
-0.26 (events and their relationship to system events. In the longer examples in Chapter 7, ways of managing this rela-) 63.65 724.62 P
(tionship will be shown.) 63.65 711.62 T
2 F
(4.7.2.2  Session Management) 63.65 684.62 T
0 F
0.04 (Prospero provides no direct support for session management. This includes a number of areas of functionality,) 63.65 667.62 P
(including finding and naming sessions, and catching-up with existing sessions.) 63.65 654.62 T
-0.59 (Within the Prospero model, session discovery and session-based resource discovery are, largely, temporally iso-) 63.65 634.62 P
2.89 (lated, occurring in the initialisation phase. This provides an opportunity to exploit an external session) 63.65 621.62 P
0.48 (management facility. As an ongoing activity, on the other hand, sessions provide a context for the naming of) 63.65 608.62 P
0.09 (resources \050by delimiting a scope\051. An object-naming mechanism is used in the examples in Chapter 7 to avoid) 63.65 595.62 P
1.52 (potential name conflicts, but a fuller implementation would locate these naming issues along with session) 63.65 582.62 P
(management.) 63.65 569.62 T
2 F
(4.7.2.3  Network Interface) 63.65 542.62 T
0 F
-0.4 (Prospero does not provide access to the underlying network interface. The implementation uses CMU Common) 63.65 525.62 P
-0.34 (Lisp\325s \322Wire\323 package for Lisp-based remote execution, but this is neither visible from the base level nor avail-) 63.65 512.62 P
(able for manipulation at the metalevel.) 63.65 499.62 T
-0.53 (There are a number of reasons for this. The first, and most mundane, is that there is no commonly-accepted stan-) 63.65 479.62 P
0.95 (dard for interprocess communication in Common Lisp, and so access to this level of communication would) 63.65 466.62 P
-0.12 (render the toolkit hopelessly implementation-specific. The second reason, also primarily a practical concern, is) 63.65 453.62 P
0.79 (that interprocess communication is itself a black box offered within the language \050and often, as in this case,) 63.65 440.62 P
-0.18 (implemented as through a foreign-function interface to a library written in another programming language\051. As) 63.65 427.62 P
(a consequence, it offers no opportunity for reflective introspection and intercession.) 63.65 414.62 T
-0.25 (In contrast, the third reason is higher-level design issue. The goals of Open Implementation are to provide prin-) 63.65 394.62 P
-0.21 (cipled access to the underlying implementation, and to provide this in such a way that it can be effectively used) 63.65 381.62 P
-0.06 (to control those strategies relevant for higher-level use of the abstraction. The implication, as considered in the) 63.65 368.62 P
-0.29 (earlier sections of this chapter, is that the reflective representation through which this can be achieved, is, itself,) 63.65 355.62 P
0.09 (a representation. It is crafted with particular purposes in mind and, like any other representation, it hides some) 63.65 342.62 P
1.18 (aspects and accentuates others. In other words, this representation abstracts over the specifics of any given) 63.65 329.62 P
-0.44 (implementation, so as to be portable across implementations, and to focus on particular issues from the perspec-) 63.65 316.62 P
(tive of the base level interface.) 63.65 303.62 T
1.15 (Network communication and data communication are managed in Prospero through the use of streams and) 63.65 283.62 P
0.21 (actions, to be introduced in Chapter 5. These are realised as metaobjects, so that they are, in turn, the terms in) 63.65 270.62 P
-0.31 (which modifications to the implementation strategy are given. The application programmer can use Prospero to) 63.65 257.62 P
-0.1 (gain control over these strategy decisions without \322falling down\323 to an implementation layer below; and so the) 63.65 244.62 P
0.89 (data management facilities in Prospero do not deal in the specifics of hosts, network addresses, sockets and) 63.65 231.62 P
(server processes.) 63.65 218.62 T
2 F
(4.7.2.4  Conceptual Separation and Areas of Concern) 63.65 191.62 T
0 F
0.09 (On one level, the inclusion and exclusion of different areas of concern is problematic in an Open Implementa-) 63.65 174.62 P
0.59 (tion, since the OI approach talks directly about the potential interactions between issues on either side of the) 63.65 161.62 P
1.15 (abstraction barrier \050between the clients and the implementation\051. However, the goal of) 63.65 148.62 P
3 F
1.15 (principled) 459.97 148.62 P
0 F
1.15 ( access to) 505.19 148.62 P
-0.15 (implementation strategies and decisions to which OI is directed) 63.65 135.62 P
3 F
-0.15 (requires) 344.31 135.62 P
0 F
-0.15 ( the exercise of just this sort of partial-) 380.97 135.62 P
(ity. Two points are relevant here.) 63.65 122.62 T
FMENDPAGE
%%EndPage: "58" 58
%%Page: "59" 59
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit.) 364.54 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(59) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.86 (First, the goal of opening up an abstraction is to make it amenable to particular forms of manipulation. The) 45.65 737.62 P
-0.19 (reflective representations which might be offered are, quite specifically,) 45.65 724.62 P
3 F
-0.19 (representations) 363.15 724.62 P
0 F
-0.19 ( of the system\325s imple-) 431.59 724.62 P
1.1 (mentation \050rather than, at the other extreme, simply the source code of the particular implementation being) 45.65 711.62 P
-0.27 (used\051. This is done for two reasons: first, to provide conceptual leverage in the meta-code, so that strategies can) 45.65 698.62 P
-0.63 (be described at a relatively high level, close to the model used in the base code, rather than in the implementation) 45.65 685.62 P
0.75 (itself; and second, to make the representation independent of the specific implementation \050as in the multiple) 45.65 672.62 P
3.4 (implementations of the CLOS MOP, offering the same metaobject protocol over different underlying) 45.65 659.62 P
(implementations\051.) 45.65 646.62 T
-0.33 (Second, conceptual separation is an important feature in the design of an Open Implementation. The open facil-) 45.65 626.62 P
0.28 (ities should be structured so as to allow a programmer to focus on particular areas of implementation strategy) 45.65 613.62 P
-0.07 (\050particular mapping decisions, or sets of related decisions\051. If the metalevel is to be usable, it must provide this) 45.65 600.62 P
0.06 (sort of structure. The corollary of this principle of conceptual separation is that we should be able to talk, rela-) 45.65 587.62 P
2.25 (tively independently, about the different areas of concern which we wish to \322open up\323 within an Open) 45.65 574.62 P
(Implementation.) 45.65 561.62 T
-0.46 (As a result, then, we can use specific areas\321in this case, distributed data management and consistency manage-) 45.65 541.62 P
0.18 (ment\321to illustrate the application of the Open Implementation approach to toolkit concerns in CSCW, and to) 45.65 528.62 P
0.17 (demonstrate the gains which result, without having to open up absolutely everything. In the course of Chapter) 45.65 515.62 P
0.11 (5 and 6, as the specific techniques in Prospero are detailed, they will be focussed on specific areas of concern,) 45.65 502.62 P
(and specific problems which emerge in current approaches to their implementation in toolkits.) 45.65 489.62 T
2 14 Q
(4.8 Summary) 45.65 462.62 T
0 11 Q
0.67 (Drawing on the problems with toolkit flexibility in Chapter 2, and the Open Implementation approach intro-) 45.65 440.62 P
0.03 (duced in Chapter 3, this chapter has set out the issues addressed in the design of Prospero. Drawing on a set of) 45.65 427.62 P
0.69 (design desiderata for metalevel systems, it introduced five areas of specific concern in the design of flexible) 45.65 414.62 P
0.04 (support for CSCW applications. These are areas of traditionally low-level design concerns, and which are typ-) 45.65 401.62 P
1.63 (ically locked behind the abstraction barriers of the toolkit. However, earlier chapters have shown that the) 45.65 388.62 P
-0.36 (decisions made at these levels can have a significant impact on the forms of collaboration and interaction which) 45.65 375.62 P
-0.02 (applications can support. So it is at this level that a toolkit can employ information from above\321semantic fea-) 45.65 362.62 P
-0.41 (tures of the application and the domain\321to resolve implementation decisions in the light of specific application) 45.65 349.62 P
(needs.) 45.65 336.62 T
0.18 (There are two areas which Prospero deals with in particular\321the management of distributed data, and control) 45.65 316.62 P
0.11 (over consistency. These two areas, and the techniques which Prospero introduces to provide programmer con-) 45.65 303.62 P
(trol over them, will be the subjects of the next two chapters.) 45.65 290.62 T
-0.06 (This approach of exploiting application semantics within the infrastructure is one which will be applied first to) 45.65 270.62 P
(data distribution \050replication and access\051, and then to consistency management.) 45.65 257.62 T
FMENDPAGE
%%EndPage: "59" 59
%%Page: "60" 60
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 4: Applying Reflection in a CSCW Toolkit) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(60) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
FMENDPAGE
%%EndPage: "60" 60
%%Page: "61" 61
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work.) 315.03 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(61) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Chapter 5:) 45.65 674.29 T
-0.37 (Divergence, Data Management and Collaborative) 45.65 646.29 P
(W) 45.65 618.29 T
(ork) 66.02 618.29 T
2 14 Q
(5.1  Introduction: Distributed Data Management) 45.65 552.42 T
0 11 Q
0.49 (Collaborative applications coordinate activities which may be distributed in time and/or space. Distributed in) 45.65 530.42 P
-0.07 (time, activities may take place at different moments but are coordinated to achieve a unified effect \050such as the) 45.65 517.42 P
-0.57 (production of a document\051. Distributed in space, activities may take place on different computers perhaps linked) 45.65 504.42 P
-0.21 (by a data network, over notionally shared artifacts and representations. So collaborative applications are heir to) 45.65 491.42 P
0.61 (a set of design problems which have arisen in the development of distributed systems concerning distributed) 45.65 478.42 P
(data management.) 45.65 465.42 T
-0.46 (In this chapter, I consider strategies to meet the conflicting demands placed on collaborative applications in pre-) 45.65 445.42 P
1.66 (senting users with a single, uniform data \322space\323. I present a new model of distributed data management) 45.65 432.42 P
-0.16 (specifically for collaborative work, and show how it is developed and used in Prospero. I am primarily \050but not) 45.65 419.42 P
1.43 (exclusively\051 concerned here with \322user data\323; that is, largely the computational representations of artifacts) 45.65 406.42 P
0.68 (which are manipulated directly by the system\325s users. So, in a collaborative writing system, user data would) 45.65 393.42 P
-0.44 (include the representation of the document, or of users\325 activities over that document, rather than data structures) 45.65 380.42 P
-0.09 (controlling the system\325s own behaviour. This focus is reflected when establishing requirements and criteria for) 45.65 367.42 P
-0.51 (data management strategies, although \050as highlighted in Chapter 4\051 the distinction between user and system data) 45.65 354.42 P
(will emerge as less than clean-cut; for instance, representations of user activity straddle this distinction.) 45.65 341.42 T
0.01 (I will begin by examining aspects of the problem\321the criteria by which strategies are evaluated, and the ways) 45.65 321.42 P
-0.22 (in which CSCW systems have addressed these problems, particularly drawing from the distributed systems tra-) 45.65 308.42 P
-0.45 (dition. As has already been outlined, traditional distributed systems algorithms do not map easily onto the needs) 45.65 295.42 P
0.59 (of collaborative systems, because of their implications for interaction; and in a toolkit, we need to be able to) 45.65 282.42 P
-0.42 (support a wide range of interactive strategies for different applications. After setting out the scope of the discus-) 45.65 269.42 P
0.59 (sion, I will characterise the standard approaches in terms of) 45.65 256.42 P
3 F
0.59 (inconsistency avoidance) 315.77 256.42 P
0 F
0.59 (, rather than) 423.58 256.42 P
3 F
0.59 (consistency) 480.94 256.42 P
-0.55 (management) 45.65 243.42 P
0 F
-0.55 (. I will then outline an alternative model, based on cycles of) 101.86 243.42 P
3 F
-0.55 (divergence) 361.01 243.42 P
0 F
-0.55 ( and) 409.26 243.42 P
3 F
-0.55 (synchronisation) 429.54 243.42 P
0 F
-0.55 (, which) 499.82 243.42 P
1.91 (satisfies the flexibility requirements discussed in earlier chapters. After introducing this divergence-based) 45.65 230.42 P
0.57 (model, and discussing its the advantages in collaborative settings, I will present a series of brief examples to) 45.65 217.42 P
(illustrate how it can be used.) 45.65 204.42 T
2 14 Q
(5.2  Criteria) 45.65 177.42 T
0 11 Q
0.04 (Distributed data management systems attempt to meet a range of criteria to greater or lesser degrees. Different) 45.65 155.42 P
(applications or domains will emphasise different criteria, but some of the central ones are:) 45.65 142.42 T
(1.) 45.65 122.42 T
3 F
0.23 (A) 59.18 122.42 P
0.23 (vailability) 65.3 122.42 P
0 F
0.23 (. Users should be able to gain access to data when they need it, wherever it might be in the net-) 109.2 122.42 P
(work;) 59.18 109.42 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 61
%%Page: "62" 62
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(62) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
(2.) 63.65 737.62 T
3 F
1.22 (T) 77.18 737.62 P
1.22 (ranspar) 82.69 737.62 P
1.22 (ency) 117.12 737.62 P
0 F
1.22 (. Users should not have to worry about the details of distribution or the implementation in) 136.56 737.62 P
(order to use shared data;) 77.18 724.62 T
(3.) 63.65 705.62 T
3 F
0.69 (Consistency) 77.18 705.62 P
0.69 (.) 129.74 705.62 P
0 F
0.69 ( Data items may be accessed from dif) 132.49 705.62 P
0.69 (ferent points in the network. Users should see identical) 302.43 705.62 P
-0.1 (\050or) 77.18 692.62 P
-0.1 (, at least, consistent\051 views of shared data, even though they may be working at dif) 89.57 692.62 P
-0.1 (ferent places or dif) 451.48 692.62 P
-0.1 (fer-) 533.78 692.62 P
(ent times;) 77.18 679.62 T
(4.) 63.65 660.62 T
3 F
(Responsiveness) 77.18 660.62 T
0 F
(. Data management should not interfere with the system\325) 145.62 660.62 T
(s interactive response.) 394.61 660.62 T
-0.46 (Unfortunately \050if predictably\051, these place conflicting demands on an implementation. For example, availability) 63.65 643.62 P
0.28 (can be enhanced by maintaining multiple copies of the data on different network nodes. However, this \322repli-) 63.65 630.62 P
-0.64 (cation\323 approach conflicts with consistency, since it potentially introduces the opportunity for two users to make) 63.65 617.62 P
0.34 (simultaneous incompatible changes to two copies of the same piece of data. Various strategies can be used to) 63.65 604.62 P
-0.25 (avoid or resolve these conflicts, but these, in turn, endanger transparent operation, by introducing more ways in) 63.65 591.62 P
-0.35 (which users can be exposed to the consequences and details of data distribution. Mechanisms can be introduced) 63.65 578.62 P
0.1 (to maintain coordination between the replicas behind the scenes, but the processing involved to ensure consis-) 63.65 565.62 P
0.7 (tency may interfere with responsiveness. Different systems have different requirements, and must give these) 63.65 552.62 P
(criteria differing priorities.) 63.65 539.62 T
0.34 (These problems are endemic to a wide range of traditional distributed computing systems, such as distributed) 63.65 519.62 P
-0.57 (databases and distributed file systems, and solutions have been developed in these domains. Similarly, problems) 63.65 506.62 P
-0.31 (of distributed data management have been addressed by the CSCW toolkits discussed in previous chapters. The) 63.65 493.62 P
0.69 (critical distinction between \050most\051 CSCW applications and \050most\051 distributed systems is the role of user and) 63.65 480.62 P
-0.13 (group interaction over distributed data. First, distributed data is often directly represented and manipulated in a) 63.65 467.62 P
0.26 (user interface, which significantly increases the response time requirements of the system. Second, the shared) 63.65 454.62 P
-0.09 (data space is a critical channel of communication between users \050Dourish and Bellotti, 1992\051 and so the choice) 63.65 441.62 P
-0.25 (of data management strategy may affect the patterns of group interaction. For instance, a system which ensured) 63.65 428.62 P
1.03 (that consistency was maintained) 63.65 415.62 P
3 F
1.03 (at the point of manipulation) 212.6 415.62 P
0 F
1.03 (would not be suitable in systems which use a) 343.38 415.62 P
-0.47 (shared space to present a continual, ongoing awareness of group work to all users. So before distributed systems) 63.65 402.62 P
-0.22 (approaches can be applied to CSCW, or mined for possible solutions, we must first consider the particular rela-) 63.65 389.62 P
(tionship between distributed data and collaborative work.) 63.65 376.62 T
2 14 Q
(5.3  Distributed Data and Collaborative W) 63.65 349.62 T
(ork) 320.94 349.62 T
0 11 Q
0.1 (Our starting point is an examination of the design issues behind existing strategies \050such as those illustrated in) 63.65 327.62 P
(Chapter 2\051.) 63.65 314.62 T
2 12 Q
(5.3.1  Distribution) 63.65 290.95 T
0 11 Q
-0.33 (The first set of design decisions concern the mechanisms which determine where a particular data structure will) 63.65 273.62 P
(reside in the system at any given time\321data) 63.65 260.62 T
3 F
(distribution) 261.63 260.62 T
0 F
(. We can distinguish two orthogonal choices here.) 312.97 260.62 T
0.15 (The distinction between) 63.65 240.62 P
3 F
0.15 (centralised) 172.56 240.62 P
0 F
0.15 ( and) 221.44 240.62 P
3 F
0.15 (replicated) 243.12 240.62 P
0 F
0.15 ( approaches has long been a concern for CSCW developers) 287.73 240.62 P
0.01 (\050Ahuja et al., 1990; Lauwers et al., 1990; Greenberg et al., 1992\051. Centralisation concentrates data at one point) 63.65 227.62 P
1.35 (in the system; clients communicate with this central point to retrieve or update information. Centralisation) 63.65 214.62 P
0.78 (favours simplicity and consistency \050which is trivial since there is only one copy of a data item at any time\051,) 63.65 201.62 P
-0.07 (potentially at the cost of availability and responsiveness in large networks or groups. Replication allows multi-) 63.65 188.62 P
-0.27 (ple copies of data structures to coexist, which improves availability, but complicates consistency management.) 63.65 175.62 P
0.98 (The distinction between centralised and replicated architectures speaks only to the number of copies of any) 63.65 155.62 P
0.35 (given data item, but not to their location. Most systems are) 63.65 142.62 P
3 F
0.35 (static) 328.7 142.62 P
0 F
0.35 (; the \322location\323 of any given piece of data is) 352.54 142.62 P
1.6 (fixed through the course of system execution, or a session. However, this is generally not inherent to the) 63.65 129.62 P
-0.39 (approaches. In a) 63.65 116.62 P
3 F
-0.39 (dynamic) 137 116.62 P
0 F
-0.39 ( system, data items may migrate from location to location. Distributed document man-) 174.27 116.62 P
2.22 (agement systems, and some workflow systems, use this approach, mimicking the physical movement of) 63.65 103.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 62
%%Page: "63" 63
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work.) 315.03 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(63) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.54 (documents and responsibility from one user to another. Some other distributed systems \050such as Obliq \050Cardelli,) 45.65 737.62 P
(1995\051\051 employ a similar approach in which data migrates to the site of computation.) 45.65 724.62 T
2 12 Q
(5.3.2  Management) 45.65 700.95 T
0 11 Q
-0.29 (The critical question for any distribution strategy, however, is how consistency can be maintained in the face of) 45.65 683.62 P
(the simultaneous activity of multiple users) 45.65 670.62 T
-0.35 (Often this is a \322non-problem\323. Many applications do not require absolute consistency in user data. For instance,) 45.65 650.62 P
-0.56 (in a \322shared whiteboard\323, absolute consistency is rarely a concern. Conflicts over a single-plane bitmap are min-) 45.65 637.62 P
1.75 (imal and non-intrusive. In these circumstances, the system would be unlikely to attempt to maintain data) 45.65 624.62 P
-0.14 (integrity rigorously. Indeed, the overhead of many consistency management strategies would interfere with the) 45.65 611.62 P
0.68 (responsive performance and free-form interactive style that a shared whiteboard requires. In more structured) 45.65 598.62 P
0.17 (applications, however, consistency can be vital. The inconsistency acceptable on a shared whiteboard is unac-) 45.65 585.62 P
(ceptable in a spreadsheet or source control system.) 45.65 572.62 T
0.91 (Inconsistency generally arises through misorderings in applying changes to user data at different sites. User) 45.65 552.62 P
0.1 (actions arise independently at different points in the network, and are then propagated to other users. This dis-) 45.65 539.62 P
0.87 (tributed activity introduces timing problems; events may arrive at different nodes in different, unpredictable) 45.65 526.62 P
0.7 (sequences. To maintain consistency, the system must ensure that each client sees the result of these changes) 45.65 513.62 P
(applied) 45.65 500.62 T
3 F
(in a consistent order) 80.78 500.62 T
0 F
(.) 171.53 500.62 T
-0.34 (In a centralised system, since everyone sees the single, unique copy of any data item, they see the same changes) 45.65 480.62 P
0.07 (arise; there is a single, network-wide consistent ordering of events. Only one event can be processed at a time,) 45.65 467.62 P
0.36 (so changes which arrive at the \322same\323 time will be processed separately, in some specific \050if arbitrary\051 order.) 45.65 454.62 P
1.19 (So, centralised data storage inherently introduces a) 45.65 441.62 P
3 F
1.19 (serialisation) 280.67 441.62 P
0 F
1.19 ( of change events, which, while potentially) 335.69 441.62 P
(unpredictable, maintains consistency.) 45.65 428.62 T
0.56 (Replicated systems can also achieve consistency through global serialisation. The simplest approach, used in) 45.65 408.62 P
0.44 (one form or another in many CSCW systems, is) 45.65 395.62 P
3 F
0.44 (data locking) 262.84 395.62 P
0 F
0.44 (. In this approach, clients must request and hold) 317.96 395.62 P
-0.63 (locks on data before they can make modifications. Since only one client at a time can hold the lock on an specific) 45.65 382.62 P
0.23 (item, simultaneous changes are prevented and consistency is maintained. Locks operate at different granulari-) 45.65 369.62 P
0.62 (ties, from the whole document down to individual objects or insertion points, and the request/grant cycle for) 45.65 356.62 P
0.73 (locks may be explicitly handled by users or implicitly managed on their behalf by the system. Whatever the) 45.65 343.62 P
-0.6 (details of their implementation, their role remains the same\321to avoid inconsistency by preventing simultaneous) 45.65 330.62 P
(action on data items.) 45.65 317.62 T
0.68 (The use of floor control is a particular form of this approach. Floor control regulates the activity of multiple) 45.65 297.62 P
-0.48 (users over a shared space, setting up mechanisms by which one at a time can \322gain the floor\323. Most floor control) 45.65 284.62 P
0.01 (policies can be seen as managing locks on the entire workspace, restricting activity to one individual at a time.) 45.65 271.62 P
0.36 (This is) 45.65 258.62 P
3 F
0.36 (input multiplexing) 78.76 258.62 P
0 F
0.36 (\321reducing multiple input channels \050one or more per individual\051 to a single channel) 159.49 258.62 P
0.87 (\050the input channel to the workspace\051. Mechanisms such as \322baton-passing\323 and \322round-robin\323 divide access) 45.65 245.62 P
-0.62 (between participants so that only one has control at any point. The participant who has the floor essentially holds) 45.65 232.62 P
1 (a lock on the entire workspace. Since no-one else can contribute until the \322lock\323 is released, consistency is) 45.65 219.62 P
(maintained.) 45.65 206.62 T
2 14 Q
(5.4  The Emergence of Inconsistency) 45.65 179.62 T
0 11 Q
0.52 (The variety of data management strategies is testament to the fact that no single approach is applicable in all) 45.65 157.62 P
0.57 (cases. In part, this is simply due to the considerable variation in the needs of CSCW systems. In addition, as) 45.65 144.62 P
-0.35 (discussed previously, it is because the choice of management strategies has strong implications for the interface) 45.65 131.62 P
-0.05 (and for the nature of collaborative interaction in a CSCW system. Data distribution examples abound. Central-) 45.65 118.62 P
0.98 (isation strategies introduce delays into the interaction cycle; locking strategies make parts of the workspace) 45.65 105.62 P
(unavailable to participants; and replication strategies can result in inconsistency between user displays.) 45.65 92.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 63
%%Page: "64" 64
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(64) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.11 (In other words, collaborative systems differ crucially from other distributed systems in that not only the appli-) 63.65 737.62 P
0.16 (cation, but also the interface, is distributed. The trade-offs between availability, transparency, consistency and) 63.65 724.62 P
0.72 (responsiveness must be made with this in mind, and so the designer must be constantly aware of the way in) 63.65 711.62 P
-0.21 (which application distribution and interface distribution are mutually influential. Decisions about data distribu-) 63.65 698.62 P
-0.24 (tion must be made in the context of application needs, since application details affect the relative importance of) 63.65 685.62 P
(timely response, activity feedback, flexible interaction and strong consistency.) 63.65 672.62 T
0.01 (These issues are particularly important when building a CSCW toolkit such as Prospero, which will be used to) 63.65 652.62 P
0.03 (create a wide range of applications. The toolkit designer is even more distant from end-users than is the devel-) 63.65 639.62 P
0.93 (oper of individual applications; and so, as argued in Chapters 1 and 2, it becomes critical to understand the) 63.65 626.62 P
0.17 (implications of distributed data strategies for particular usage situations. Here, we need to find a general char-) 63.65 613.62 P
(acterisation of distributed data management in CSCW.) 63.65 600.62 T
2 12 Q
(5.4.1  Streams of Activity and Inconsistency A) 63.65 576.95 T
(voidance) 306.88 576.95 T
0 11 Q
-0.29 (The distributed systems approach to distributed data has typically been organised around the data objects them-) 63.65 559.62 P
0.12 (selves. Indeed, we saw in Chapter 2 that most CSCW systems also manage shared data in terms of the fan-out) 63.65 546.62 P
-0.19 (between a single abstract \322shared\323 object and the multiple representations of it which float around the network.) 63.65 533.62 P
0.02 (Data items might be grouped together at particular locations, respond to messages, coordinate with each other,) 63.65 520.62 P
0.16 (or be maintained in \322virtual synchrony\323 \050Birman and Joseph, 1987\051. However, if we want to try to understand) 63.65 507.62 P
0.29 (data distribution for specifically) 63.65 494.62 P
3 F
0.29 (collaborative) 208.38 494.62 P
0 F
0.29 ( work, we need to be able to see it in terms of user activity, and) 267.05 494.62 P
-0.09 (so draw out the relationship between models of activity and models of distribution. Shared objects are not very) 63.65 481.62 P
-0.44 (enlightening; we need to choose another unit of analysis. What\325s more, as highlighted in the discussion of scope) 63.65 468.62 P
-0.04 (control in Chapter 4, it must be one which gives us flexible, controllable access to the ongoing actions of users) 63.65 455.62 P
0.47 (at the interface and components of the system, if it is to be useful not only as for analysis but also for toolkit) 63.65 442.62 P
(manipulation.) 63.65 429.62 T
0.66 (Coming from the user side, rather than the system side, I will present this discussion of data management in) 63.65 409.62 P
0.93 (terms of) 63.65 396.62 P
3 F
0.93 (streams of activity) 104.61 396.62 P
0 F
0.93 (. These streams will be the unit of analysis here. A stream of activity is a set of) 187.13 396.62 P
0.55 (sequentially-related operations, coherent over time. Normally, the producer of a stream of activity is a single) 63.65 383.62 P
-0.23 (user sitting at a workstation; however, other agents may be responsible for producing streams \050either as proxies) 63.65 370.62 P
0.3 (for users, or perhaps under programmatic control, as in a session recorder/player\051. Although most streams are) 63.65 357.62 P
-0.31 (associated with a single source, a single user may produce multiple streams concurrently \050perhaps acting in two) 63.65 344.62 P
-0.24 (roles, or in two workspaces, concurrently\051. When we come to look at examples, later in this chapter, and subse-) 63.65 331.62 P
-0.17 (quently in Chapter 7, we will see in more detail how streams are used as an abstraction for sequences of action.) 63.65 318.62 P
-0.63 (For the moment, though, a stream of activity can be thought of as capturing the actions of a single user in a single) 63.65 305.62 P
(session.) 63.65 292.62 T
0.53 (What does a streams-oriented view tell us about the approaches to distributed data management discussed so) 63.65 272.62 P
-0.43 (far? The most interesting answer is that streams are nowhere to be seen, either from the user or the data perspec-) 63.65 259.62 P
0.42 (tive. In fact, the action of most systems seems to be to) 63.65 246.62 P
3 F
0.42 (eliminate) 309.5 246.62 P
0 F
0.42 ( the notion of separate streams. To achieve a) 350.44 246.62 P
(unified view of the data, they produce a unified view of activity over it.) 63.65 233.62 T
0.18 (In other words, most approaches to data management in CSCW deal with) 63.65 213.62 P
3 F
0.18 (inconsistency avoidance) 391.79 213.62 P
0 F
0.18 ( rather than) 499.2 213.62 P
3 F
0.23 (consistency management) 63.65 200.62 P
0 8.8 Q
0.18 (1) 173.55 205.02 P
0 11 Q
0.23 (. Rather than working to achieve data consistency, they erect barriers \050such as asyn-) 177.95 200.62 P
-0.6 (chronous access, floor control and locks\051 to prevent inconsistency arising in the first place. This approach comes) 63.65 187.62 P
-0.67 (from the distributed systems tradition; the system manages the action of the separate components to avoid incon-) 63.65 174.62 P
-0.29 (sistency. However, applying this strategy to collaborative work is problematic. Here, the distributed entities are) 63.65 161.62 P
-0.52 (users, not programs; and users are generally less prepared to accept the imposition of global mechanisms to con-) 63.65 148.62 P
(strain their activity!) 63.65 135.62 T
0 0 0 1 0 0 0 K
63.65 100.95 549.65 121.04 C
0 0 0 1 0 0 0 K
63.65 108.94 195.62 108.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  One notable exception,) 63.65 94.95 T
3 F
(operational transformation) 160.38 94.95 T
0 F
(, will be discussed shortly) 258.64 94.95 T
(.) 351.31 94.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 64
%%Page: "65" 65
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work.) 315.03 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(65) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.06 (Since inconsistency arises through the simultaneous execution of conflicting operations, the simplest approach) 45.65 737.62 P
-0.15 (to avoiding inconsistency is to avoid simultaneous action over individual data items. This approach attempts to) 45.65 724.62 P
-0.25 (define a) 45.65 711.62 P
3 F
-0.25 (single, global stream of activity) 83.01 711.62 P
0 F
-0.25 ( over the data space. Asynchronous access achieves this by sharing one) 221.02 711.62 P
-0.39 (stream between multiple participants, one at a time. Floor control policies and locking mechanisms do likewise,) 45.65 698.62 P
0.46 (at a finer granularity. Mapping collaborative activities onto a single stream of activity establishes an inherent) 45.65 685.62 P
(serialisation and avoids inconsistency.) 45.65 672.62 T
-0.13 (This inherent serialisation is not appropriate for Prospero, since the goal of supporting a wide range of applica-) 45.65 652.62 P
2.24 (tions implies that the interactive limitations which that approach implies will be too restrictive. Instead,) 45.65 639.62 P
-0.17 (Prospero embodies an alternative approach which abandons this attempt to construct a single stream of activity) 45.65 626.62 P
-0.47 (out of multi-user activity. Instead, it begins with a picture of) 45.65 613.62 P
3 F
-0.47 (multiple, simultaneous streams of activity) 308.39 613.62 P
0 F
-0.47 (, and then) 489.52 613.62 P
-0.09 (looks to) 45.65 600.62 P
3 F
-0.09 (manage divergence) 83.37 600.62 P
0 F
-0.09 ( between these streams. Divergence occurs when two streams have different views) 169.11 600.62 P
0.09 (of the data state; it is the) 45.65 587.62 P
3 F
0.09 (emergence of inconsistency) 156.55 587.62 P
0 F
0.09 (. This could arise through simultaneous execution of con-) 277.68 587.62 P
-0.5 (flicting operations at different points in the network, or through a lag in propagating compatible operations from) 45.65 574.62 P
-0.12 (one site to another. The divergence model works to maintain data integrity by coordinating multiple streams of) 45.65 561.62 P
-0.45 (activity and resolving conflicts, rather than by attempting to eliminate the multiple streams and prevent conflict.) 45.65 548.62 P
-0.16 (The general divergence view does not imply any particular number of parallel streams of activity. So it encom-) 45.65 528.62 P
-0.04 (passes the traditional views outlined earlier; they correspond to the special case of just one stream. Divergence) 45.65 515.62 P
0.7 (between multiple streams of activity is the) 45.65 502.62 P
3 F
0.7 (more general case) 239.67 502.62 P
0 F
0.7 ( which subsumes attempts to maintain a single) 322.33 502.62 P
(thread of control. This generality is critical to the design of a toolkit.) 45.65 489.62 T
2 14 Q
(5.5  Divergence) 45.65 462.62 T
0 11 Q
-0.4 (So the first move is to regard collaborative activity as the progress of) 45.65 440.62 P
3 F
-0.4 (multiple, simultaneous) 346.87 440.62 P
0 F
-0.4 ( streams of activity.) 446.08 440.62 P
-0.39 (We no longer have the fiction of a single stream of activity to work with. However, data distribution is) 45.65 427.62 P
3 F
-0.39 (all about) 492.61 427.62 P
0 F
0.59 (maintaining the fiction of a shared data store, even though each individual data item might be replicated and) 45.65 414.62 P
0.41 (distributed. Multiple, simultaneous streams of activity can lead to inconsistency in the actual data representa-) 45.65 401.62 P
-0.16 (tions being manipulated. So, as outlined above, the second step is to view inconsistency as) 45.65 388.62 P
3 F
-0.16 (divergence) 444.15 388.62 P
0 F
-0.16 ( between) 492.4 388.62 P
-0.35 (these streams\325 views of data \050or, at a more abstract level, the divergence of the system as a whole from a unified) 45.65 375.62 P
(view of the data\051.) 45.65 362.62 T
-0.61 (Hence, we can see distributed data management in terms of the) 45.65 342.62 P
3 F
-0.61 (re-synchronisation) 319.33 342.62 P
0 F
-0.61 (of divergent streams of activ-) 404.58 342.62 P
3.05 (ity. As collaboration progresses, the streams continually split and merge, diverge and synchronise. At) 45.65 329.62 P
-0.21 (synchronisation, they re-establish a common view of the data; further activity will cause them to diverge again,) 45.65 316.62 P
-0.11 (necessitating further synchronisation later. This pattern is characteristic of the divergence model, and the focus) 45.65 303.62 P
1.75 (of the rest of this chapter and the next is how the pattern can be analysed, represented, manipulated and) 45.65 290.62 P
(exploited.) 45.65 277.62 T
0.73 (Although the toolkits which were presented in Chapter 2 largely adopted the single-stream view common to) 45.65 257.62 P
0.13 (many CSCW systems and toolkits, there are some examples of approaches, within CSCW and in other related) 45.65 244.62 P
0.44 (fields, more reminiscent of the divergence model. Before going on to discuss divergence and CSCW in more) 45.65 231.62 P
-0.48 (detail, it\325s worth briefly reviewing some of the other approaches related to divergence, and discussing the extent) 45.65 218.62 P
(to which they capitalise on these ideas.) 45.65 205.62 T
2 12 Q
(5.5.1  Divergence and V) 45.65 181.95 T
(ersioning) 173.72 181.95 T
0 11 Q
-0.17 (The view of collaborative data manipulation as continual divergence and synchronisation is quite similar to the) 45.65 164.62 P
-0.15 (principles of versioning systems. Versioning is a technique which maintains a historical record of the instances) 45.65 151.62 P
-0.02 (in time, or) 45.65 138.62 P
3 F
-0.02 (versions,) 93.86 138.62 P
0 F
-0.02 ( of objects or files. Versioning can be applied at different granularities\321workspaces, files,) 133.27 138.62 P
(objects, etc.) 45.65 125.62 T
-0.34 (In CSCW, version systems have been used to track the different stages of evolution of objects in a shared work-) 45.65 105.62 P
0.23 (space. They typically allow multiple versions of an object to exist at once, and in some, multiple versions can) 45.65 92.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 65
%%Page: "66" 66
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(66) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
1.4 (be simultaneously active. For example, GMD\325s CoVer \050Haake and Haake, 1993\051 uses a version system to) 63.65 737.62 P
-0.67 (manage the cooperative work. CoVer is a version server which has been used to support the SEPIA collaborative) 63.65 724.62 P
0.43 (hypertext system \050Streitz et al., 1992\051, by providing explicit versioning support in addition to straightforward) 63.65 711.62 P
(object store functionality) 63.65 698.62 T
3 F
(.) 173.64 698.62 T
0 F
0.1 (There are two principal differences between the divergence approach and the versioning approach. The first is) 63.65 678.62 P
0.28 (that versioning systems like CoVer in CSCW tend to emphasise the creation and management of parallel ver-) 63.65 665.62 P
6.27 (sions, rather than the subsequent integration of different versions \050divergent streams\051. Merging) 63.65 652.62 P
-0.22 (\050synchronisation, in the divergence model\051 is typically something which happens outside the versioning frame-) 63.65 639.62 P
-0.61 (work itself. Munson and Dewan \0501994\051 provide a framework organised around version merging, but, again, they) 63.65 626.62 P
-0.31 (primarily emphasise versioning and merging within a context of \322asynchronous\323 work. This reflects the second) 63.65 613.62 P
0.56 (difference, which is that most collaborative versioning systems tend to regard versions as fairly heavyweight) 63.65 600.62 P
0.22 (objects. Versioning might be applied to a document, or to document sections, and perhaps, occasionally, even) 63.65 587.62 P
-0.18 (paragraphs; but they would tend not to use versions to represent the divergence resulting from two users insert-) 63.65 574.62 P
1.58 (ing different characters in a synchronous collaborative text editor. This heavyweight data-driven approach) 63.65 561.62 P
-0.11 (means that versioning systems are rarely as scalable as the divergence model must be \050discussed in more detail) 63.65 548.62 P
(below\051.) 63.65 535.62 T
2 12 Q
(5.5.2  Divergence and Replicated Databases) 63.65 511.95 T
0 11 Q
1.27 (Replicated database research has also addressed questions of divergence. In a replicated database, multiple) 63.65 494.62 P
0.18 (copies of all or part of the database are maintained in parallel, to increase availability. Database queries might) 63.65 481.62 P
-0.19 (be satisfied by activity over these various copies of the data, and a range of mechanisms might be used to prop-) 63.65 468.62 P
1.48 (agate updated information between the distributed components of the data store. The relationship between) 63.65 455.62 P
-0.48 (Prospero\325s mechanisms and those of replicated database research will be discussed in more detail when the con-) 63.65 442.62 P
(sistency mechanisms are presented in Chapter 6, but a brief outline of the divergence issues is relevant here.) 63.65 429.62 T
0.65 (In database work, consistency is normally maintained by supporting a transaction model, which decomposes) 63.65 409.62 P
0.49 (database activity into a sequence of transactions. Transactions group related operations for atomic execution;) 63.65 396.62 P
0.1 (since transactions execution is all-or-nothing, consistency can be maintained. In replicated databases, research) 63.65 383.62 P
0.02 (focuses on the detection of transaction conflicts and on finding an execution order which avoids potential con-) 63.65 370.62 P
2.53 (flicts. Various approaches can be used to sustain the transaction model under replication. For instance,) 63.65 357.62 P
0.04 (distributed conflict detection can be used to generate the consistent serialisation globally, rather than individu-) 63.65 344.62 P
-0.06 (ally at each replication point; or rollback techniques can be used with an optimistic concurrency model, so that) 63.65 331.62 P
(conflicting transactions can be undone and re-executed later.) 63.65 318.62 T
-0.05 (These techniques place the detection, avoidance and management of conflicts) 63.65 298.62 P
3 F
-0.05 (within) 407.45 298.62 P
0 F
-0.05 ( the database itself; unlike) 434.96 298.62 P
0.48 (the divergence proposal, the application is typically) 63.65 285.62 P
3 F
0.48 (not) 296.78 285.62 P
0 F
0.48 ( involved in the conflict management process. This is) 310.83 285.62 P
1.27 (generally true when collaborative applications are based on database technology. However, there are times) 63.65 272.62 P
-0.5 (when this model must break down. In Lotus Notes, for example, users interact directly with document databases) 63.65 259.62 P
0.38 (replicated amongst different sites but largely disconnected from each other, and so conflicts can occur during) 63.65 246.62 P
-0.29 (periods of simultaneous work \050as here\051. However, in these cases, Notes merely flags the conflict and carries on,) 63.65 233.62 P
0.34 (rather than providing any means for conflict resolution. Replicated databases deal with some problems which) 63.65 220.62 P
(divergence raises; however, they generally do not directly exploit divergence to support multi-user activity.) 63.65 207.62 T
2 12 Q
(5.5.3  Divergence and Operational T) 63.65 183.95 T
(ransformation) 256.63 183.95 T
0 11 Q
0.36 (An alternative technique which has been employed effectively in a number of collaborative systems is opera-) 63.65 166.62 P
-0.37 (tional transformation \050Ellis and Gibbs, 1989; Karsenty and Beaudouin-Lafon, 1992; Nichols et al., 1995) 63.65 153.62 P
0 8.8 Q
-0.29 (2) 516.89 158.02 P
0 11 Q
-0.37 (\051. This) 521.29 153.62 P
0 0 0 1 0 0 0 K
63.65 100.95 549.65 121.04 C
0 0 0 1 0 0 0 K
63.65 108.94 195.62 108.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(2.  Not all of these authors use the term \322operational transformation\323 for their approach, but it will serve here as a generic term.) 63.65 94.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 66
%%Page: "67" 67
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work.) 315.03 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(67) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.27 (approach perhaps comes closest to the divergence mechanism presented here, in that it explicitly manages mul-) 45.65 737.62 P
(tiple streams, and attempts to resolve conflicting activities rather than prevent them.) 45.65 724.62 T
0.3 (Operational transformation employs a model of multiple streams, and uses a transformation matrix to process) 45.65 487.62 P
0.63 (records of remote operations before applying them locally. This \322transformation\323 uses information about the) 45.65 474.62 P
0.11 (different contexts in which the operations arose, and the history of operations executed at each site. The trans-) 45.65 461.62 P
0.99 (formation eliminates the effect of operations which \322pass on the network\323, so that they execute in different) 45.65 448.62 P
0.53 (orders at each site. The result of a transformation is an operation which can be applied locally to achieve the) 45.65 435.62 P
0.34 (same effect as the operation had when it was originally executed at the remote site in a different context. The) 45.65 422.62 P
0.57 (transformation re-contextualises the operation. For example, if two users both delete the same character on a) 45.65 409.62 P
1.5 (line, and send their operations to each other, then the transformation matrix would replace each incoming) 45.65 396.62 P
-0.53 (\322delete\323 operation with a null operation, since the character has already been deleted. The transformation matrix) 45.65 383.62 P
-0.24 (comprises rules for transforming any operation which might have \322passed\323 any other on the network, and so be) 45.65 370.62 P
(executed out of order.) 45.65 357.62 T
0.29 (Clearly, this approach is much closer to the divergence model advocated here, but there are two principal dif-) 45.65 337.62 P
1.47 (ferences. First, just as versioning approaches have typically emphasised asynchronous activity, operational) 45.65 324.62 P
1.88 (transformation has typically emphasised synchronous; as will be illustrated, Prospero\325s use of divergence) 45.65 311.62 P
0.5 (attempts to be more general, incorporating other models of collaboration. Second, operational transformation) 45.65 298.62 P
0.2 (relies upon the transformation matrix to resolve conflicts \050easier in the tightly-coupled, synchronous domain\051;) 45.65 285.62 P
2.86 (whereas Prospero employs a more general notion of synchronisation which is potentially more widely) 45.65 272.62 P
(applicable.) 45.65 259.62 T
2 14 Q
(5.6  Capitalising on Divergence) 45.65 232.62 T
0 11 Q
0.34 (Much of what\325s critical about the divergence view is what it) 45.65 210.62 P
3 F
0.34 (doesn\325t) 316.68 210.62 P
0 F
0.34 ( say, because those areas of openness are) 349.07 210.62 P
-0.58 (the keys to the specialisable nature of the model. So far, nothing has been said about the defined units of activity,) 45.65 197.62 P
-0.16 (or what constitutes a \322stream\323; nothing has been said about the granularity of \322divergence\323) 45.65 184.62 P
3 F
-0.16 (per se) 446.61 184.62 P
0 F
-0.16 ( and how it is) 473.02 184.62 P
0.85 (recognised; and nothing has been said about the timescale on which divergence and resynchronisation takes) 45.65 171.62 P
0.56 (place. In fact, this openness is critical to the particular advantages of divergence for CSCW, and are features) 45.65 158.62 P
(exploited for flexibility in Prospero.) 45.65 145.62 T
-0.24 (Divergence-based data management in CSCW offers three particular advantages over other techniques. First, it) 45.65 125.62 P
-0.6 (is highly scalable, supporting inter-application communication from periods of milliseconds to periods of weeks) 45.65 112.62 P
0.46 (or more. Second, it opens up direct CSCW support for an area of application use\321one I term) 45.65 99.62 P
3 F
0.46 (multi-synchro-) 466.88 99.62 P
45.65 87.95 531.65 744.95 C
0 0 0 1 0 0 0 K
92.31 503.95 484.98 720.95 C
0 0 0 1 0 0 0 K
215.96 579.49 212.65 567.95 209.34 579.49 212.65 579.49 4 Y
0 X
0 0 0 1 0 0 0 K
V
212.65 702.95 212.65 579.49 2 L
1 H
2 Z
N
377.95 579.49 374.65 567.95 371.34 579.49 374.65 579.49 4 Y
V
374.65 702.95 374.65 579.49 2 L
N
352.73 638.18 362.31 630.95 350.36 632 351.54 635.09 4 Y
3 X
V
221.65 684.95 351.55 635.09 2 L
N
230.28 631.82 218.31 630.95 228.01 638.03 229.14 634.92 4 Y
V
365.65 684.95 229.15 634.92 2 L
N
0 11 Q
0 X
(insert \322a\323 at 514) 383.65 684.95 T
(delete \322d\323 at 510) 128.31 686.45 T
(insert \322ef\323 at 515) 128.31 660.34 T
3 F
(insert \322a\323 at 513) 128.31 624.34 T
(insert \322ef\323 at 516) 385.87 597.34 T
349.39 611.18 358.98 603.96 347.02 605 348.21 608.09 4 Y
3 X
V
218.31 657.95 348.21 608.09 2 L
N
101.31 504.95 479.31 549.95 R
7 X
V
0 F
0 X
1.14 (FIGURE 5.1: In the operational transformation approach, records of commands are) 101.31 542.62 P
0.35 (transformed before execution to reflect differences between the execution contexts at) 101.31 529.62 P
(each host.) 101.31 516.62 T
(delete \322d\323 at 510) 385.15 628.34 T
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 67
%%Page: "68" 68
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(68) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
3 11 Q
0 X
1.22 (nous) 63.65 737.62 P
0 F
1.22 (\321which are supported poorly or not-at-all by existing approaches. Third, it directly supports common) 84.43 737.62 P
-0.44 (patterns of working activity based on observational studies which are at odds with the models embodied in most) 63.65 724.62 P
(systems today. This section will consider each of these in more detail.) 63.65 711.62 T
2 12 Q
(5.6.1  Scalability) 63.65 687.95 T
0 11 Q
1.33 (Scalability refers to graceful operation across some dimension of system design. In particular, the scalable) 63.65 670.62 P
0.52 (dimension here is the \322pace of interaction\323 \050Dix, 1992\051; or, more technically, its relationship to the period of) 63.65 657.62 P
(synchronisation.) 63.65 644.62 T
0.48 (The period of synchronisation determines the regularity with which two streams are synchronised, and hence) 63.65 624.62 P
0.07 (the length of time that two streams will remain divergent. When the period is very small, then synchronisation) 63.65 611.62 P
-0.23 (happens frequently, and so the degree of divergence is typically very small before the streams are synchronised) 63.65 598.62 P
0.06 (and achieve a consistent view of the data store. When individuals use a collaborative system with a very small) 63.65 585.62 P
0.06 (period of synchronisation, their view of the shared workspace is highly consistent, since synchronisation takes) 63.65 572.62 P
1.03 (place often relative to their actions. This essentially characterises \322real-time\323 or synchronous groupware, in) 63.65 559.62 P
-0.57 (which users work \322simultaneously\323 in some shared space which communicates the effects of each user\325s actions) 63.65 546.62 P
0.22 (to all participants \322as they happen\323. The synchronous element arises from the short delay between divergence) 63.65 533.62 P
-0.23 (\050an action taking place\051 and synchronisation \050the action being propagated to other participants\051. This is one end) 63.65 520.62 P
(of the \322pace of interaction\323 dimension.) 63.65 507.62 T
0.95 (At the other end of the spectrum, synchronisation can take place much less frequently in comparison to the) 63.65 487.62 P
-0.27 (actions of the users. In this case, there is considerably more divergence, arising from different sorts of activities) 63.65 474.62 P
0.8 (which take place between synchronisation points. When the period of synchronisation is measured in hours,) 63.65 461.62 P
0.08 (days or weeks, we approach what is traditionally thought of as \322asynchronous\323 interaction. An example might) 63.65 448.62 P
0.49 (be the collaborative authoring of an academic paper, in which authors take turns revising drafts of individual) 63.65 435.62 P
(sections or of the entire paper over a long period, passing the emerging document between them.) 63.65 422.62 T
-0.35 (Within the CSCW community, these sorts of asynchronous interactions have generally been seen and presented) 63.65 402.62 P
-0.16 (as being quite different from real-time or synchronous interactions; \322synchronous) 63.65 389.62 P
3 F
-0.16 (or) 423.8 389.62 P
0 F
-0.16 ( asynchronous\323 has been a) 433.58 389.62 P
0.32 (distinction made in both design and analysis. However, by looking at them in terms of) 63.65 376.62 P
3 F
0.32 (synchronisation) 450.65 376.62 P
0 F
0.32 ( rather) 520.93 376.62 P
-0.23 (than) 63.65 363.62 P
3 F
-0.23 (synchrony) 85.11 363.62 P
0 F
-0.23 (, we can see them as two aspects of the same form of activity, with different) 130.32 363.62 P
3 F
-0.23 (periods) 463.95 363.62 P
0 F
-0.23 ( of synchro-) 496.95 363.62 P
(nisation. Scalability across this dimension allows Prospero to generalise across this distinction.) 63.65 350.62 T
2 12 Q
(5.6.2  Multi-Synchronous Applications) 63.65 326.95 T
0 11 Q
0.04 (We can exploit a divergence-based view of distributed data management to go further than standard \322synchro-) 63.65 309.62 P
(nous\323 and \322asynchronous\323 views of collaboration.) 63.65 296.62 T
-0.48 (Standard techniques attempt to maintain the illusion of a single stream of activity within the collaborative work-) 63.65 276.62 P
-0.05 (space. We know, however, that groups don\325t work that way; it\325s much more common to have a whole range of) 63.65 263.62 P
0.91 (simultaneous activities, possibly on different levels. Consider the collaboratively-written paper again. In the) 63.65 250.62 P
-0.03 (absence of restrictions introduced by particular technologies or applications, individuals do not rigorously par-) 63.65 237.62 P
0.01 (tition their activity in time, with all activity concentrated in one place at a time; that is, they do not work in the) 63.65 224.62 P
0.01 (strongly asynchronous style, one at a time, that many collaborative systems embody. A more familiar scenario) 63.65 211.62 P
-0.38 (would see the authors each take a copy of the current draft and work on them in parallel\321at home, in the office,) 63.65 198.62 P
-0.31 (on the plane or wherever. Here we have simultaneous work by a number of individuals and subsequent) 63.65 185.62 P
3 F
-0.31 (integra-) 514.21 185.62 P
(tion) 63.65 172.62 T
0 F
( of those separate activities; not synchronous, nor asynchronous, but) 80.76 172.62 T
3 F
(multi-synchronous) 383.84 172.62 T
0 F
( work.) 465.72 172.62 T
1.05 (Multiple, parallel streams of activity is a natural way to support this familiar pattern of collaborative work.) 63.65 152.62 P
-0.51 (Working activities proceed in parallel \050multiple streams of activity\051, during which time the participants are \322dis-) 63.65 139.62 P
-0.23 (connected\323 \050divergence occurs\051; and periodically their individual efforts will be integrated \050synchronisation\051 to) 63.65 126.62 P
(achieve a consistent state and progress group activity.) 63.65 113.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 68
%%Page: "69" 69
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work.) 315.03 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(69) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.3 (Here I am concerned with the) 45.65 737.62 P
3 F
0.3 (nature) 180.63 737.62 P
0 F
0.3 ( of synchronisation, discussed in more detail subsequently. At this stage,) 209.35 737.62 P
-0.05 (the details of synchronisation in a variety of cases are not of prime importance; examples will be considered in) 45.65 724.62 P
-0.01 (more depth later on. The important factor here is the support for multi-synchronous working within this model) 45.65 711.62 P
(of distributed data management.) 45.65 698.62 T
2 12 Q
(5.6.3  Supporting Opportunistic W) 45.65 674.95 T
(ork) 225.52 674.95 T
0 11 Q
0.32 (Divergence does not simply support a different working style; it\325s also a means to support) 45.65 657.62 P
3 F
0.32 (more naturally) 449.13 657.62 P
0 F
0.32 (the) 518.21 657.62 P
0.28 (other styles to which CSCW has traditionally addressed itself. In studies of collaborative authoring, Beck and) 45.65 644.62 P
0.98 (Bellotti \0501993\051 highlighted the opportunistic way in which much activity was performed. In particular, they) 45.65 631.62 P
-0.58 (pointed to the ways in which opportunistic action on the parts of individual collaborators often went) 45.65 618.62 P
3 F
-0.58 (against) 479.37 618.62 P
0 F
-0.58 ( pre-) 511.77 618.62 P
-0.03 (defined roles, responsibilities or plans. Individuals acted in response to specific circumstances; while the plans) 45.65 605.62 P
-0.2 (and strategies formed) 45.65 592.62 P
3 F
-0.2 (one) 142.48 592.62 P
0 F
-0.2 ( guide to their actions, they were by no means the only factors at work, and in each of) 158.37 592.62 P
-0.31 (their case studies, they observed occasions on which agreements about who would do what and when were bro-) 45.65 579.62 P
0.56 (ken. Critically, these broken agreements are neither unusual nor problematic; opportunistic activity is simply) 45.65 566.62 P
0.34 (part of the natural process of collaboration. Suchman \0501987\051 has, of course, made similar telling observations) 45.65 553.62 P
(about the status of plans as resources for action rather than as rigorous constraints upon it.) 45.65 540.62 T
0.12 (These observations suggest that CSCW systems should be wary of reifying plans and using pre-formed strate-) 45.65 520.62 P
-0.21 (gies to organise collaborative activity, since they are often opportunistically broken in the course of an activity.) 45.65 507.62 P
-0.31 (Turn-taking floor control policies, or partitioning a workspace into separate regions accessible to different indi-) 45.65 494.62 P
0.8 (viduals, are examples of technological approaches which structure user interaction around plans of this sort.) 45.65 481.62 P
0.1 (Once again, this highlights the contrast between the particular needs of CSCW systems and traditional distrib-) 45.65 468.62 P
1.73 (uted systems, and shows that a distributed) 45.65 455.62 P
3 F
1.73 (interface) 245.37 455.62 P
0 F
1.73 ( is an important consideration. To support the sort of) 284.48 455.62 P
-0.6 (opportunistic working described by Beck and Bellotti, then, CSCW technology must) 45.65 442.62 P
3 F
-0.6 (relax) 414.6 442.62 P
0 F
-0.6 ( rules about exclusion) 437.2 442.62 P
0.35 (and partitioning\321 exactly the rules which have been employed to maintain the fiction of the single stream of) 45.65 429.62 P
(activity.) 45.65 416.62 T
0.23 (So the same sorts of mechanisms which were described earlier as supporting multi-synchronous collaboration) 45.65 396.62 P
0.63 (have, in fact, a wider range of applicability; they support a more naturalistic means of) 45.65 383.62 P
3 F
0.63 (making asynchronous) 434.78 383.62 P
0.19 (collaboration work effective) 45.65 370.62 P
0 F
0.19 (. Divergence is a direct consequence of these ways of working; and so a model of) 170.09 370.62 P
-0 (distributed data management based on a pattern of repeated divergence and synchronisation fits well with sup-) 45.65 357.62 P
(port for a wide range of working styles.) 45.65 344.62 T
2 14 Q
(5.7  Divergence in Prospero) 45.65 317.62 T
0 11 Q
-0.17 (We can now look at how divergence works in practice. The examples presented in this section simply illustrate) 45.65 295.62 P
-0.34 (the basic ideas; more detailed and complex examples will be examined in Chapter 7, once the consistency guar-) 45.65 282.62 P
(antees mechanism has been presented.) 45.65 269.62 T
-0.35 (Prospero\325s structure and programming model was introduced in Chapter 4. The examples here illustrate how its) 45.65 249.62 P
0.23 (data distribution mechanisms, modelled in terms of the divergence and synchronisation of streams of activity,) 45.65 236.62 P
1.56 (are exploited in the development of CSCW applications. The examples also show how toolkit tailoring is) 45.65 223.62 P
0.75 (achieved by specialising the programming model. Since Prospero is defined in terms of generic functions to) 45.65 210.62 P
-0.03 (relate the different behaviours and system components, new mechanisms introduced in specialised classes will) 45.65 197.62 P
(affect its internal behaviour.) 45.65 184.62 T
0.16 (These examples will particularly show how divergence in Prospero supports a wide range of application strat-) 45.65 164.62 P
-0.54 (egies. They take the form of code fragments illustrating the framework\325s specialisation to the needs of particular) 45.65 151.62 P
2.24 (applications. After presenting the examples themselves, I will step back to consider the structure of the) 45.65 138.62 P
(framework.) 45.65 125.62 T
-0.41 (Some points should be noted. First, the examples have been considerably simplified to illustrate the main points) 45.65 105.62 P
0.12 (for this chapter. In particular: the interaction between divergence management and consistency guarantees has) 45.65 92.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 69
%%Page: "70" 70
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(70) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
1.05 (been omitted until consistency guarantees are presented in Chapter 6; some functions are included with the) 63.65 737.62 P
-0.65 (examples for explanatory purposes which are actually defined by Prospero; and some examples use library func-) 63.65 724.62 P
0.43 (tions which wrap around the core Prospero functions and hide details not relevant to these examples \050such as) 63.65 711.62 P
(the Lisp RPC mechanism underneath the Prospero implementation\051.) 63.65 698.62 T
-0.43 (Second, these examples operate on three levels at once, and it is critical to a conceptual understanding that these) 63.65 678.62 P
-0.07 (are kept separate. The first is that of the example applications used to illustrate the ideas; the code, the applica-) 63.65 665.62 P
1.73 (tions and the implementation strategies. The second is the use of programming structures to realise these) 63.65 652.62 P
0.57 (applications: the way in which subclass and specialisation mechanisms are used, and the way in which Pros-) 63.65 639.62 P
0.89 (pero\325s facilities are integrated into applications. The third level, which is the most important for my current) 63.65 626.62 P
0.41 (purposes, is the use of divergence itself to provide a programming framework; the way in which the multiple) 63.65 613.62 P
0.42 (streams model lends itself to a particular structure of application programming, and how the pattern of diver-) 63.65 600.62 P
0.06 (gence and synchronisation is reflected in the application. Since the examples have been structured to highlight) 63.65 587.62 P
(this third level, liberties have been taken with application requirements and efficient programming.) 63.65 574.62 T
2 12 Q
(5.7.1  Example: Shdr) 63.65 550.95 T
0 11 Q
0.3 (Shdr is a simple replicated shared whiteboard application. It was designed outside the divergence framework;) 63.65 533.62 P
0.54 (it was originally written in 1990 to support experiments in remote collaboration over long distances. Actions) 63.65 520.62 P
0.19 (from the user interface are performed on the user\325s own copy of the data, and are recorded in a local buffer of) 63.65 507.62 P
0.3 (activity records. Periodically, buffer contents are sent to other participants using a simple, high-level protocol) 63.65 494.62 P
0.36 (\050that is, one defined in terms of domain\321drawing\321 events, rather than lower-level user interface events like) 63.65 481.62 P
0.51 (mouse-clicks and key-presses\051. The update frequency varies, but generally the history is transmitted multiple) 63.65 468.62 P
(times per second.) 63.65 455.62 T
0.11 (We can reconstruct shdr\325s approach in the divergence framework \050figure 5.2\051. Local actions create divergence) 63.65 435.62 P
0.37 (from a shared view of the whiteboard until synchronisation, when history records are exchanged. Each user\325s) 63.65 422.62 P
(actions are associated with a particular stream, where they are recorded until synchronisation.) 63.65 409.62 T
-0.37 (User actions are explicitly represented within a class hierarchy rooted in the abstract class) 63.65 153.08 P
6 10 Q
-0.81 (<action>) 456.2 153.08 P
0 11 Q
-0.37 (. Different) 504.2 153.08 P
0.45 (actions are instances of its subclasses. Here, we use the subclass) 63.65 140.08 P
6 10 Q
0.98 (<edit-action>) 353.62 140.08 P
0 11 Q
0.45 ( for actions which have an) 431.62 140.08 P
(effect on the data store \050such as making or erasing a mark, but not cursor movement\051.) 63.65 127.08 T
2.65 (Activity streams are also explicitly represented, under the abstract class) 63.65 107.08 P
6 10 Q
5.78 (<stream>) 407.55 107.08 P
0 11 Q
2.65 (. Two subclasses of) 455.55 107.08 P
6 10 Q
2.82 (<stream>) 63.65 94.08 P
0 11 Q
1.29 ( are used here. The first,) 111.65 94.08 P
6 10 Q
2.82 (<remote-stream>) 228.75 94.08 P
0 11 Q
1.29 (, represents the streams of other users; the second,) 318.75 94.08 P
63.65 87.95 549.65 744.95 C
0 0 0 1 0 0 0 K
97.53 169.41 515.77 405.95 C
0 0 0 1 0 0 0 K
102.48 196.68 510.82 390.85 R
7 X
0 0 0 1 0 0 0 K
V
6 9 Q
0 X
(\050defmethod locally-perform-action :after \050\050action <edit-action>\051\051) 102.48 384.85 T
(\050add-action-to-stream action *my-stream*\051\051) 119.04 371.85 T
(\050defmethod add-action-to-stream \050\050action <edit-action>\051 \050stream <stream>\051\051) 102.48 353.85 T
(\050push action \050stream-actions stream\051\051) 119.04 340.85 T
(\050defmethod add-action-to-stream :after \050action \050stream <bounded-stream>\051\051) 102.48 322.85 T
(\050if \050full-p stream\051) 119.04 309.85 T
(\050synchronise stream \050stream-remote stream\051\051\051\051) 135.6 296.85 T
(\050defmethod synchronise \050\050stream <bounded-stream>\051 \050remote <remote-stream>\051\051) 102.48 278.85 T
(\050dolist \050action \050reverse \050stream-actions stream\051\051\051) 119.04 265.85 T
(\050propagate-action-to-stream action remote\051\051) 135.6 252.85 T
(\050stream-reset stream\051\051) 119.04 239.85 T
(\050defmethod propagate-action-to-stream \050action \050stream <remote-stream>\051\051) 102.48 221.85 T
(\050remote-call \050stream-host streams\051 incorporate-action action\051\051) 119.04 208.85 T
101.48 174.29 511.48 188.95 R
7 X
V
0 11 Q
0 X
( FIGURE 5.2: Mapping shdr\325s strategy in the Prospero framework.) 159.07 181.62 T
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 70
%%Page: "71" 71
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work.) 315.03 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(71) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
6 10 Q
0 X
-0.82 (<bounded-stream>) 45.65 552.75 P
0 11 Q
-0.38 (, is a particular kind of local stream with specialised behaviours, particular to the way that) 141.65 552.75 P
0.95 (shdr manages user data. A) 45.65 539.75 P
6 10 Q
2.08 (<bounded-stream>) 168.94 539.75 P
0 11 Q
0.95 ( accumulates local actions and periodically flushes them to) 264.94 539.75 P
(other participants.) 45.65 526.75 T
0.44 (We define shdr\325s strategy in Prospero by writing specific methods on a generic function framework which in) 45.65 506.75 P
-0.39 (turn describes the general model that Prospero embodies. These are the hooks onto which specialised behaviour) 45.65 493.75 P
-0.13 (can be hung. For instance, the generic function) 45.65 480.75 P
0 8.8 Q
-0.11 (3) 250.93 485.15 P
6 10 Q
-0.29 (locally-perform-action) 257.95 480.75 P
0 11 Q
-0.13 (, which Prospero uses to operate) 389.95 480.75 P
0.06 (on the local copy of user data, is a place to \322attach\323 the association of user actions with a specific stream. This) 45.65 467.75 P
0.14 (is defined for) 45.65 454.75 P
6 10 Q
0.3 (<edit-action>) 107.47 454.75 P
0 11 Q
0.14 ( operations, rather than all) 185.47 454.75 P
6 10 Q
0.3 (<action>) 304.08 454.75 P
0 11 Q
0.14 ( operations, since only the actions which) 352.08 454.75 P
0.09 (cause a change in the data store contribute to divergence. Next, the test for whether a bounded stream is \322full\323) 45.65 441.75 P
0.4 (and needs to be synchronised is made after any new action record is stored there, and so the after-method we) 45.65 428.75 P
-0.33 (define for) 45.65 415.75 P
6 10 Q
-0.72 (add-action-to-stream) 90.8 415.75 P
0 11 Q
-0.33 ( specialises on) 210.8 415.75 P
6 10 Q
-0.72 (<bounded-stream>) 276.11 415.75 P
0 11 Q
-0.33 ( rather than) 372.11 415.75 P
6 10 Q
-0.72 (<stream>) 423.97 415.75 P
0 F
-0.3 (,) 471.97 415.75 P
0 11 Q
-0.33 (so it applies) 479.75 415.75 P
(only to bounded streams.) 45.65 402.75 T
2 12 Q
(5.7.2  Example: Source Code Control) 45.65 379.08 T
0 11 Q
-0.31 (The second example is a traditional source code control system in a collaborative programming environment. It) 45.65 361.75 P
0.91 (uses a check-in/check-out model for software components or modules, in which modules must be explicitly) 45.65 348.75 P
-0.06 (\322checked out\323 of the repository before they can be modified. Checking a module out prevents other users from) 45.65 335.75 P
(modifying it until it is \322checked in\323 again; so this is a locking mechanism at the granularity of code modules.) 45.65 322.75 T
0.46 (Code for this example is shown in figure 5.3. After the first example, most of the structure for this is already) 45.65 302.75 P
0.64 (provided. We already have a means to accumulate and distribute sets of changes which arise in one place or) 45.65 289.75 P
-0.09 (another, which can be reused here \050and, in fact, is defined in Prospero, and so would not need to be included in) 45.65 276.75 P
0.52 (the previous example\051. In this example, however, there is a one major difference from the first, which is that) 45.65 263.75 P
0.18 (synchronisation is an explicit, user-initiated event. \322Check-in\323 and \322check-out\323 are actions which mark points) 45.65 250.75 P
(when views of the data store should be synchronised.) 45.65 237.75 T
-0.23 (Just as the first example distinguished between actions in the interface which did or did not have an effect upon) 45.65 217.75 P
0.65 (the shared data, this example distinguishes between actions which do or do not force synchronisation. These) 45.65 204.75 P
2.28 (user-initiated synchronisation. actions are members of a new action class,) 45.65 191.75 P
6 10 Q
4.97 (<synchronise-action>) 394.71 191.75 P
0 11 Q
2.28 (. In) 514.71 191.75 P
0.22 (normal editing, the system accumulates the action records, as before; but for synchronisation actions, the syn-) 45.65 178.75 P
0.8 (chronisation function is invoked. The use of explicit command objects in a class hierarchy allows these two) 45.65 165.75 P
0 0 0 1 0 0 0 K
45.65 120.95 531.65 141.04 C
0 0 0 1 0 0 0 K
45.65 128.94 177.62 128.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(3.  The keyword \322:after\323 designates that the method de\336ned for locally-perform-action in this example is an \322after) 45.65 114.95 T
(-method\323, a CLOS) 455.88 114.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(feature which will be explained in more detail in Chapter 7. Essentially) 45.65 104.95 T
(, \322after) 301.53 104.95 T
(-methods\323 run after the primary \050standard\051 methods for) 326.33 104.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this generic function have been run.) 45.65 94.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 C
0 0 0 1 0 0 0 K
83.07 560.08 494.23 744.95 C
0 0 0 1 0 0 0 K
86.98 592.1 488.65 741.27 R
7 X
0 0 0 1 0 0 0 K
V
6 9 Q
0 X
(\050defmethod add-action-to-stream \050\050action <edit-action>\051 stream\051) 86.98 735.27 T
(\050push action \050stream-actions stream\051\051\051) 103.54 722.27 T
(\050defmethod add-action-to-stream \050\050action <synchronise-action>\051 stream\051) 86.98 704.27 T
(\050synchronise stream \050stream-remote stream\051\051\051) 103.54 691.27 T
(\050defmethod synchronise \050stream \050remote <remote-stream>\051\051) 86.98 673.27 T
(;; as figure 5.2 ...) 103.54 660.27 T
(...\051) 103.54 647.27 T
(\050defmethod propagate-action-to-stream \050action \050stream <remote-stream>\051\051) 86.98 629.27 T
(;; as figure 5.2 ...) 103.54 616.27 T
(...\051) 103.54 603.27 T
87.81 569.45 491.82 586.27 R
7 X
V
0 11 Q
0 X
(FIGURE 5.3: Check-in/check-out strategy with synchronisation events.) 132.47 578.93 T
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 71
%%Page: "72" 72
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(72) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.01 (styles of synchronisation, both explicit and implicit, to be handled within the same object-oriented framework.) 63.65 737.62 P
(This mechanism\321class-based encoding\321will be discussed in more detail in Chapter 6.) 63.65 724.62 T
2 12 Q
(5.7.3  Example: Multi-synchronous Editing) 63.65 700.95 T
0 11 Q
-0.16 (The final example here considers the implications of multi-synchronous working\321the case not handled by tra-) 63.65 683.62 P
(ditional CSCW toolkits and systems.) 63.65 670.62 T
-0.24 (At this stage, multi-synchronous activity is no different at the point of divergence \050although Chapter 6 will deal) 63.65 650.62 P
-0.31 (with ways in which a fuller implementation would use consistency guarantees to limit or constrain divergence\051.) 63.65 637.62 P
-0.61 (Once again, we can accumulate actions until some synchronisation action occurs, either automatically or by user) 63.65 624.62 P
-0.34 (request. This, however, is the point at which a more complex strategy is required. In the first example, we could) 63.65 611.62 P
0.3 (simply ignore data consistency problems; and in the second, asynchronous access ensured that such problems) 63.65 598.62 P
0.49 (never arose. In this example, we have to be aware of the possibility of mutually inconsistent changes and act) 63.65 585.62 P
(accordingly. So the focus of attention in this case is on the synchronisation procedures.) 63.65 572.62 T
0.24 (The code in figure 5.4 illustrates two points. The first is that synchronisation now requires explicit processing) 63.65 552.62 P
-0.27 (\050i.e. it is not simply the transmission of information\051; and the second is that it is now the) 63.65 539.62 P
3 F
-0.27 (mutual) 449.36 539.62 P
0 F
-0.27 ( achievement of) 479.92 539.62 P
-0.18 (both parties \050i.e. its no longer sufficient for the originating side to send the information and move on, but rather) 63.65 526.62 P
(both sides must be involved\051.) 63.65 513.62 T
-0.02 (The approach is very simple. For the first time, the synchronisation procedure makes use of the return value of) 63.65 493.62 P
6 10 Q
4.38 (propagate-action-to-stream) 63.65 480.62 P
0 11 Q
2.01 (, which carries back information from the remote side. In particular, it) 219.65 480.62 P
0.91 (returns the \322intermediate results\323 of synchronisation; that is, a form of the data which has been modified to) 63.65 467.62 P
-0.18 (reflect the resolution of conflicts. This must now be reintegrated into the local stream\325s view, so the integration) 63.65 454.62 P
(procedure is something in which both sides are involved.) 63.65 441.62 T
-0.24 (We also see the way in which) 63.65 421.62 P
6 10 Q
-0.52 (incorporate-action) 195.48 421.62 P
0 11 Q
-0.24 ( processes records of activities originating in some other) 303.48 421.62 P
0.35 (stream. In this case, we use the simplest strategy. If the remote action is an edit action, and if it is compatible) 63.65 408.62 P
0.04 (with local changes, then it is applied. If not, then we simply combine the two pieces of text as a unit to be pro-) 63.65 395.62 P
0.96 (cessed by the users later. \050This technique\321aggregation\321hinges upon a distinction between \322syntactic\323 and) 63.65 382.62 P
-0.39 (\322semantic\323 consistency to be detailed in Chapter 6.\051 Since the open strategy used in Prospero allows specialised) 63.65 369.62 P
0.21 (definition of functions such as) 63.65 356.62 P
6 10 Q
0.46 (compatible-p) 200.67 356.62 P
0 11 Q
0.21 ( and) 272.67 356.62 P
6 10 Q
0.46 (locally-perform-action) 294.48 356.62 P
0 11 Q
0.21 (, then we can be quite loose) 426.48 356.62 P
-0.56 (in what is accepted, and what constitutes compatibility; it may be possible to make recourse to more information) 63.65 343.62 P
(than is recorded here.) 63.65 330.62 T
2 12 Q
(5.7.4  Specialisation in Prospero) 63.65 306.95 T
0 11 Q
-0.42 (As well as illustrating the details of the divergence mechanism, these examples also show the pattern of special-) 63.65 289.62 P
0.16 (isation and modification in Prospero; in other words, they illustrate Prospero as an Open Implementation. The) 63.65 276.62 P
63.65 87.95 549.65 744.95 C
0 0 0 1 0 0 0 K
97 87.95 516.29 251.99 C
0 0 0 1 0 0 0 K
102 114.45 512.84 244.45 R
7 X
0 0 0 1 0 0 0 K
V
6 9 Q
0 X
(\050defmethod synchronise \050stream \050remote <remote-stream>\051\051) 102 238.45 T
(\050dolist \050action \050reverse \050stream-actions stream\051\051\051) 118.56 225.45 T
(\050integrate \050propagate-action-to-stream action remote\051\051\051) 135.12 212.45 T
(\050stream-reset stream\051\051) 118.56 199.45 T
(\050defmethod propagate-action-to-stream \050action \050stream <remote-stream>\051\051) 102 181.45 T
(\050remote-call \050stream-host stream\051 incorporate-action action\051\051) 118.56 168.45 T
(\050defmethod incorporate-action \050action <edit-action>\051) 102 150.45 T
(\050if \050compatible-p action\051 \050locally-perform-action action\051) 118.56 137.45 T
(\050aggregate action\051\051\051) 135.12 124.45 T
102 93.62 513.15 110.28 R
7 X
V
0 11 Q
0 X
(FIGURE 5.4: Supporting multi-synchronous activity.) 190.24 102.95 T
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 72
%%Page: "73" 73
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work.) 315.03 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(73) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.38 (features of MOP-based programming were discussed in Chapters 3 and 4. Now that some Prospero examples) 45.65 737.62 P
(have been presented, a number of specific aspects are worthy of note.) 45.65 724.62 T
1.16 (First, Prospero provides default behaviours which embody mechanisms for collaborative data management.) 45.65 704.62 P
-0.6 (This is what toolkits do and so, in this respect, Prospero is not particularly different from other toolkits \050although) 45.65 691.62 P
-0.51 (the detail of Prospero\325s management strategies differs from those of other toolkits\051. Second, and critically, Pros-) 45.65 678.62 P
0.46 (pero structures these mechanisms in an object-oriented framework and reveals elements of this framework to) 45.65 665.62 P
-0.33 (applications as a means to introspection and intercession. Prospero, then, provides two, orthogonal interfaces to) 45.65 652.62 P
1.6 (the functionality of its collaboration support mechanisms. The first,) 45.65 639.62 P
3 F
1.6 (base-level) 359.76 639.62 P
0 F
1.6 ( interface provides facilities) 404.36 639.62 P
-0.52 (which clients use to) 45.65 626.62 P
3 F
-0.52 (create) 133.4 626.62 P
0 F
-0.52 ( collaborative applications. The second,) 160.88 626.62 P
3 F
-0.52 (meta-level) 335.78 626.62 P
0 F
-0.52 ( interface allows internal function-) 381.6 626.62 P
-0.27 (ality to be) 45.65 613.62 P
3 F
-0.27 (specialised) 91.58 613.62 P
0 F
-0.27 ( to the needs of particular applications. Design decisions are not hidden behind traditional) 140.46 613.62 P
-0.49 (abstraction barriers but are open to manipulation, so the toolkit can support a wider range of application require-) 45.65 600.62 P
(ments than would otherwise be possible.) 45.65 587.62 T
2 14 Q
(5.8  Summary) 45.65 560.62 T
0 11 Q
0.49 (Managing the consistency of distributed data is a critical issue for many collaborative systems. However, the) 45.65 538.62 P
0.21 (interactive nature of CSCW systems means that many techniques which might be adopted from other areas of) 45.65 525.62 P
-0.09 (distributed systems engineering are not appropriate. Even when they can be used, their implications often limit) 45.65 512.62 P
-0.24 (them to a restricted set of applications and so they are not suitable for use in a toolkit to support a wide range of) 45.65 499.62 P
(applications.) 45.65 486.62 T
-0.33 (Distributed data management in CSCW needs to reflect the practicalities of collaborative work and group inter-) 45.65 466.62 P
1.29 (action. Unfortunately, most traditional mechanisms are oriented around preventing conflicts of action from) 45.65 453.62 P
-0.05 (occurring, which in turn forces the introduction of constraints upon individual action in a collaborative setting.) 45.65 440.62 P
-0 (Prospero embodies an alternative approach. Rather than creating the illusion of a single stream of activity, it is) 45.65 420.62 P
-0.11 (based on divergence and synchronisation between multiple, parallel streams. This approach focuses on the res-) 45.65 407.62 P
-0.2 (olution of conflicts, rather than on their prevention. The divergence and synchronisation strategy is particularly) 45.65 394.62 P
-0.23 (suited to CSCW applications, and, as a) 45.65 381.62 P
3 F
-0.23 (specialisable) 217.92 381.62 P
0 F
-0.23 ( model, it can be used as flexible basis for development. In) 275.36 381.62 P
0.04 (an Open Implementation framework, it allows applications to become involved in the data distribution aspects) 45.65 368.62 P
-0.33 (of toolkit behaviour, so that Prospero\325s procedures can be tailored to the particular needs of the application, and) 45.65 355.62 P
(reflect the interactional patterns of the domain.) 45.65 342.62 T
-0.34 (So far, however, only half of the picture has been presented. This chapter has focussed on the divergence model) 45.65 322.62 P
0.14 (and shown how divergence and synchronisation can be used to manage distributed data in collaborative work.) 45.65 309.62 P
0.3 (The other side of the coin is the means by which Prospero can constrain divergence to enhance collaboration.) 45.65 296.62 P
-0.09 (In just the same way as with divergence and synchronisation, this will begin with the semantics of applications) 45.65 283.62 P
-0.44 (and look for ways in which they can be usefully encoded and exploited at the toolkit level, using representations) 45.65 270.62 P
(called consistency guarantees.) 45.65 257.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 73
%%Page: "74" 74
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 5: Divergence, Data Management and Collaborative Work) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(74) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 74
%%Page: "75" 75
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees.) 318.57 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(75) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Chapter 6:) 45.65 674.29 T
(Consistency Management and Consistency) 45.65 646.29 T
(Guarantees) 45.65 618.29 T
2 14 Q
(6.1  Introduction) 45.65 552.42 T
0 11 Q
-0.41 (Chapter 5 introduced and demonstrated the first half of Prospero\325s integrated model of distributed data manage-) 45.65 530.42 P
-0.03 (ment and consistency control. Divergence builds explicitly on a model of parallel, ongoing streams of activity,) 45.65 517.42 P
0.85 (corresponding to the simultaneous actions of individual group members. Synchronisation between divergent) 45.65 504.42 P
0.47 (views of shared data occurs periodically, at intervals from milliseconds to days, corresponding to the pace of) 45.65 491.42 P
0.3 (group interaction. The Open Implementation framework which Prospero provides not only allows application) 45.65 478.42 P
0.39 (developers to use divergence and synchronisation to manage distributed data in applications, but also enables) 45.65 465.42 P
-0.55 (them to specify new data distribution strategies in terms of the divergence/synchronisation model, incorporating) 45.65 452.42 P
(these specialisations into the toolkit.) 45.65 439.42 T
-0.65 (As was explained, the divergence model attempts to synchronise data, rather than to unify the actions of multiple) 45.65 419.42 P
-0.37 (participants into a single stream of activity. However, the process of synchronisation can be both simplified and) 45.65 406.42 P
0.21 (enhanced in two ways: first, by allowing application control over the types of consistency to be achieved, and) 45.65 393.42 P
(second, by providing some way of constraining or characterising divergence.) 45.65 380.42 T
-0.08 (This chapter introduces the mechanisms Prospero provides to support consistency management. In section 6.2,) 45.65 360.42 P
0.22 (I will outline the basic problem and two basic mechanisms. The first\321) 45.65 347.42 P
3 F
0.22 (variable consistency) 360.3 347.42 P
0 F
0.22 (\321is a useful tech-) 450.65 347.42 P
-0.09 (nique which can be used in applications so that user activity can continue in the face of \322hard\323 synchronisation) 45.65 334.42 P
1.52 (problems. The second\321) 45.65 321.42 P
3 F
1.52 (consistency guarantees) 156.53 321.42 P
0 F
1.52 (\321generalises the traditional notion of lock-based exclusion) 260.4 321.42 P
0.56 (and, like the divergence/synchronisation model itself, sets up the framework in which application developers) 45.65 308.42 P
0.48 (can tailor and extend the toolkit. Section 6.3 compares consistency guarantees to related approaches, particu-) 45.65 295.42 P
-0.42 (larly in distributed database research. In section 6.4, I will show how the consistency mechanisms are embodied) 45.65 282.42 P
(in Prospero, before going on to look at some examples of their use in section 6.5.) 45.65 269.42 T
2 14 Q
(6.2  Constraining Divergence\321T) 45.65 242.42 T
(wo T) 247.95 242.42 T
(echniques) 276.73 242.42 T
0 11 Q
0.59 (The model of continual divergence and synchronisation, introduced in Chapter 5, can be used to capture and) 45.65 220.42 P
-0.31 (describe the behaviour of a wide range of CSCW systems. More importantly, as the examples illustrated, it also) 45.65 207.42 P
-0.39 (provides the basis of an) 45.65 194.42 P
3 F
-0.39 (implementational) 150.31 194.42 P
0 F
-0.39 ( description of a variety of data management mechanisms, both famil-) 227.31 194.42 P
0.56 (iar and novel. Conceptually, the basic notions of divergence and synchronisation map onto implementational) 45.65 181.42 P
-0.4 (structures very well and provide a framework in which data replication and distribution models can be encoded;) 45.65 168.42 P
1.04 (and this implementational use of the general model is the basic means to exploit the metalevel approach in) 45.65 155.42 P
(Prospero.) 45.65 142.42 T
-0.13 (However, before we can apply the divergence model practically, there is a problem to be addressed. The diver-) 45.65 122.42 P
0.44 (gence model) 45.65 109.42 P
3 F
0.44 (per se) 105.18 109.42 P
0 F
0.44 ( makes no commitment to the nature or extent of the divergence. Arbitrary actions can be) 132.19 109.42 P
0.76 (performed over the data during the divergence phase, which can last arbitrarily long before synchronisation.) 45.65 96.42 P
FMENDPAGE
%%EndPage: "75" 75
%%Page: "76" 76
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(76) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
1.01 (However, the longer two streams of activity remain active but unsynchronised, the greater is their potential) 63.65 737.62 P
-0 (divergence and, in turn, the more complex it becomes to resolve conflicts at synchronisation-time. Indeed, this) 63.65 724.62 P
-0.31 (model cannot guarantee that the system will) 63.65 711.62 P
3 F
-0.31 (ever) 257.94 711.62 P
0 F
-0.31 ( be able to resolve two arbitrary streams into a single, coherent) 276.87 711.62 P
0.09 (view of the data store. Essentially, unconstrained divergence leads to arbitrarily complex synchronisation; and) 63.65 698.62 P
(that can be a practical inconvenience, to say the least.) 63.65 685.62 T
0.16 (However, there are clearly approaches which can be taken to address this problem. After all, if the divergence) 63.65 665.62 P
0.13 (model can be used to characterise the data management strategies of other systems, then it should also be able) 63.65 652.62 P
0.95 (to model the techniques which those other systems use to avoid these problems. Prospero extends the basic) 63.65 639.62 P
1.59 (divergence model introduced in Chapter 5 with two techniques for constraining and managing divergence) 63.65 626.62 P
(between streams\321variable consistency and consistency guarantees.) 63.65 613.62 T
2 12 Q
(6.2.1  V) 63.65 589.95 T
(ariable Consistency) 104.12 589.95 T
0 11 Q
0.59 (The first approach, which was foreshadowed in the third example at the end of the previous chapter, is quite) 63.65 572.62 P
-0 (straightforward. Just as, earlier, we used divergence and synchronisation to express application-specific strate-) 63.65 559.62 P
0.41 (gies for data management, so we can also exploit application-specific models of consistency. The application) 63.65 546.62 P
0.46 (can become involved in not only the definition of consistency which the toolkit uses, but also in a process of) 63.65 533.62 P
-0.16 (selecting between degrees of consistency, and strategies for managing them. Like data distribution and replica-) 63.65 520.62 P
(tion, data consistency is an issue for the application, not for the toolkit.) 63.65 507.62 T
1 (In particular, Prospero distinguishes between two forms of consistency, labelled) 63.65 487.62 P
3 F
1 (syntactic) 428.7 487.62 P
0 F
1 ( and) 467.81 487.62 P
3 F
1 (semantic) 491.2 487.62 P
0 F
1 (. By) 530.31 487.62 P
-0.35 (\322semantic\323 consistency, I mean that the data store contains no inconsistencies from the perspective of the appli-) 63.65 474.62 P
-0.43 (cation domain. The data is fit for its intended purpose; textual data can be read and understood, spreadsheet data) 63.65 461.62 P
0.07 (can be computed, etc. This is the conventional, intuitive form of consistency in most collaborative and distrib-) 63.65 448.62 P
(uted systems. When traditional CSCW systems deal with consistency, they deal with semantic consistency.) 63.65 435.62 T
0.22 (Appeal to \322syntactic\323 consistency, on the other hand, allows for semantic inconsistencies, but ensures that the) 63.65 415.62 P
0.93 (data store is) 63.65 402.62 P
3 F
0.93 (structurally) 121.74 402.62 P
0 F
0.93 ( sound, so that some kind of activity can continue. Achieving syntactic consistency) 173.07 402.62 P
0.4 (implies only that the two streams now share a common view of the data. It does not guarantee, however, that) 63.65 389.62 P
-0.56 (content is now in its final form. Typically, achieving syntactic consistency means doing the minimum work nec-) 63.65 376.62 P
(essary to achieve a common view of the data space.) 63.65 363.62 T
2 F
(6.2.1.1  An Example) 63.65 336.62 T
0 F
0.97 (Consider a multi-user text editor, supporting a collaboration between two authors, A and B. At some point,) 63.65 319.62 P
1.28 (during a period of divergence, each author has introduced some changes to the same paragraph. When the) 63.65 306.62 P
-0.11 (streams corresponding to each author are synchronised, the collaborative system must find some ways to make) 63.65 293.62 P
(their views of the data store consistent.) 63.65 280.62 T
-0.02 (In some cases, the changes which the authors have introduced may be quite minor. Perhaps the changes do not) 63.65 260.62 P
0.3 (overlap, or perhaps they are easily composable. Many small edits\321correcting typos, or making minor adjust-) 63.65 247.62 P
-0.15 (ments\321are of this form. In these cases, the system can straight-forwardly combine the changes which A and B) 63.65 234.62 P
0.38 (have introduced, and present each of them with a new version of the paragraph which incorporates their joint) 63.65 221.62 P
0.6 (work. However, there is no guarantee that this can be achieved. In the face of more extensive changes, there) 63.65 208.62 P
0.33 (may be no way to merge the edit actions. In the worst case, perhaps, both A and B have completely rewritten) 63.65 195.62 P
0.42 (the paragraph. The two new pieces of text bear no strong relationship to each other, and yet the collaborative) 63.65 182.62 P
(system must somehow \322synchronise\323 A and B\325s views of the data store.) 63.65 169.62 T
0.36 (One simple approach to making the state \050semantically\051 consistent would be to resolve the conflict by simply) 63.65 149.62 P
0.29 (selecting one paragraph or other for the final text, and making it available to each author. The selection could) 63.65 136.62 P
-0.14 (be done on any grounds; most likely, the more-recently authored paragraph would \322win\323 and replace the other.) 63.65 123.62 P
-0.47 (So, if the system were to discard the earlier of the two paragraphs, and incorporate the newer text into the shared) 63.65 110.62 P
0.84 (data, then it would be preserving semantic consistency. \050Clearly, consistency does not imply \322correctness\323.\051) 63.65 97.62 P
FMENDPAGE
%%EndPage: "76" 76
%%Page: "77" 77
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees.) 318.57 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(77) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.78 (However, this \322lossy\323 approach is not necessarily the best suited to the needs of collaborating authors, even) 45.65 737.62 P
(though the synchronisation procedure is straight-forward.) 45.65 724.62 T
-0.53 (An alternative mechanism would be to retain) 45.65 704.62 P
3 F
-0.53 (both) 242.66 704.62 P
0 F
-0.53 ( the paragraphs within a structure which flags this as a conflict) 262.22 704.62 P
-0.23 (which the system cannot resolve\321essentially preserving the text for the authors to sort out later. This approach) 45.65 691.62 P
1.01 (preserves syntactic \050structural\051 consistency, enabling further work by the collaborators while not losing any) 45.65 678.62 P
-0.51 (data. As it happens, it also mirrors the behaviour of some collaborative writers using single-user tools \050Beck and) 45.65 665.62 P
0.98 (Bellotti, 1993\051. By only preserving syntactic consistency in some cases, rather than semantic consistency, a) 45.65 652.62 P
0.04 (divergence-based system can achieve synchronisation more often, and continue operation in the face of poten-) 45.65 639.62 P
0.91 (tial problems. Consistency from the users\325 perspective is often not the same as consistency from that of the) 45.65 626.62 P
(system.) 45.65 613.62 T
2 12 Q
(6.2.2  Consistency Guarantees) 45.65 589.95 T
0 11 Q
-0.36 (The second technique, which will be the focus of the rest of this chapter, is to enhance consistency management) 45.65 572.62 P
1.45 (by allowing the toolkit to exploit application semantics. This requires some explanation, since Prospero is) 45.65 559.62 P
3.19 (designed independently of specific applications; how can application semantics be used in the toolkit) 45.65 546.62 P
(mechanisms?) 45.65 533.62 T
-0.47 (The solution to this conundrum lies in the) 45.65 513.62 P
3 F
-0.47 (way) 228.26 513.62 P
0 F
-0.47 (in which the toolkit is general) 248.26 513.62 P
3 F
-0.47 (.) 376.97 513.62 P
0 F
-0.47 (Although the notion of divergence) 382 513.62 P
0.27 (and synchronisation, as a basis for managing a collaborative data store, is a general one, it is not) 45.65 500.62 P
3 F
0.27 (realised) 476.11 500.62 P
0 F
0.27 ( as a) 511.56 500.62 P
0.3 (generality; instead, it emerges as it is applied in) 45.65 487.62 P
3 F
0.3 (specific) 260.4 487.62 P
0 F
0.3 ( applications. It is general \050rather than particular\051, but) 294.01 487.62 P
0.36 (concrete \050rather than abstract\051; and the generality is made particular when it is used to implement a particular) 45.65 474.62 P
0.91 (application, using the general structures in a particular way. In turn, these particular solutions do more than) 45.65 461.62 P
(simply particularise the mechanisms of the toolkit, but also draw in the details of the application domain.) 45.65 448.62 T
-0.12 (In other words, in any given case the application developer can employ specialist knowledge of the application) 45.65 428.62 P
0.97 (semantics to describe locally-effective techniques for synchronisation. The application\325s specific patterns of) 45.65 415.62 P
-0.08 (collaboration over structured information offer the opportunity to define more effective synchronisation strate-) 45.65 402.62 P
-0.55 (gies; a programmer is better able to describe synchronisation of spreadsheet data than synchronisation of \322data\323.) 45.65 389.62 P
-0.24 (Chapter 4 showed that this is a feature of the Open Implementation. The abstractions provided in the toolkit are) 45.65 376.62 P
-0.39 (specifically designed to be specialised in a range of circumstances, drawing on more detailed information avail-) 45.65 363.62 P
(able in particular settings.) 45.65 350.62 T
-0.04 (In the examples in the previous chapter, we saw how the synchronisation process could be defined specifically) 45.65 330.62 P
-0.44 (for different applications, and in particular, the third example shows the use of aggregation \050to achieve syntactic) 45.65 317.62 P
(consistency\051 in an application situation which made it acceptable.) 45.65 304.62 T
-0.41 (However, while using application-specific synchronisation might) 45.65 284.62 P
3 F
-0.41 (postpone) 333.1 284.62 P
0 F
-0.41 ( some of the problems of unbounded) 372.82 284.62 P
0.51 (divergence, the problems remain with us. So far, we have improved the synchronisation process, but still not) 45.65 271.62 P
-0.09 (done anything to constrain divergence. We need to go further; and so Prospero introduces the notion of) 45.65 258.62 P
3 F
-0.09 (consis-) 500.48 258.62 P
0.94 (tency guarantees) 45.65 245.62 P
0 F
0.94 ( as a control for the divergence process. However, before outlining Prospero\325s approach in) 121.43 245.62 P
(more detail, I will begin with the mechanism they generalise\321locks.) 45.65 232.62 T
2 F
(6.2.2.1  Constraining Divergence with Locks) 45.65 205.62 T
0 F
-0.25 (As discussed in Chapter 5, the most obvious traditional mechanism for constraining divergence \050or, more accu-) 45.65 188.62 P
0.72 (rately, for avoiding it altogether\051 is) 45.65 175.62 P
3 F
0.72 (locking) 206.69 175.62 P
0 F
0.72 (. Locking is widely used in current CSCW systems. Implicitly or) 239.07 175.62 P
0.47 (explicitly, a user obtains a \322lock\323 for some or all of the data store. Since update access is restricted to clients) 45.65 162.62 P
-0.22 (holding a current lock, the availability of locks controls the emergence of divergence; and since, in typical con-) 45.65 149.62 P
-0.34 (figurations, only one client can hold a lock on a given piece of data at any time, divergence is avoided. This sort) 45.65 136.62 P
0.39 (of locking behaviour can also be exhibited by systems in which locks don\325t appear explicitly in the interface;) 45.65 123.62 P
-0.33 (floor-control algorithms and other forms of asynchronous access are also particular cases of the general locking) 45.65 110.62 P
(approach.) 45.65 97.62 T
FMENDPAGE
%%EndPage: "77" 77
%%Page: "78" 78
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(78) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.52 (A wide range of locking strategies exist, varying in how locks are requested, obtained, granted and relinquished,) 63.65 737.62 P
0.23 (what kinds of operations require locks, and the granularity of data units controlled by a single lock. However,) 63.65 724.62 P
-0.19 (the basic pattern remains the same, and so do the basic problems of locking for CSCW applications. Locking is) 63.65 711.62 P
0.06 (a) 63.65 698.62 P
3 F
0.06 (pessimistic) 71.34 698.62 P
0 F
0.06 ( concurrency strategy; on the assumption that any conflict could be damaging, it prevents conflict) 119.62 698.62 P
-0.34 (arising in the first place. Locking restricts activity on the data store, and hence restricts the activity of users, due) 63.65 685.62 P
(to the interaction of application, infrastructure and interface discussed by Greenberg and Marwood \0501992\051.) 63.65 672.62 T
-0.01 (The pessimistic strategy of traditional locking is quite appropriate in many applications, to avoid the danger of) 63.65 652.62 P
-0.16 (conflict and potential inconsistency. For applications in which data integrity is critical, and intra-group interac-) 63.65 639.62 P
-0.08 (tivity low\321such as collaborative software development\321locking strategies \050such as the check-out model\051 can) 63.65 626.62 P
0.75 (be valuable, appropriate and effective. In other applications, though, strict locking mechanisms can interfere) 63.65 613.62 P
0.26 (with group interaction. Some systems, such as the ShrEdit shared text editor \050McGuffin and Olson, 1992\051 use) 63.65 600.62 P
3 F
0.35 (implicit) 63.65 587.62 P
0 F
0.35 ( locks, which are silently obtained and released in the course of editing activity, to reduce the level of) 97.26 587.62 P
-0.26 (interference and overhead. However, the locking strategy is still visible to the group through the effect it has on) 63.65 574.62 P
0.38 (the interface, even in cases where working activity would not result in conflict or inconsistency \050Dourish and) 63.65 561.62 P
-0.4 (Bellotti, 1992\051. In the case of even less structured, free-form data collaboration such as a shared whiteboard, the) 63.65 548.62 P
(interactionaloverheadeven the interactional overhead of implicit locking becomes unwieldy.) 63.65 535.62 T
0.39 (This potential for inflexibility makes pure locking an inappropriate model in Prospero, since the commitment) 63.65 515.62 P
0.1 (to pessimistic concurrency control undermines the different requirements of different applications. The toolkit) 63.65 502.62 P
-0.14 (must embody more flexible mechanisms which can be adapted or appropriated for a range of application needs) 63.65 489.62 P
0.8 (and interactional styles. Clearly, something more flexible than locking\321even when supported by a range of) 63.65 476.62 P
(strategies\321is needed.) 63.65 463.62 T
2 F
(6.2.2.2  Promises and Guarantees) 63.65 436.62 T
0 F
0.24 (In an attempt to find a more flexible approach than the strict locking mechanism, and one more attuned to the) 63.65 419.62 P
0.03 (needs of a CSCW toolkit, our starting point is with a generalisation of the traditional locking process. Locking) 63.65 406.62 P
1.43 (is essentially a means by which a client) 63.65 393.62 P
0 8.8 Q
1.14 (1) 246.88 398.02 P
0 11 Q
1.43 ( receives some guarantee of future consistency in exchange for a) 251.28 393.62 P
0.23 (description of the client\325s future activity; the client commits to restrict edit activity to the locked area, and the) 63.65 380.62 P
-0.11 (server commits to achieving consistency when the edit is complete, by locking out other users. So this general-) 63.65 367.62 P
0.78 (isation is the first principle of consistency guarantees: regard locks as) 63.65 354.62 P
3 F
0.78 (guarantees of achievable consistency) 380.5 354.62 P
0 F
0.78 (,) 546.9 354.62 P
(given in exchange for) 63.65 341.62 T
3 F
(promises about future activity) 162.01 341.62 T
0 F
(.) 293.7 341.62 T
(Immediately, this view has a number of interesting implications.) 63.65 321.62 T
-0.1 (First, there\325s clearly a wide range of such guarantees which could be made. When we think in terms of guaran-) 63.65 301.62 P
-0 (tees of consistency, then we can consider distinguishing between different) 63.65 288.62 P
3 F
-0 (degrees) 392.64 288.62 P
0 F
-0 ( of consistency, and the fact) 426.86 288.62 P
0.19 (that a guarantee may only hold for limited consistency \050in the worst case, perhaps, just syntactic consistency\051.) 63.65 275.62 P
0.69 (Determining the achievable level of consistency is the responsibility of the server, based on currently-issued) 63.65 262.62 P
-0.04 (promises and the information about future activity which the client provides. The nature of these client \322prom-) 63.65 249.62 P
-0.33 (ises\323 will be discussed in more detail shortly; for now, though, it is enough to say that they are characterisations) 63.65 236.62 P
-0.02 (of expected behaviour, such as whether the client will simply read data, write new data but not delete anything) 63.65 223.62 P
-0.5 (current, delete or modify existing data, and so forth. Similarly, they might be more or less restricted to particular) 63.65 210.62 P
(areas of the workspace \050that is, they have variable) 63.65 197.62 T
3 F
(extent) 286.02 197.62 T
0 F
(\051.) 312.29 197.62 T
-0.55 (Second, the promises could vary in specificity and detail, just as the guarantees can vary. The level of specificity) 63.65 177.62 P
-0.07 (of a client promise, or the region over which it extends, might vary from application to application, from client) 63.65 164.62 P
-0.58 (to client, or from moment to moment, depending on the immediate circumstances of the collaboration. By defin-) 63.65 151.62 P
63.65 110.95 549.65 131.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 118.94 195.62 118.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(1.  Although I use the terms) 63.65 104.95 T
3 F
(client) 166.14 104.95 T
0 F
( and) 186.14 104.95 T
3 F
(server) 203.63 104.95 T
0 F
(, these mechanisms also apply to peer) 225.76 104.95 T
(-to-peer structures. In fact, Prospero uses a peer) 361.31 104.95 T
(-to-) 532.83 104.95 T
(peer model.) 63.65 94.95 T
FMENDPAGE
%%EndPage: "78" 78
%%Page: "79" 79
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees.) 318.57 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(79) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.19 (ing the model in terms of promises and guarantees, rather than simply in terms of locks, we gain the ability to) 45.65 737.62 P
(exploit this openness within the toolkit and in particular applications.) 45.65 724.62 T
-0.33 (Third, and perhaps most importantly, when we think of this exchange as being less absolute than the strict lock-) 45.65 704.62 P
-0.45 (ing exchange \050an absolute guarantee for an absolute promise\051, then it becomes obvious that this is a) 45.65 691.62 P
3 F
-0.45 (negotiation) 478.47 691.62 P
0 F
-0.45 (;) 528.59 691.62 P
3.1 (a client may make increasingly restrictive promises in exchange for increasingly strong guarantees of) 45.65 678.62 P
(consistency.) 45.65 665.62 T
1.07 (The use of this sort of mechanism allows better interleaving of activity. From the server side, having more) 45.65 645.62 P
0.63 (details of future activity means that better decisions can be made about which actions can be simultaneously) 45.65 632.62 P
-0.25 (performed by multiple users. From the client side, the ability to accept weaker guarantees than locks may allow) 45.65 619.62 P
-0.39 (activity to proceed where otherwise it would be blocked. This flexible interleaving retains the important) 45.65 606.62 P
3 F
-0.39 (predic-) 499.88 606.62 P
0.99 (tive) 45.65 593.62 P
0 F
0.99 ( element of locking\321that is, the client still makes \322up-front\323 promises of future activity which give the) 61.53 593.62 P
(server a better picture of the extent of future divergence and so enable more informed decision-making.) 45.65 580.62 T
2 F
(6.2.2.3  Breaking a Promise) 45.65 553.62 T
0 F
-0.38 (This promise/guarantee generalisation still suffers one of the major problems with the locking approach applied) 45.65 536.62 P
-0.22 (to CSCW. Since it states that divergence is preceded by a description of expected activities, then the possibility) 45.65 523.62 P
0.68 (of opportunistic activity is still restricted. This was raised earlier as a criticism of traditional locking mecha-) 45.65 510.62 P
-0.51 (nisms, which interfere with the way in which collaborative work proceeds naturalistically. Obviously a redesign) 45.65 497.62 P
(should address this problem.) 45.65 484.62 T
0.03 (The second principle of the consistency guarantees approach is introduced to deal with this:) 45.65 464.62 P
3 F
0.03 (a client can break) 452.43 464.62 P
-0.04 (a promise, in which case the server is no longer held to its guarantee) 45.65 451.62 P
0 F
-0.04 (. So the characterisation of future activity) 349.49 451.62 P
-0.58 (which a client makes\321its promise\321may not be binding; when the time comes, the client \050or the user\051 may actu-) 45.65 438.62 P
0.22 (ally do something else. However, in this case, the server can no longer be held to the guarantee it made of the) 45.65 425.62 P
(level of consistency which can be achieved. The guarantee is only honoured when the promise is kept.) 45.65 412.62 T
1.17 (With this second principle in place, the consistency guarantee mechanism provides more direct support for) 45.65 392.62 P
-0.03 (opportunistic working styles, as well as allowing for the multi-synchronous applications introduced in Chapter) 45.65 379.62 P
-0.52 (5. Just as in naturalistic work, stepping outside previously-agreed lines is not prevented; but the mechanism pro-) 45.65 366.62 P
-0.59 (vides stronger guarantees when used cooperatively by both client and server. Of course, the user need not \050often,) 45.65 353.62 P
3 F
-0.25 (should) 45.65 340.62 P
0 F
-0.25 ( not\051 be exposed to this complexity and unpredictability. In Prospero, these facilities are provided so that) 74.99 340.62 P
0.76 (they can be appropriately deployed \050or not\051 by an application developer. The developer might choose) 45.65 327.62 P
3 F
0.76 (not) 505.52 327.62 P
0 F
0.76 ( to) 519.58 327.62 P
0.95 (exploit the second principle) 45.65 314.62 P
3 F
0.95 (in a given application) 174.12 314.62 P
0 F
0.95 (, where application requirements or usage patterns would) 273.24 314.62 P
0.19 (make it inappropriate. Examples might include cases where the resulting conflicts may be too difficult to syn-) 45.65 301.62 P
-0.02 (chronise later, or where loss of integrity in the data-store would be unacceptable. In other cases, an application) 45.65 288.62 P
0.14 (developer might want to warn the user when such a situation was likely to occur, so that an informed decision) 45.65 275.62 P
0.72 (could be made as appropriate to the particular circumstances. The framework supports these behaviours, but) 45.65 262.62 P
(does not require them.) 45.65 249.62 T
2 14 Q
(6.3  Consistency and Concurrency in Database Research) 45.65 222.62 T
0 11 Q
-0.07 (The variable consistency mechanism outlined in section 6.2.1 used knowledge of application semantics to spe-) 45.65 200.62 P
0.83 (cialise and improve the synchronisation process. Essentially, the consistency guarantee approach outlined in) 45.65 187.62 P
-0.44 (section 6.2.2 uses knowledge of application semantics\321and the semantics of particular operations\321to increase) 45.65 174.62 P
0.53 (the) 45.65 161.62 P
3 F
0.53 (opportunities) 62.37 161.62 P
0 F
0.53 ( for concurrency and parallel activity. Perhaps unsurprisingly, similar approaches have been) 121.04 161.62 P
0.4 (explored in database design, since database management systems also involve multi-user activity over shared) 45.65 148.62 P
-0.26 (and perhaps replicated data. Barghouti and Kaiser \0501991\051 provide a comprehensive survey of advanced concur-) 45.65 135.62 P
-0.63 (rency control techniques. However, since databases tend to hide the activities of multiple parties from each other) 45.65 122.62 P
0.19 (\050preserving the illusion of sole access to a system\051, the primary \050although not exclusive\051 focus of the database) 45.65 109.62 P
-0.11 (community has been on using concurrency to improve performance rather than to open up data models for col-) 45.65 96.62 P
FMENDPAGE
%%EndPage: "79" 79
%%Page: "80" 80
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(80) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.73 (laboration. Two aspects of database research are particularly related to the consistency guarantees approach:) 63.65 737.62 P
3 F
(semantics-based concurrency) 63.65 724.62 T
0 F
( and) 194.09 724.62 T
3 F
(application-specific conflict resolution) 215.47 724.62 T
0 F
(.) 385.97 724.62 T
2 12 Q
(6.3.1  Semantics-Based Concurrency) 63.65 700.95 T
0 11 Q
-0.12 (Database systems use a transaction model to partition the instruction stream. Transactions provide serialisation) 63.65 683.62 P
-0.57 (and atomicity. However, transactions might be executed in parallel or interleaved, without interfering with these) 63.65 670.62 P
0.59 (properties, if the system can detect that there is no conflict between them. The interaction-time and response) 63.65 657.62 P
-0.5 (characteristics of database systems are frequently such that the calculation of appropriate serialisation orders for) 63.65 644.62 P
-0.14 (transaction streams has no significant impact on interactive performance. However, shared data stores support-) 63.65 631.62 P
1.22 (ing interactive collaborative systems require crisp performance, and so it is useful to look at how database) 63.65 618.62 P
(research has investigated the opportunities to increase concurrency in transaction execution.) 63.65 605.62 T
1 (Traditional database systems detect two principal forms of conflict. A) 63.65 585.62 P
3 F
1 (write/write) 383.72 585.62 P
0 F
1 ( conflict occurs when two) 432.01 585.62 P
0.3 (transactions write to the same location in the database. An ordering must be established for these transactions) 63.65 572.62 P
0.5 (to retain the model of atomic, serialised execution. A) 63.65 559.62 P
3 F
0.5 (read/write) 304.35 559.62 P
0 F
0.5 ( conflict occurs when one transaction writes,) 350.19 559.62 P
-0.43 (and the other reads, the same data. Inconsistency can result if the read falls before the write during simultaneous) 63.65 546.62 P
-0.35 (or interleaved execution. If conflicting transactions are executed concurrently then the transaction model\325s seri-) 63.65 533.62 P
(alisation properties may be lost; so conflicting transactions must be executed serially.) 63.65 520.62 T
0.18 (However, this is a very expensive way to maintain the transaction model, since the analysis of conflict is very) 63.65 500.62 P
-0.28 (coarse-grained. In the absence of transaction conflicts, the system can guarantee that the transactions can safely) 63.65 487.62 P
0.93 (be executed in parallel. On the other hand, the presence of a conflict does not imply that inconsistency) 63.65 474.62 P
3 F
0.93 (will) 533.14 474.62 P
0 F
0.51 (result. For example, consider a transaction which issues a read request but doesn\325t use that result as part of a) 63.65 461.62 P
-0.6 (later computation \050or does, but is robust to particular changes\051. It could, quite safely, be executed in parallel with) 63.65 448.62 P
-0.46 (another which writes that same data. Although no actual conflict would occur, conventional transaction systems) 63.65 435.62 P
0.36 (would signal a) 63.65 422.62 P
3 F
0.36 (read/write) 131.64 422.62 P
0 F
0.36 ( conflict, and so the potential concurrency would be lost. More generally \050and more) 177.47 422.62 P
0.54 (practically\051, transaction concurrency \050and hence throughput\051 could be improved with more detailed access to) 63.65 409.62 P
(transaction semantics, or to application semantics.) 63.65 396.62 T
0.32 (Approaches of this sort have been explored by a number of researchers. For instance, Herlihy \0501990\051 exploits) 63.65 376.62 P
0.08 (the semantics of operations over abstract data types to produce validation criteria, applied before commit-time) 63.65 363.62 P
-0.07 (to validate transaction schedules. His approach uses predefined sets of conflicting operations, derived from the) 63.65 350.62 P
-0.44 (data type specifications. Farrag and Oszu \0501989\051 exploit operation semantics by introducing a breakpoint mech-) 63.65 337.62 P
0.67 (anism into transactions, producing transaction schedules in which semantically-safe transaction interleavings) 63.65 324.62 P
(are allowed.) 63.65 311.62 T
-0.14 (One potential problem with each of these approaches is that they require pre-computation of conflicts, compat-) 63.65 291.62 P
2.44 (ibilities and safe partial breakpoints. The implication is that these mechanisms could not be seamlessly) 63.65 278.62 P
0.19 (integrated into a general-purpose database management system. However, this factor does not pose a problem) 63.65 265.62 P
0.18 (for using semantically-based techniques in Prospero, since Prospero does not need to provide a complete gen-) 63.65 252.62 P
-0.43 (eral-purpose service independent of any application. Instead, it provides a framework within which application-) 63.65 239.62 P
0.71 (specific semantics can be) 63.65 226.62 P
3 F
0.71 (coded) 180.74 226.62 P
0 F
0.71 (\050rather than interpreted\051. Particular behaviours are coded in Prospero in full) 210.47 226.62 P
(knowledge of the relevant semantic structure of application operations.) 63.65 213.62 T
2 12 Q
(6.3.2  Application-Speci\336c Con\337ict Resolution) 63.65 189.95 T
0 11 Q
-0.52 (A second approach from database research which is relevant to the consistency guarantees mechanism is the use) 63.65 172.62 P
0.52 (of application-specific conflict resolution. The Bayou system, under development at Xerox PARC, is a repli-) 63.65 159.62 P
0.24 (cated database system for mobile computers, which are frequently active but disconnected from their peers. It) 63.65 146.62 P
0.4 (provides a mechanism by which client applications can become involved in the resolution of database update) 63.65 133.62 P
(conflict which can occur with replicated, partially-disconnected databases \050Demers et al., 1994\051.) 63.65 120.62 T
FMENDPAGE
%%EndPage: "80" 80
%%Page: "81" 81
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees.) 318.57 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(81) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.33 (Bayou write operations can include) 45.65 737.62 P
3 F
0.33 (mergeprocs) 205.83 737.62 P
0 F
0.33 (\321segments of code which are interpreted within the database) 257.77 737.62 P
-0 (system and provide application-specific management of conflicts. For example, in a meeting scheduling appli-) 45.65 724.62 P
0.2 (cation, a write \050carrying a record of a scheduled meeting\051 might be accompanied with code which would shift) 45.65 711.62 P
0.09 (the meeting to alternative times if the desired meeting slot is already booked. Mergeprocs provide a means for) 45.65 698.62 P
-0.48 (application specifics to be exploited within the general database framework. Bayou also provides \322session guar-) 45.65 685.62 P
1.16 (antees\323 \050Terry et al., 1994\051 which give applications control over the degree of consistency they require for) 45.65 672.62 P
-0.43 (effective operation in specific circumstances. Clients can trade data consistency for the ability to keep operating) 45.65 659.62 P
-0.24 (in disconnected conditions. Both of these techniques are based on an approach similar to that exploited in Pros-) 45.65 646.62 P
0.93 (pero\321allowing clients to become involved in the way in which infrastructure support is configured to their) 45.65 633.62 P
(particular needs.) 45.65 620.62 T
1.22 (More generally, one focus of research, particularly in databases supporting software development or CAD/) 45.65 600.62 P
0.26 (CAM, has been on variants of the transaction model which support long-duration and group transactions \050e.g.) 45.65 587.62 P
-0.23 (Kaiser, 1994\051. These are variants which exploit a general style of interaction, rather than the specifics of partic-) 45.65 574.62 P
(ular applications; however, they do begin to address the needs of inherently collaborative applications.) 45.65 561.62 T
2 14 Q
(6.4  Encoding Promises and Guarantees) 45.65 534.62 T
0 11 Q
-0 (The use of activity descriptions and consistency guarantees, as outlined above, provides a framework in which) 45.65 512.62 P
-0.37 (the semantics of operations and applications can be used to improve concurrency management for collaborative) 45.65 499.62 P
-0.31 (work. Before we can go on to look at some examples of these techniques in use, however, the issue of represen-) 45.65 486.62 P
-0.47 (tation must be addressed. How can Prospero represent and encode the semantic properties on which consistency) 45.65 473.62 P
(guarantees are based?) 45.65 460.62 T
2 12 Q
(6.4.1  Semantics-Free Semantics) 45.65 436.95 T
0 11 Q
-0.66 (The primary role of the semantic descriptions which are the basis of this mechanism is to provide a) 45.65 419.62 P
3 F
-0.66 (point of coor-) 472.47 419.62 P
6.11 (dination) 45.65 406.62 P
0 F
6.11 ( between the pre-divergence point \050the \322promise\323 phase\051 and the post-divergence point) 82.32 406.62 P
0.82 (\050\322synchronisation\323\051. The efficacy of the approach is dependent on this coordination\321the system\325s ability to) 45.65 393.62 P
-0.51 (identify and subsequently recognise semantic properties\321rather than on a detailed, structured semantic account) 45.65 380.62 P
0.09 (of user-level operations. So while the properties on which we would like to base our descriptions are) 45.65 367.62 P
3 F
0.09 (semantic) 492.54 367.62 P
0 F
-0.13 (properties, the descriptions themselves do not have to) 45.65 354.62 P
3 F
-0.13 (have) 283.25 354.62 P
0 F
-0.13 ( semantics. Application programmers need a way to) 304.02 354.62 P
-0.16 (refer to semantic properties, but not a language of semantics. It is sufficient to be able to distinguish and recog-) 45.65 341.62 P
(nise semantic property) 45.65 328.62 T
6 9 Q
(foo) 147.99 328.62 T
0 11 Q
(, without having to give an account of what) 164.19 328.62 T
6 9 Q
(foo) 357.89 328.62 T
3 11 Q
(means) 376.84 328.62 T
0 F
(.) 404.95 328.62 T
-0.14 (This simplifies the problem immensely, by turning it from a) 45.65 308.62 P
3 F
-0.14 (description) 310.98 308.62 P
0 F
-0.14 ( problem into a) 360.48 308.62 P
3 F
-0.14 (naming) 429.58 308.62 P
0 F
-0.14 ( problem. Since) 462.58 308.62 P
0.36 (the particular semantic properties which are useful in managing concurrency are entirely application-specific,) 45.65 295.62 P
0.14 (they are named\321for the purpose of coordination\321by the application developer. What\325s required of Prospero,) 45.65 282.62 P
0.61 (then, is the means to name them, to associate them with particular operations, and subsequently to recognise) 45.65 269.62 P
(them in the process of managing promises and synchronising streams.) 45.65 256.62 T
2 12 Q
(6.4.2  Class-based Encoding) 45.65 232.95 T
0 11 Q
-0.59 (Prospero accomplishes this through) 45.65 215.62 P
3 F
-0.59 (class-based encoding) 202.77 215.62 P
0 F
-0.59 (. The semantic properties for an application are named) 296.58 215.62 P
-0.31 (as classes in an object-oriented framework. Particular operations are represented explicitly as command objects) 45.65 202.62 P
0.71 (\050Berlage, 1994\051; that is, invocations of any operation are represented explicitly as objects within the system.) 45.65 189.62 P
0.14 (Each instance of a command object represents a particular invocation, along with any relevant parameters and) 45.65 176.62 P
1.47 (contextual information. Command objects multiply inherit from the classes which represent their semantic) 45.65 163.62 P
-0.4 (properties; the objects themselves represent the commands, while the class hierarchy encode the semantic prop-) 45.65 150.62 P
(erties of the commands\325 actions.) 45.65 137.62 T
-0.15 (The use of explicit command objects is, in itself, a useful mechanism for representing sequences of actions and) 45.65 117.62 P
-0.19 (arriving at appropriate mechanisms for resolving conflicts which might arise; but encoding semantic properties) 45.65 104.62 P
-0.1 (in the inheritance structure of the command objects yields two particular benefits for the problems which Pros-) 45.65 91.62 P
FMENDPAGE
%%EndPage: "81" 81
%%Page: "82" 82
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(82) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.14 (pero seeks to address. First, the mechanism is inherently extensible. The application developer can create new) 63.65 737.62 P
-0.37 (semantic properties from existing ones within the same mechanism that she uses to create application structures) 63.65 724.62 P
1.8 (and objects \050i.e. subclassing and specialisation\051. Second, class-based encoding allows semantically-related) 63.65 711.62 P
-0.33 (behaviours to be defined in a declarative style. In the application, behaviours related to different semantic prop-) 63.65 698.62 P
-0.65 (erties \050or combinations of them\051 are written separately as methods specialised on the relevant classes, rather than) 63.65 685.62 P
0.4 (in a complex, monolithic synchronisation handler. This allows the programmer to rely on the object system\325s) 63.65 672.62 P
-0.61 (dynamic dispatch mechanism to match semantic properties \050classes\051 to associated behaviours \050methods\051 for par-) 63.65 659.62 P
-0.29 (ticular command objects. In turn, this encourages a modular separation of code segments based on the semantic) 63.65 646.62 P
(properties themselves, rather than on the procedural resolution of those properties.) 63.65 633.62 T
2 14 Q
(6.5  Using Consistency Guarantees) 63.65 606.62 T
0 11 Q
0.42 (To provide a more detailed illustration of the use of consistency guarantees in collaborative applications, this) 63.65 584.62 P
-0.42 (section presents two more extended examples, along with the framework Lisp) 63.65 571.62 P
-0.42 (code which implements them. As) 404.39 571.62 P
-0.09 (with the examples in the last chapter, these are small fragments intended to illustrate the general principles; for) 63.65 558.62 P
1.34 (explanatory purposes it is sometimes necessary to include more code, and sometimes less, than is actually) 63.65 545.62 P
0.13 (needed with Prospero. Similarly, the focus here is simply on those aspects of Prospero concerned with consis-) 63.65 532.62 P
3.43 (tency guarantees; the examples illustrate the use and manipulation of the \322promise\323 and \322guarantee\323) 63.65 519.62 P
0.2 (abstractions. Chapter 7 will present more detailed examples of using the Prospero implementation as a whole.) 63.65 506.62 P
0.69 (Primarily, the examples here show how application-specific semantic properties can be used within a toolkit) 63.65 493.62 P
-0.33 (framework to manage concurrency. Clearly, semantically-informed concurrency control could be used in hand-) 63.65 480.62 P
1 (coded applications, on a case-by-case basis; the issue here is how these application-specific features can be) 63.65 467.62 P
(exploited within a generalised toolkit.) 63.65 454.62 T
2 12 Q
(6.5.1  A Shared Bibliographical Database) 63.65 430.95 T
0 11 Q
0.11 (A simple example of an application whose collaborative performance can be enhanced by exploiting semantic) 63.65 413.62 P
-0.12 (information is a shared database for bibliographical information. The key property which we want to exploit in) 63.65 400.62 P
-0.23 (this example is that updates to the database are normally non-destructive. Updates will typically add new infor-) 63.65 387.62 P
0.89 (mation, rather than removing or changing information already present. Simultaneous appends are much less) 63.65 374.62 P
(likely to cause conflicts that simultaneous revisions, but would be prevented by standard \322strong\323 locks.) 63.65 361.62 T
63.65 87.95 549.65 744.95 C
90.65 87.95 522.65 339.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 120.95 513.65 330.95 R
7 X
0 0 0 1 0 0 0 K
V
6 9 Q
0 X
(\050let \050\050guarantee \050request \050remote-stream\051 <read> <safe-write>\051\051\051) 99.65 324.95 T
(;; ... editing actions ...) 110.45 311.95 T
(\050synchronise-with-guarantee \050my-stream\051 \050remote-stream\051 guarantee\051\051) 110.45 298.95 T
(\050defmethod grant-guarantee \050stream \050operation <safe-write>\051\051) 99.65 280.95 T
(;; ... always ok ...) 110.45 267.95 T
(\050let \050\050guarantee \050construct-guarantee <auto-consistent> stream\051\051\051) 110.45 254.95 T
(\050push guarantee \050stream-guarantees \050local-stream\051\051\051\051) 121.25 241.95 T
(\050defmethod grant-guarantee \050stream \050action <write>\051\051) 99.65 223.95 T
(;; ... sometimes restricted ....) 110.45 210.95 T
(\050if \050compatible-action <auto-consistent> <write>\051) 110.45 197.95 T
(\050construct-guarantee <refused-guarantee>\051) 132.05 184.95 T
(\050push \050construct-guarantee <auto-consistent> stream\051) 121.25 171.95 T
(\050stream-guarantees \050local-stream\051\051\051\051) 153.65 158.95 T
(\050defmethod grant-guarantee \050stream object \050action <read>\051\051) 99.65 140.95 T
(;; ... always ok ...) 110.45 127.95 T
108.65 95.95 504.65 114.95 R
7 X
V
0 11 Q
0 X
(FIGURE 6.1: Methods defining access to the shared bibliographical database..) 108.65 107.62 T
63.65 87.95 549.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "82" 82
%%Page: "83" 83
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees.) 318.57 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(83) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.74 (We can take advantage of this feature by introducing a class of actions which correspond to non-destructive) 45.65 737.62 P
-0.51 (writes. A standard access mode for the collaborative database during disconnected operation, then, would be the) 45.65 724.62 P
(combination of read and non-destructive write, and could be encoded in Prospero as shown in figure 6.1.) 45.65 711.62 T
-0.27 (So, in the initial code fragment, the editing actions are bracketed by a request/synchronisation pair. The generic) 45.65 691.62 P
0.26 (function) 45.65 678.62 P
6 9 Q
0.51 (request) 85.32 678.62 P
0 11 Q
0.26 ( requests) 123.12 678.62 P
0 8.8 Q
0.21 (2) 162.18 683.02 P
0 11 Q
0.26 ( a guarantee for the local data stream, specifying that the expected behaviours will) 166.58 678.62 P
0.21 (be of types) 45.65 665.62 P
6 9 Q
0.42 (<read>) 97.3 665.62 P
0 11 Q
0.21 ( and) 129.7 665.62 P
6 9 Q
0.42 (<safe-write>) 151.51 665.62 P
0 11 Q
0.21 ( \050non-destructive writes\051. The guarantee that it receives is subsequently) 216.31 665.62 P
(used as part of the synchronisation process.) 45.65 652.62 T
0.02 (As far as making the guarantee is concerned, the application adopts the policy that, like read capabilities, safe-) 45.65 632.62 P
(write capabilities can be granted to multiple clients at a time.) 45.65 619.62 T
1.46 (The generic function) 45.65 599.62 P
6 9 Q
2.86 (grant-guarantee) 144.41 599.62 P
0 11 Q
1.46 ( deals with the server side of the transaction. The programmer has) 225.41 599.62 P
0.72 (defined methods to handle the specific cases here where application semantics are to be used. So, the server) 45.65 586.62 P
0.85 (grants guarantees for read operations and for safe-write operations \050although they receive different levels of) 45.65 573.62 P
0.41 (consistency, which are also class-encoded\051. However, for general write operations, a guarantee is only issued) 45.65 560.62 P
0.27 (when no other guarantee has been granted to another writing client. Guarantees are recorded so that they may) 45.65 547.62 P
(be used as the basis of later decision-making, as well as for synchronisation purposes later.) 45.65 534.62 T
0.08 (If this application were coded using only strong locks, then any update activity would lock out other users. By) 45.65 514.62 P
0.16 (using consistency guarantees, the programmer can specialise the locking mechanism to accommodate the par-) 45.65 501.62 P
(ticular semantics of this application, and so arrange to increase concurrent cooperative work.) 45.65 488.62 T
2 12 Q
(6.5.2  Collaborative T) 45.65 464.95 T
(ext Editing) 158.36 464.95 T
0 11 Q
0.7 (The previous example showed the selective granting of consistency guarantees based on characterisations of) 45.65 447.62 P
-0.26 (expected behaviour\321the semantics of activity during the period of divergence. This second example illustrates) 45.65 434.62 P
-0.56 (the use of semantic properties in synchronisation. Consider a collaborative text editing system in which multiple) 45.65 421.62 P
-0.19 (authors work on a single document, obtaining guarantees at the level of paragraphs or sections. As in the previ-) 45.65 408.62 P
-0.4 (ous example, the guarantees obtained before divergence are passed along at synchronisation-time. At this point,) 45.65 395.62 P
(the guarantee must be examined to verify that only promised actions were performed.) 45.65 382.62 T
45.65 100.95 531.65 121.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 108.94 177.62 108.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(2.  In this example, error conditions\321and in particular) 45.65 94.95 T
(, the refusal of a guarantee\321have been omitted for clarity) 241.76 94.95 T
(.) 449.61 94.95 T
45.65 87.95 531.65 744.95 C
76.03 121.04 501.26 346.37 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
73.78 143.04 496.78 336.04 R
7 X
0 0 0 1 0 0 0 K
V
6 9 Q
0 X
(\050defmethod synchronise-with-guarantee \050stream action-list guarantee\051) 73.78 330.04 T
(\050let \050\050promise \050guarantee-promise \050find-guarantee guarantee\051\051\051\051) 84.58 317.04 T
(\050if \050valid? action-list \050promise-properties promise\051\051) 95.38 304.04 T
(\050simple-synchronise stream action-list\051) 116.98 291.04 T
(\050salvage-synchronise stream action-list\051\051\051\051) 106.18 278.04 T
(\050defmethod simple-synchronise \050\050stream <stream>\051 action-list\051) 73.78 260.04 T
(\050dolist \050action action-list\051) 84.58 247.04 T
(\050synchronise-action stream action *stream*\051\051\051) 95.38 234.04 T
(\050defmethod salvage-synchronise-action \050\050stream <stream>\051 \050action <action>\051\051) 73.78 216.04 T
(\050if \050action-conflict? action \050stream-history *stream* :relative-to stream\051\051) 84.58 203.04 T
(;; definite conflict) 106.18 190.04 T
(\050syntactic-locally-perform-action action\051) 106.18 177.04 T
(\050if \050guarantee-conflict? action *guarantee-table*\051) 95.38 164.04 T
(;; potential conflict) 116.98 151.04 T
100.03 125.37 468.03 139.04 R
7 X
V
0 11 Q
0 X
(FIGURE 6.2: Methods for synchronisation of the collaborative writing example.) 100.03 131.71 T
45.65 87.95 531.65 744.95 C
-8.35 24.95 603.65 816.95 C
FMENDPAGE
%%EndPage: "83" 83
%%Page: "84" 84
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(84) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.28 (So there are two cases \050distinguished in figure 6.2 by the predicate) 63.65 737.62 P
6 9 Q
0.55 ( valid?) 359.37 737.62 P
0 11 Q
0.28 (\051. In the first case, the actions per-) 397.72 737.62 P
0.85 (formed by the client are those which were given in the promise. The promise has been upheld. In this case,) 63.65 724.62 P
-0.63 (synchronisation should be straightforward since the server was in a position to know what actions were expected) 63.65 711.62 P
-0.17 (beforehand. At this point, then, the type of the stream can be used to determine the appropriate synchronisation) 63.65 698.62 P
(method \050as in the examples presented in Chapter 5\051.) 63.65 685.62 T
-0.58 (In the second case, however, the system detects that the actions performed do not match those listed in the prom-) 63.65 665.62 P
0.54 (ise. The client has broken its promise. There are various ways in which this situation could have arisen; and,) 63.65 652.62 P
-0.18 (critically, since a number of them are important features of naturalistic work practice, we would like to provide) 63.65 639.62 P
-0.55 (as much support for them as possible. The generic function) 63.65 626.62 P
6 9 Q
-1.08 (salvage-synchronise) 321.19 626.62 P
0 11 Q
-0.55 ( is called to provide fall-back) 423.79 626.62 P
-0.25 (synchronisation. In this case, salvaging involves stepping through the actions attempting to apply them one-by-) 63.65 613.62 P
0.4 (one. By comparing the classes of the operations \050that is, their semantic characterisation\051 with the activities of) 63.65 600.62 P
0.28 (other streams, their compatibility can be determined. Actions compatible with activities performed \050and guar-) 63.65 587.62 P
(antees granted\051 since the divergence point can be applied directly; other actions must be processed specially.) 63.65 574.62 T
-0.67 (Here there are three different means of applying potentially conflicting actions locally. In the case of no conflicts) 63.65 554.62 P
-0.57 (we can use) 63.65 541.62 P
6 9 Q
-1.11 (locally-perform-action) 112.96 541.62 P
0 11 Q
-0.57 ( which incorporates the remote actions into the local data store. However,) 231.76 541.62 P
-0.1 (there are two cases of potential conflict. The first is where the remote operation conflicts with an action arising) 63.65 528.62 P
-0.16 (in another stream. In this case, the application reverts to syntactic consistency by calling) 63.65 515.62 P
6 9 Q
-0.32 (syntactic-locally-) 452.45 515.62 P
-1.27 (perform-action) 63.65 502.62 P
0 11 Q
-0.65 (, which applies the action preserving syntactic, rather than semantic, consistency. In the second) 139.25 502.62 P
-0.31 (case, the remote action conflicts with a guarantee which has since been made to some other stream. In this case,) 63.65 489.62 P
-0.5 (there are clearly various things that could be done; the application developer here chooses to apply the operation) 63.65 476.62 P
-0.54 (tentatively, although it may be necessary, later, to undo this and move to syntactic consistency instead. Note that) 63.65 463.62 P
0.45 (this decision\321to maintain consistency at the expense of actions under broken promises\321is a decision which) 63.65 450.62 P
0.26 (the application developer, rather than the toolkit developer, can make in particular circumstances. The default) 63.65 437.62 P
-0.67 (structures of the toolkit may provide frameworks around such decisions, but they can be revised to suit particular) 63.65 424.62 P
(application needs.) 63.65 411.62 T
2 14 Q
(6.6  Summary) 63.65 384.62 T
0 11 Q
1.16 (Chapter 5 presented a model of distributed data management which arose, in part, from the requirement to) 63.65 362.62 P
0.74 (address the interactional component which distinguishes CSCW applications from other distributed systems.) 63.65 349.62 P
-0.29 (However, control over the data distribution is only one half of the puzzle. The same distinction \050the distribution) 63.65 336.62 P
-0 (of the interface as well as data and application and its implications\051 must be also taken into account when con-) 63.65 323.62 P
-0.37 (sidering concurrency control in collaborative systems. Traditional algorithms typically maintain consistency by) 63.65 310.62 P
-0.05 (restricting concurrency. However, just as with data distribution, this approach is unsatisfactory in general, as it) 63.65 297.62 P
(often interferes with the flexible management of group activity.) 63.65 284.62 T
0.89 (The semantics of specific applications can be exploited to increase concurrency while maintaining adequate) 63.65 264.62 P
-0.02 (consistency in a collaborative data store. By looking in detail at the semantic properties of particular actions in) 63.65 251.62 P
0.24 (a CSCW system, we can find operations which can be performed in parallel without leading to inconsistency.) 63.65 238.62 P
-0.09 (Prospero exploits this by allowing application developers to encode and use specific semantic properties of the) 63.65 225.62 P
(application domain and the system\325s operations to enhance support for concurrency.) 63.65 212.62 T
0.28 (This chapter has introduced the notion of) 63.65 192.62 P
3 F
0.28 (consistency guarantees) 249.26 192.62 P
0 F
0.28 ( as a parallel technique to increase the effec-) 351.89 192.62 P
1.47 (tiveness of the explicit semantics approach. Essentially, consistency guarantees generalise locks, regarding) 63.65 179.62 P
0.43 (them as guarantees of some level of achievable consistency. This more flexible interpretation allows applica-) 63.65 166.62 P
0.41 (tions to balance freedom of action against eventual consistency as appropriate to the particular circumstances) 63.65 153.62 P
0.89 (of use. In addition, by allowing clients to break their promises of future activity \050and hence not holding the) 63.65 140.62 P
0.1 (server to its guarantee of later consistency\051, and by falling back to a model of syntactic consistency when nec-) 63.65 127.62 P
1.83 (essary, we can support opportunistic work without completely abandoning the synchronisation of parallel) 63.65 114.62 P
(activities.) 63.65 101.62 T
FMENDPAGE
%%EndPage: "84" 84
%%Page: "85" 85
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees.) 318.57 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(85) 523.65 64.62 T
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.42 (Prospero\325s goals are two-fold: first, to be able to create applications which more naturally support the flexibility) 45.65 737.62 P
-0.51 (of everyday activity; and second, to achieve a wider scope than traditional toolkits by finding ways to shed com-) 45.65 724.62 P
2.7 (mitments to particular styles of application design and interaction support. Both in the divergence and) 45.65 711.62 P
0.61 (synchronisation strategy presented in the previous chapter, and in the consistency strategies presented in this) 45.65 698.62 P
0.18 (chapter, a common approach has helped to address each of these goals. Rather than trying to make the system) 45.65 685.62 P
-0.57 (sufficiently general that it is independent of the semantics of particular applications\321and thereby unable to cap-) 45.65 672.62 P
1.59 (italise upon them\321Prospero uses the Open Implementation approach to allow the specifics of application) 45.65 659.62 P
0.59 (semantics to be integrated with toolkit facilities, so that those areas of concern \050such as data distribution and) 45.65 646.62 P
0.5 (concurrency control\051 typically associated with toolkit functionality can not only exploit application specifics,) 45.65 633.62 P
(but can be tailored to application needs.) 45.65 620.62 T
FMENDPAGE
%%EndPage: "85" 85
%%Page: "86" 86
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 6: Consistency Management and Consistency Guarantees) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(86) 63.65 64.62 T
63.65 87.95 549.65 744.95 R
7 X
V
FMENDPAGE
%%EndPage: "86" 86
%%Page: "87" 87
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples.) 368.99 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(87) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Chapter 7:) 45.65 674.29 T
(Using Prospero: Application Examples) 45.65 646.29 T
2 14 Q
(7.1  Introduction) 45.65 552.42 T
0 11 Q
-0.04 (The last two chapters have introduced the main abstractions and mechanisms which Prospero provides for cre-) 45.65 530.42 P
0.57 (ating collaborative applications, as well as the means by which these can be specialised to meet the needs of) 45.65 517.42 P
0.16 (specific situations. Small examples were used to illustrate how these were embodied in the toolkit and used in) 45.65 504.42 P
1.18 (practice. The purpose of this chapter is to pull together the various ideas encountered earlier by presenting) 45.65 491.42 P
1.1 (longer, more detailed examples which also serve to illustrate the range of behaviours which the toolkit can) 45.65 478.42 P
(support.) 45.65 465.42 T
2 14 Q
(7.2  Application Structure) 45.65 438.42 T
0 11 Q
-0.64 (While applications are free to select and use toolkit features in whichever ways are appropriate, there is a general) 45.65 416.42 P
0.09 (schema which characterises most applications. The scheme, illustrated in figure 7.1, has two sections\321initial-) 45.65 403.42 P
(isation and general running.) 45.65 390.42 T
-0.29 (The initialisation phase sets up and initialises the various structures which are used while the application is run-) 45.65 370.42 P
-0.61 (ning. There are three primary areas of responsibility. The first is the description of the semantic properties which) 45.65 357.42 P
0.26 (will be employed by the consistency guarantee mechanism described in Chapter 6. This will establish a set of) 45.65 344.42 P
-0.31 (properties by which the actions of various streams can be classified and described, as well as the range of levels) 45.65 331.42 P
1.31 (of consistency which can be achieved for various sets of potential operations. The second is the stream or) 45.65 318.42 P
1.1 (streams which will be associated with a given application instance. While there will commonly be a single) 45.65 305.42 P
0.03 (stream per running process, corresponding to the actions of the user which it represents within the system, any) 45.65 292.42 P
1.33 (given process may actually be responsible for the management of multiple streams \050e.g. if it is a user-less) 45.65 279.42 P
-0.53 (\322server\323 process, if the user is engaged in multiple tasks, or if a user\325s activity is separated into multiple streams,) 45.65 266.42 P
-0.49 (perhaps for data and interface\051. New streams may, of course, be established while the application is running; but) 45.65 253.42 P
0.17 (since the stream is our primary unit of dissection and analysis, the establishment of a stream is always seen as) 45.65 240.42 P
-0.27 (preceding any further operation. Finally, the collaborative session must be established. As discussed in Chapter) 45.65 227.42 P
0.06 (4, session management is not one of the areas of toolkit functionality which this work has addressed. It is han-) 45.65 214.42 P
0.57 (dled through other means \050in general, probably through coordination with another server\051 and so we will not) 45.65 201.42 P
0.32 (deal with this in any particular detail; however, before the application becomes operational, it must locate the) 45.65 188.42 P
(other streams with which it is associated, and with which it will synchronise.) 45.65 175.42 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 87
%%Page: "88" 88
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(88) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.1 (Once these initialisation tasks have been completed, the application is ready to begin general operation. This is) 63.65 448.59 P
-0.34 (structured as a set of nested cycles. In general, it proceeds as follows. First, for a single cycle, a set of properties) 63.65 435.59 P
0.64 (describing likely future operations must be collected. This may be done in a number of ways\321from explicit) 63.65 422.59 P
0.48 (user information, on the basis of available operations at this moment, heuristically from recent activities, etc.) 63.65 409.59 P
-0.45 (Once these properties have been collected, the application enters the promise cycle. The properties are collected) 63.65 396.59 P
0.7 (together to form a promise, which is then submitted to the \322guarantee authority\323\321usually a peer stream. As) 63.65 383.59 P
-0.04 (described in Chapter 6, this authority returns a guarantee of the level of consistency achievable at a future syn-) 63.65 370.59 P
-0.29 (chronisation point on the basis of the actions described in the promise. There may be a cycle at this point, as the) 63.65 357.59 P
0.01 (application revises its guarantee in order to receive the promise of a level of consistency which it finds accept-) 63.65 344.59 P
1.32 (able\321that is, the application and the guarantee authority may negotiate a level of activity and consistency) 63.65 331.6 P
(suitable for the purposes of either.) 63.65 318.6 T
0.17 (When the guarantee is established, the application enters the main action cycle, which is the divergence phase) 63.65 298.6 P
-0.26 (from the stream-oriented view presented in Chapter 5. Like the promise phase, this is a loop. First, the user per-) 63.65 285.6 P
-0.43 (forms some action at the interface. This action is \050optionally\051 compared against the promise properties collected) 63.65 272.6 P
-0.14 (earlier to determine whether or not it is in keeping with the promise on the strength of which the guarantee was) 63.65 259.6 P
-0.31 (obtained. The application may chose to warn the user about conflicts here, or \050again, if the programmer wishes\051) 63.65 246.6 P
-0.31 (may refuse operations which do not conform to the promise. If the action is acceptable \050either within or without) 63.65 233.6 P
(the parameters of the promise\051, it is performed) 63.65 220.6 T
0 8.8 Q
(1) 268.33 224.99 T
0 11 Q
( locally, and the application loops to accept more user input.) 272.73 220.6 T
-0.58 (At some point\321triggered, as we saw in Chapter 5, either by internal action or an external event\321the divergence) 63.65 200.6 P
-0.23 (phase ends and synchronisation takes place. The various actions which the user has performed over shared data) 63.65 187.6 P
0.63 (during the divergence phase are resolved against other streams, which may also have accumulated their own) 63.65 174.6 P
0.79 (actions during this time. The system works to achieve a level of consistency or stability. Action streams are) 63.65 161.6 P
-0.54 (resolved against each other, and the local state is updated to reflect the newly established shared consistent state.) 63.65 148.6 P
63.65 110.95 549.65 131.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 118.94 195.62 118.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.2 (1.  Actually) 63.65 104.95 P
-0.2 (, it may simply be noted, rather than performed; but for the moment, we will regard these as equivalent from the perspective) 104.91 104.95 P
(of the local stream.) 63.65 94.95 T
63.65 87.95 549.65 744.95 C
91.06 455.93 522.23 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(collect promise properties) 330.89 688.22 T
(make promise) 268.98 656.24 T
(receive guarantee) 286.12 623.81 T
(action) 307.55 574.81 T
(check action) 291.84 565.24 T
(warn user) 274.3 517.9 T
(perform action) 323.27 543.38 T
(synchronise) 417.08 601.24 T
(resolve actions) 443.51 576.67 T
(update) 458.51 620.52 T
326.52 665.4 314.54 664.73 324.34 671.65 325.43 668.52 4 Y
V
376.76 686.4 325.43 668.52 2 L
1 H
2 Z
N
292.09 642.28 292.32 630.28 285.76 640.34 288.92 641.31 4 Y
V
285.65 651.95 288.92 641.31 2 L
N
317.77 640.29 317.54 652.28 324.09 642.23 320.93 641.26 4 Y
V
320.93 641.26 324.21 630.62 2 L
N
311.82 593.95 311.76 581.95 305.45 592.16 308.64 593.06 4 Y
V
301.76 617.51 308.64 593.06 2 L
N
296.29 537.23 290.09 526.95 289.91 538.95 293.1 538.09 4 Y
V
299.54 561.95 293.1 538.09 2 L
N
330.93 535.39 342.31 539.18 334.66 529.93 332.79 532.66 4 Y
V
321.21 524.73 332.8 532.66 2 L
N
336.48 553.27 329.54 563.06 340.61 558.44 338.55 555.86 4 Y
V
343.43 551.95 338.55 555.85 2 L
N
416.89 594.19 428.42 597.51 420.4 588.58 418.65 591.38 4 Y
V
358.43 553.62 418.66 591.38 2 L
N
453.95 595.07 458.98 584.18 448.94 590.75 451.45 592.91 4 Y
V
445.1 600.28 451.45 592.91 2 L
N
472.38 604.15 475.09 615.84 478.99 604.49 475.68 604.32 4 Y
V
476.76 583.62 475.69 604.32 2 L
N
458.17 610.13 446.2 609.17 455.84 616.32 457 613.22 4 Y
V
468.43 617.51 457.01 613.22 2 L
N
428.13 673.12 425.08 684.73 433.82 676.5 430.98 674.81 4 Y
V
458.43 628.62 430.99 674.81 2 L
N
199.54 732.29 199.54 492.78 2 L
4 H
3 X
N
198.98 733.89 185.1 740.84 2 L
N
199.76 492.57 185.87 485.62 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
262.2 728.87 262.2 493.28 2 L
N
262.76 730.45 276.65 737.29 2 L
N
261.98 493.07 275.87 486.23 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
511.71 728.57 511.71 492.19 2 L
N
511.15 730.15 497.26 737.01 2 L
N
511.93 491.98 498.04 485.12 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.15 731.82 99.15 493.09 2 L
N
99.71 733.41 113.6 740.34 2 L
N
98.93 492.88 112.82 485.95 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
231.74 613.57 254.82 606.95 231.74 600.34 231.74 606.95 4 Y
V
208.15 606.95 231.74 606.95 2 L
N
5 F
0 X
(run) 283.15 734.45 T
(init) 118.98 736.95 T
2 F
(set up properties) 103.98 691.95 T
(find other streams) 103.98 638.62 T
(establish session) 103.98 613.62 T
(set up streams) 103.98 666.12 T
91.48 459.45 521.48 479.45 R
7 X
V
0 11 Q
0 X
(FIGURE 7.1: The schmatic structure of applications written in Prospero.) 146.54 472.12 T
63.65 87.95 549.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 88
%%Page: "89" 89
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples.) 368.99 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(89) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 12 Q
0 X
(7.2.1  Specialisation through Subclassing) 45.65 736.95 T
0 11 Q
0.26 (As demonstrated in previous chapters \050and to be shown further here\051, Prospero allows applications to become) 45.65 719.62 P
1.4 (involved in the implementation of the infrastructure which supports them, so that toolkit structures can be) 45.65 706.62 P
1.36 (adapted to the needs of particular applications and situations. This is done by subclassing and specialising) 45.65 693.62 P
-0.11 (revealed toolkit features. Subclassing allows the application programmer to create new, more specific forms of) 45.65 680.62 P
0.2 (toolkit structures; and since these generic structures are related to each other through generic function invoca-) 45.65 667.62 P
(tions, new methods can be defined on these to introduce new behaviours to the system.) 45.65 654.62 T
-0.16 (CLOS\325s extensive method combination facilities make this approach particularly attractive. In most object-ori-) 45.65 634.62 P
1.52 (ented languages, new methods defined for some class override the equivalent methods defined for classes) 45.65 621.62 P
0.44 (further up the class hierarchy. However, CLOS also allows more-specific methods to invoke the less specific) 45.65 608.62 P
0.61 (methods themselves. In addition, methods can be specified to run before, or after, the primary methods for a) 45.65 595.62 P
-0.1 (class; before- and after-methods are also subject to inheritance, according to different rules than primary meth-) 45.65 582.62 P
0.75 (ods \050so that all the before- and after- methods for an object will be run, in a specified order, while only one) 45.65 569.62 P
-0.62 (primary method will typically be called\051. CLOS\325s method combination facilities allow application programmers) 45.65 556.62 P
-0.29 (to introduce new pieces of toolkit functionality very simply within the generic function framework specified by) 45.65 543.62 P
(Prospero.) 45.65 530.62 T
2 12 Q
(7.2.2  Con\336guring or Extending the Base Level) 45.65 506.95 T
0 11 Q
0.17 (Before going on to look at Prospero\325s generic function framework, there is one particular feature of the use of) 45.65 489.62 P
0.46 (the base/meta distinction in Prospero which is worth exploring. This aspect of Prospero\325s design represents a) 45.65 476.62 P
(departure from earlier OI designs.) 45.65 463.62 T
0.06 (In Open Implementations, the separation of base and meta interfaces is normally organised around the distinc-) 45.65 443.62 P
1.03 (tion between) 45.65 430.62 P
3 F
1.03 (what) 106.97 430.62 P
0 F
1.03 ( the client requires of the abstraction, and) 128.36 430.62 P
3 F
1.03 (how) 321.39 430.62 P
0 F
1.03 ( the abstraction should go about providing) 339.73 430.62 P
-0.28 (\050aspects of\051 that functionality. One way of thinking about this is that the base level sets the terms of the abstrac-) 45.65 417.62 P
-0.54 (tion, while the meta level) 45.65 404.62 P
3 F
-0.54 (configures) 157.21 404.62 P
0 F
-0.54 ( that abstraction appropriately for the needs of the client. The meta interface) 203.65 404.62 P
0.3 (will typically deal in terms of different sorts of objects\321those used \050on some level\051 to realise the abstraction.) 45.65 391.62 P
(In this way, Open Implementations \322open up\323 the abstractions through the meta interface.) 45.65 378.62 T
-0.6 (Prospero uses Open Implementation to the same end\321that is, to allow applications to specialise toolkit facilities) 45.65 358.62 P
1.2 (to their own needs. However, the base level object in Prospero\321streams, promises, actions, etc.\321are very) 45.65 345.62 P
-0 (abstract. They are quite distant from the implementation level and much closer to the application level. This in) 45.65 332.62 P
0.01 (turn affects the way in which the metalevel works. Activity at the metalevel in Prospero largely specialises the) 45.65 319.62 P
-0.09 (base level with semantic features of the application domain \050such as the properties of actions, or stream types\051;) 45.65 306.62 P
0.65 (and once this has been done, those semantic features become available for base-level programming. In other) 45.65 293.62 P
-0.66 (words, we can think of this not so much as) 45.65 280.62 P
3 F
-0.66 (configuring) 229.43 280.62 P
0 F
-0.66 ( the base level, but more as) 280.77 280.62 P
3 F
-0.66 (extending) 398.37 280.62 P
0 F
-0.66 ( it. So it is not simply) 441.14 280.62 P
0.19 (that the metalevel specialises the structures of the base level, and the implementation which lies behind it; but) 45.65 267.62 P
(it specialises the) 45.65 254.62 T
3 F
(base level itself) 120.5 254.62 T
0 F
( to the needs of the application.) 188.33 254.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 89
%%Page: "90" 90
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(90) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
(.) 63.65 100.62 T
63.65 87.95 549.65 744.95 C
91.81 107.95 521.48 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
92.82 116.95 519.48 743.62 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
95.65 118.62 513.15 135.28 R
7 X
V
0 11 Q
0 X
(FIGURE 7.2: Prospero class structure and generic function framework.) 147.68 127.95 T
96.82 141.45 516.65 742.95 R
7 X
V
6 10 Q
0 X
(<stream>) 96.82 736.29 T
(<local-stream>) 110.99 725.29 T
(<remote-stream>) 110.99 714.29 T
(\050stream-name <stream>\051) 110.99 692.29 T
(\050stream-host <stream>\051) 110.99 681.29 T
(\050stream-actions <local-stream>\051 ==> <list> of <action>) 110.99 659.29 T
(\050stream-peers <local-stream>\051 ==> <list> of <remote-stream>) 110.99 648.29 T
(\050stream-promise <local-stream>\051 ==> <promise>) 110.99 637.29 T
(\050stream-guarantee <local-stream>\051 ==> <guarantee>) 110.99 626.29 T
(\050synchronise <local-stream> <remote-stream>\051) 110.99 604.29 T
(\050synchronise-with-guarantee <local-stream> <remote-stream>) 110.99 593.29 T
(<guarantee>\051) 125.16 582.29 T
(<promise>) 96.82 556.29 T
(<null-promise>) 110.99 545.29 T
(<lock-promise>) 110.99 534.29 T
(\050make-promise %extent <action> <action> ...\051 ==> <promise>) 110.99 512.29 T
(\050respond-to-promise <promise>\051) 110.99 501.29 T
(\050respond-to-promise-from-stream <promise> <remote-stream>\051) 125.16 490.29 T
(\050acceptable-promise <promise> <local-stream>\051 ==> <guarantee>) 125.16 479.29 T
(\050promise-properties <promise>\051 ==> <list> of <action>) 110.99 457.29 T
(<guarantee>) 96.82 431.29 T
(<null-guarantee>) 110.99 420.29 T
(<full-guarantee>) 110.99 409.29 T
(\050guarantee-authority <guarantee>\051 ==> <remote-stream>) 110.99 387.29 T
(\050get-guarantee <remote-stream> <promise>\051 ==> <guarantee>) 110.99 376.29 T
(\050redeem-guarantee <remote-stream> <guarantee>\051) 110.99 365.29 T
(<action>) 96.82 339.29 T
(\050add-action-to-stream <action> <stream>\051) 110.99 317.29 T
(\050propagate-action-to-stream <action> <remote-stream>\051) 110.99 306.29 T
(\050locally-perform-action <action>\051) 110.99 284.29 T
(\050simple-synchronise <stream> %action-list\051) 125.16 273.29 T
(\050tentative-locally-apply-action <action>\051) 125.16 262.29 T
(\050syntactic-locally-apply-action <action>\051) 125.16 251.29 T
(\050salvage-synchronise <stream> \050<action>...\051\051) 125.16 240.29 T
(\050salvage-synchronise-action <stream> <action>\051) 125.16 229.29 T
63.65 87.95 549.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 90
%%Page: "91" 91
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples.) 368.99 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(91) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 14 Q
0 X
(7.3  The Generic Function Framework) 45.65 735.62 T
0 11 Q
1.11 (The programmer interface to using and manipulating Prospero structures is defined by the generic function) 45.65 713.62 P
0.41 (framework. In CLOS, generic functions play the role that messages take in Smalltalk, but within a functional) 45.65 700.62 P
-0.12 (context. Calling a generic function invokes CLOS\325s method combination mechanism to find appropriate meth-) 45.65 687.62 P
-0.61 (ods which implement the generic function for the objects given as parameters to the generic function. Prospero\325s) 45.65 674.62 P
0.37 (behaviour is defined not only in terms of the generic functions to which internal objects respond, but also the) 45.65 661.62 P
0.15 (generic functions which will be used in their execution. These give programmers who wish to modify internal) 45.65 648.62 P
(aspects of Prospero a finer grain of control.) 45.65 635.62 T
-0 (Figure 7.2 details the class structure and generic function framework supplied by Prospero. The class structure) 45.65 615.62 P
0.09 (details the classes and subclasses of objects over which Prospero acts. As in previous chapters, the convention) 45.65 602.62 P
-0.49 (is adopted that classes are lexically distinguished by angle brackets, and subclasses are indicated by indentation.) 45.65 589.62 P
0.82 (The basic classes are) 45.65 576.62 P
6 9 Q
1.61 (<stream>) 143.61 576.62 P
0 11 Q
0.82 (,) 186.81 576.62 P
6 9 Q
1.61 (<promise>) 193.13 576.62 P
0 11 Q
0.82 (,) 241.73 576.62 P
6 9 Q
1.61 (<guarantee>) 248.05 576.62 P
0 11 Q
0.82 ( and) 307.45 576.62 P
6 9 Q
1.61 (<action>) 330.47 576.62 P
0 11 Q
0.82 (. Along with the classes, figure 7.2) 373.67 576.62 P
0.02 (describes generic functions associated with them and, where relevant, other generic functions which are called) 45.65 563.62 P
(in the course of executing them \050again, detailed by indentation\051.) 45.65 550.62 T
-0.49 (The class) 45.65 530.62 P
6 9 Q
-0.96 (<stream>) 88.66 530.62 P
0 11 Q
-0.49 ( has two subclasses,) 131.86 530.62 P
6 9 Q
-0.96 (<local-stream>) 220.65 530.62 P
0 11 Q
-0.49 ( and) 296.25 530.62 P
6 9 Q
-0.96 (<remote-stream>) 316.66 530.62 P
0 11 Q
-0.49 (, which represent streams local) 397.66 530.62 P
0.04 (to or remote to the local host. General functions\321for naming and locating streams\321are defined on the stream) 45.65 517.62 P
6 9 Q
3.75 (<class>) 45.65 504.62 P
0 11 Q
1.91 (, while more detailed functions for examining and manipulating streams are defined on) 83.45 504.62 P
6 9 Q
3.75 (<local-) 493.85 504.62 P
-0.6 (stream>) 45.65 491.62 P
0 11 Q
-0.31 (, since a host cannot manipulate streams on remote hosts. As implied by the stream model, user actions) 83.45 491.62 P
(are associated with streams, not with hosts.) 45.65 478.62 T
-0.28 (In addition to the basic class) 45.65 458.62 P
6 9 Q
-0.55 (<promise>) 171.67 458.62 P
0 11 Q
-0.28 (, Prospero also provides a subclass,) 220.27 458.62 P
6 9 Q
-0.55 (<lock-promise>) 376.83 458.62 P
0 11 Q
-0.28 (. This refers to the) 452.43 458.62 P
0.52 (general form of promise associated with traditional locking mechanisms \050that is, complete control over some) 45.65 445.62 P
(region of the shared workspace\051.) 45.65 432.62 T
0.27 (Two subclasses of) 45.65 412.62 P
6 9 Q
0.54 (<guarantee>) 129.87 412.62 P
0 11 Q
0.27 ( are also provided. The first,) 189.27 412.62 P
6 9 Q
0.54 (<null-guarantee>) 318 412.62 P
0 11 Q
0.27 (, is an explicit statement that) 404.4 412.62 P
-0.44 (no guarantee is made. The second,) 45.65 399.62 P
6 9 Q
-0.87 (<full-guarantee>) 197.58 399.62 P
0 11 Q
-0.44 (, is a total guarantee, such as might be given in a success-) 283.98 399.62 P
(ful response to a) 45.65 386.62 T
6 9 Q
(<lock-promise>) 120.8 386.62 T
0 11 Q
(.) 196.4 386.62 T
0.01 (The most complex class structure is associated with the basic class) 45.65 366.62 P
6 9 Q
0.01 (<action>) 341.75 366.62 P
0 11 Q
0.01 (; this is also the area in which the) 384.95 366.62 P
-0.38 (most information must be supplied by an application programmer. It is through the refinement of) 45.65 353.62 P
6 9 Q
-0.74 (<action>) 469.57 353.62 P
0 11 Q
-0.38 ( that) 512.77 353.62 P
-0.18 (the detailing of application semantics \050necessary for the guarantee mechanism\051 is performed, as outlined previ-) 45.65 340.62 P
(ously in Chapter 6. Promises are constructed from actions, or \050more commonly\051 are predefined.) 45.65 327.62 T
-0.13 (Most of the generic functions and library functions outlined here have been seen, in one form or another, in the) 45.65 307.62 P
-0.44 (examples laid out in the previous chapters. The rest of this chapter will present and discuss two longer examples) 45.65 294.62 P
(which show how they are used together, in full applications.) 45.65 281.62 T
2 14 Q
(7.4  Sample Applications) 45.65 254.62 T
0 11 Q
0.76 (This section presents two sample collaborative applications created using Prospero. These examples demon-) 45.65 232.62 P
1.24 (strate the various facilities and principles which have been explored in the previous chapters, putting them) 45.65 219.62 P
-0.28 (together in larger, more detailed examples and demonstrating both the range of the toolkit and the styles of pro-) 45.65 206.62 P
1.75 (gramming which it supports. The first example is a simple graphical editor; the second is a bug-tracking) 45.65 193.62 P
(database) 45.65 180.62 T
3 F
(.) 83.52 180.62 T
0 F
-0.38 (The code for the examples is presented in Appendix A. The applications were written with CMU Common Lisp) 45.65 160.62 P
0.78 (and the PCL implementation of CLOS, and use the Garnet toolkit to provide the user interface components.) 45.65 147.62 P
0.15 (Important features to note when considering these examples include the relationship of application to collabo-) 45.65 134.62 P
1.37 (ration code, the form of the link between the applications and Prospero and the use of previously-detailed) 45.65 121.62 P
(mechanisms such as subclassing and refinement to express application needs.) 45.65 108.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 91
%%Page: "92" 92
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(92) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
2 12 Q
0 X
(7.4.1  Eureka, a Collaborative Polyline Editor) 63.65 736.95 T
0 11 Q
1.45 (Section 1 of Appendix A contains a code listing of a synchronously-shared polyline) 63.65 719.62 P
0 8.8 Q
1.16 (2) 449.55 724.02 P
0 11 Q
1.45 ( editor called Eureka) 453.95 719.62 P
-0.21 (\050because \322it\325s very simple\323\051. In this section, I will discuss the code, show how it uses the Prospero mechanisms) 63.65 706.62 P
(discussed previously, and highlight particular pieces.) 63.65 693.62 T
-0.3 (The code for Eureka is divided between two files. The first,) 63.65 673.62 P
6 9 Q
-0.59 (eureka.lisp) 325.22 673.62 P
0 11 Q
-0.3 (, is presented in section 1.1 of Appen-) 384.62 673.62 P
-0.48 (dix A, and contains most of the Prospero-related functionality. The second,) 63.65 660.62 P
6 9 Q
-0.94 (ui.lisp) 392.02 660.62 P
0 11 Q
-0.48 (, is presented in section 1.2.) 429.82 660.62 P
0.22 (It is largely concerned with managing the user interface, although it also has some important \322glue\323 functions) 63.65 647.62 P
(which relate interface action to Prospero functionality, as will be discussed.) 63.65 634.62 T
0.15 (Eureka uses roughly the same sort of mechanism as was shown in the \322shdr\323 example in Chapter 5. However,) 63.65 614.62 P
0.23 (somewhat less of the details of stream management are provided here, because they are actually internal parts) 63.65 601.62 P
(of Prospero\325s functionality, which were included with the example code in Chapter 5 for completeness.) 63.65 588.62 T
1.17 (Each site maintains a local stream for the processing of locally-originated commands. This is a) 63.65 568.62 P
6 9 Q
2.31 (<bounded-) 501.05 568.62 P
0.8 (stream>) 63.65 555.62 P
0 11 Q
0.41 (. Prospero provides bounded streams as a subclass of) 101.45 555.62 P
6 9 Q
0.8 (<local-stream>) 340.96 555.62 P
0 11 Q
0.41 (; they are local streams which) 416.56 555.62 P
-0.45 (have a fixed upper bound to the number of commands which can be executed before synchronisation will occur.) 63.65 542.62 P
-0.26 (So, a Eureka client will gather and record user action until the bound is reached, at which point synchronisation) 63.65 529.62 P
(will take place.) 63.65 516.62 T
-0.18 (The early parts of the file) 63.65 496.62 P
6 9 Q
-0.36 (eureka.lisp) 176.8 496.62 P
0 11 Q
-0.18 ( correspond to the initialisation phase of the general application scheme) 236.2 496.62 P
0.4 (outlined in section 7.2 \050this chapter\051. The first particularly interesting component here is the creation of com-) 63.65 483.62 P
0.95 (mand object classes for various sorts of operation, in lines 14\32024. In this segment, three classes are created) 63.65 470.62 P
0.32 (which correspond to three different forms of action over shared objects \050creating them, editing/deleting them,) 63.65 457.62 P
-0.62 (and moving them\051. These are all subclasses of the Prospero-supplied base class) 63.65 444.62 P
6 9 Q
-1.22 (<action>) 407.21 444.62 P
0 11 Q
-0.62 (, and each defines slots) 450.41 444.62 P
0.21 (which can be used to record the details of specific executions of the commands. A set of functions \050defined at) 63.65 431.62 P
0.03 (lines 33\32042\051 are set up as wrappers to create command objects with appropriate values, in response to the exe-) 63.65 418.62 P
(cution of commands in the user interface.) 63.65 405.62 T
1.66 (The code segment beginning at line 49 sets up the streams; the global) 63.65 385.62 P
6 9 Q
3.26 (*local-stream*) 393.48 385.62 P
0 11 Q
1.66 ( is an instance of) 469.08 385.62 P
6 9 Q
-0.39 (<bounded-stream>) 63.65 372.62 P
0 11 Q
-0.2 (, as discussed above, and it is associated with instances of) 150.05 372.62 P
6 9 Q
-0.39 (<remote-stream>) 404.8 372.62 P
0 11 Q
-0.2 ( which refer to) 485.8 372.62 P
-0.1 (peer clients on other hosts. Since this example uses the pre-defined behaviour of) 63.65 359.62 P
6 9 Q
-0.2 (<bounded-stream>) 418.54 359.62 P
0 11 Q
-0.1 (, this code) 504.94 359.62 P
(is straightforward.) 63.65 346.62 T
0.56 (The code at the end of the file, however, at lines 78\32084, is more interesting. For the classes of objects corre-) 63.65 326.62 P
0.43 (sponding to user interface commands\321the command object classes defined earlier\321Prospero needs to know) 63.65 313.62 P
-0.26 (how to execute them \050since local execution is one of the defined behaviours associated with adding an object to) 63.65 300.62 P
0.42 (a bounded stream\051. The framework defines that this will be done through the generic function) 63.65 287.62 P
6 9 Q
0.83 (locally-per-) 484.85 287.62 P
-0.44 (form-action) 63.65 274.62 P
0 11 Q
-0.22 (, and so lines 78\32084 set up methods for this generic function, specialised on the various command) 123.05 274.62 P
-0.37 (object classes defined earlier in the file. Garnet uses a \322retained\323 object model, which maintains representations) 63.65 261.62 P
-0.26 (of all interface objects using KR \050its object system\051. As a result, the interface representation) 63.65 248.62 P
3 F
-0.26 (is) 466.41 248.62 P
0 F
-0.26 ( the shared work-) 473.75 248.62 P
0.57 (space, and so the only behaviour we need to associate with the execution of these commands is the interface) 63.65 235.62 P
0.37 (behaviour. So the methods defined on) 63.65 222.62 P
6 9 Q
0.73 (locally-perform-action) 235.44 222.62 P
0 11 Q
0.37 ( for each class of command object call back) 354.24 222.62 P
-0.17 (to user interface glue functions which take command objects and perform the user interface actions. Clearly, of) 63.65 209.62 P
0.14 (course, these user interface actions could be performed directly by) 63.65 196.62 P
6 9 Q
0.28 (locally-perform-action) 359.85 196.62 P
0 11 Q
0.14 (; but the separa-) 478.65 196.62 P
1.59 (tion introduced here helps maintain the clarity of the code by decoupling collaboration functionality from) 63.65 183.62 P
(interface functionality.) 63.65 170.62 T
-0.36 (The second file,) 63.65 150.62 P
6 9 Q
-0.7 (ui.lisp) 135.89 150.62 P
0 11 Q
-0.36 (, deals mainly with maintaining and controlling the user interface. As a result, the bulk) 173.69 150.62 P
0.27 (of that file deals with the mechanisms and structures of the Garnet interface toolkit, rather than those of Pros-) 63.65 137.62 P
63.65 100.95 549.65 121.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 108.94 195.62 108.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(2.  A polyline is a connected sequence of line segments, essentially forming an unclosed polygon.) 63.65 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 92
%%Page: "93" 93
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples.) 368.99 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(93) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.42 (pero. Garnet details do not concern us here, although the interaction mechanism are relevant. Garnet uses the) 45.65 737.62 P
3 F
-0.58 (interactors) 45.65 724.62 P
0 F
-0.58 ( model, in which interactive behaviours are reified as objects within the toolkit which are then declar-) 93.93 724.62 P
-0.13 (atively associated with a combination of windows \050or other areas of applicability\051 and conditions \050under which) 45.65 711.62 P
0.13 (they will become operative\051. So the calls to) 45.65 698.62 P
6 9 Q
0.26 (create-instance) 240.11 698.62 P
0 11 Q
0.13 ( on lines 25, 32 and 39 of) 321.11 698.62 P
6 9 Q
0.26 (ui.lisp) 436.76 698.62 P
0 11 Q
0.13 ( define inter-) 474.56 698.62 P
0.99 (actors associated with the Eureka window.) 45.65 685.62 P
0 8.8 Q
0.79 (3) 238.16 690.02 P
0 11 Q
0.99 ( Associated with each of these interactors is a callback function) 242.56 685.62 P
-0.41 (which is called when the interactor operates. The callback functions themselves are defined at the end of the file) 45.65 672.62 P
(\050line 66 onward\051, where there is more of interest from the perspective of this chapter.) 45.65 659.62 T
0.09 (The function) 45.65 639.62 P
6 9 Q
0.17 (add-polyline) 105.08 639.62 P
0 11 Q
0.09 ( defined at line 66 is the callback function for the polyline creation interactor. It is) 169.88 639.62 P
0.43 (called when the various points have been defined for a polyline, the interactor has completed, and the Garnet) 45.65 626.62 P
0.18 (polyline object itself is to be created. In a traditional Garnet application, this function could then call) 45.65 613.62 P
6 9 Q
0.35 (create-) 493.85 613.62 P
-1.01 (instance) 45.65 600.62 P
0 11 Q
-0.51 ( to create a polyline object and associate it with the window. However, in this application, the callback) 88.85 600.62 P
-0.48 (function is a hook into the Prospero mechanism. Recall that the local performance of any operation will be asso-) 45.65 587.62 P
1 (ciated, by Prospero, with action on the local stream. However, the role of) 45.65 574.62 P
6 9 Q
1.96 (add-polyline) 383.34 574.62 P
0 11 Q
1 (, in this case, is to) 448.14 574.62 P
0.21 (recognise that an interaction has taken place and, rather than executing it, to create a corresponding command) 45.65 561.62 P
-0.3 (object which will be associated with the local stream. So) 45.65 548.62 P
6 9 Q
-0.59 (add-polyline) 294.7 548.62 P
0 11 Q
-0.3 ( creates an object of the class) 359.5 548.62 P
6 9 Q
-0.59 (<object-) 488.45 548.62 P
(create-object>) 45.65 535.62 T
0 11 Q
(, and calls) 121.25 535.62 T
6 9 Q
(add-action-to-stream) 168.29 535.62 T
0 11 Q
( to associate it with the local stream.) 276.3 535.62 T
0.45 (At this point, internal Prospero mechanisms take over, processing the command object and so forth. At some) 45.65 515.62 P
0.8 (point, however, Prospero will have to cause the local execution of the command object, through the generic) 45.65 502.62 P
-0.15 (function) 45.65 489.62 P
6 9 Q
-0.3 (locally-perform-action) 84.91 489.62 P
0 11 Q
-0.15 (. As we saw above, this was defined, for the various command objects pro-) 203.71 489.62 P
0.67 (cess by this application, to call a glue function which would execute the associated user interface command.) 45.65 476.62 P
0.43 (These functions are also defined in this final section of) 45.65 463.62 P
6 9 Q
0.83 (ui.lisp) 293.69 463.62 P
0 11 Q
0.43 (. The function at line 72,) 331.49 463.62 P
6 9 Q
0.83 (ui-add-polyline-) 445.25 463.62 P
1.1 (from-create-obj) 45.65 450.62 P
0 11 Q
0.56 (, takes an instance of <) 126.65 450.62 P
6 9 Q
1.1 (object-create-object>) 230.36 450.62 P
0 11 Q
0.56 (, extracts the relevant information from it,) 343.76 450.62 P
2.46 (and create a new Garnet polyline. So these two functions \050) 45.65 437.62 P
6 9 Q
4.83 (add-polyline) 327.15 437.62 P
0 11 Q
2.46 ( and) 391.95 437.62 P
6 9 Q
4.83 (ui-add-polyline-from-) 418.25 437.62 P
1.25 (create-obj) 45.65 424.62 P
0 11 Q
0.64 (\051, taken together, form the glue between the user interface for a standard single-user application,) 99.65 424.62 P
0.73 (and a Prospero-based multi-user application, by managing the communication between the two components.) 45.65 411.62 P
0.43 (Similarly, the code from line 81 onwards defines appropriate pairs of glue functions for other actions, in pre-) 45.65 398.62 P
(cisely the same way.) 45.65 385.62 T
0.34 (There are two particular things to be observed in this example. The first is the declarative style by which col-) 45.65 365.62 P
-0.51 (laboration behaviours are associated with interface behaviours. Individual and collaborative activity is managed) 45.65 352.62 P
-0.02 (in terms of the streams model, and inter-process communication is dealt with purely in terms of the synchroni-) 45.65 339.62 P
0.95 (sation of streams. In this case, because we have been able to rely upon the default behaviour of) 45.65 326.62 P
6 9 Q
1.86 (<bounded-) 483.05 326.62 P
0.37 (stream>) 45.65 313.62 P
0 11 Q
0.19 (, the application has not had to get involved in the synchronisation process at all. Changes to the syn-) 83.45 313.62 P
1.06 (chronisation process\321for instance, to the period of synchronisation, or to used timed, rather than bounded,) 45.65 300.62 P
0.23 (streams\321is accessible to the application \050being directly associated, through generic dispatch, with the objects) 45.65 287.62 P
-0.16 (which the application is manipulating\051 but is encapsulated when not needed. The second feature is the localisa-) 45.65 274.62 P
-0.12 (tion of Prospero-related functionality in a few areas. The impact on the core user interface code\321which would) 45.65 261.62 P
(have to be written, in pretty much the same way, for a single-user application\321is minimal.) 45.65 248.62 T
2 12 Q
(7.4.2  Bugspray) 45.65 224.95 T
(, a Bug-T) 128.81 224.95 T
(racking Database) 177.72 224.95 T
0 11 Q
0.65 (Section 2 of Appendix A presents the code for a second example application, a bug-tracking database called) 45.65 207.62 P
0.1 (Bugspray. This example illustrates very different patterns of collaborative activity \050and infrastructure support\051) 45.65 194.62 P
(than those demonstrated by Eureka, but supported within the same framework.) 45.65 181.62 T
-0.16 (The scenario of use is a typical two-stage customer support operation. On the front line are telephone operators) 45.65 161.62 P
-0.23 (who receive calls from customers with product queries and problems. Specific problems are logged in the data-) 45.65 148.62 P
0.3 (base, with information about the platform, product, etc. The database also holds records of known bugs, fixes) 45.65 135.62 P
45.65 100.95 531.65 121.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 108.94 177.62 108.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(3.  Garnet uses a private prototype-based object system, called KR; create-instance is KR\325) 45.65 94.95 T
(s equivalent of CLOS\325) 369.33 94.95 T
(s make-instance.) 450.08 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 93
%%Page: "94" 94
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(94) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.17 (and workarounds, as well as a mechanism for sets of comments to be attached to problems, as a means of dis-) 63.65 737.62 P
-0.55 (cussion. The second stage of database processing is the \322stitching together\323 of these various records; associating) 63.65 724.62 P
0.27 (problems with bugs, bugs with fixes and so on. This may be done by the telephone operators, but also by off-) 63.65 711.62 P
0.51 (line customer support staff, product staff, and so on. So there are three different sorts of processing going on) 63.65 698.62 P
-0.33 (over this database\321the entry of new records, modification of existing records, and manipulations of the overall) 63.65 685.62 P
(structure \050by linking records together\051.) 63.65 672.62 T
0.25 (As with Eureka, the code of Bugspray is divided across a number of files, concerned with different aspects of) 63.65 652.62 P
0.88 (the implementation. These files are presented as separate subsections of section 2 in Appendix A. The first,) 63.65 639.62 P
6 9 Q
-1.28 (bugs.lisp) 63.65 626.62 P
0 11 Q
-0.65 (, contains the core database functionality.) 112.25 626.62 P
6 9 Q
-1.28 (Ui.lisp) 293.45 626.62 P
0 11 Q
-0.65 ( deals with maintaining the user interface and link-) 331.25 626.62 P
0.62 (ing user interface actions into application functionality.) 63.65 613.62 P
6 9 Q
1.21 (Common.lisp) 314.22 613.62 P
0 11 Q
0.62 ( contains elements common to both the) 373.62 613.62 P
0.98 (server side and the client side; client and server specific functionality is in) 63.65 600.62 P
6 9 Q
1.92 (client.lisp) 404.76 600.62 P
0 11 Q
0.98 ( and) 464.16 600.62 P
6 9 Q
1.92 (server.lisp) 487.5 600.62 P
0 11 Q
0.98 (.) 546.9 600.62 P
6 9 Q
-1.23 (Guarantees.lisp) 63.65 587.62 P
0 11 Q
-0.63 ( provides the code which handles consistency guarantees. Finally,) 144.65 587.62 P
6 9 Q
-1.23 (f) 431.38 587.62 P
-1.23 (latten.lisp) 436.77 587.62 P
0 11 Q
-0.63 (,) 496.17 587.62 P
6 9 Q
-1.23 (dbio.lisp) 501.05 587.62 P
0 11 Q
0.13 (and) 63.65 574.62 P
6 9 Q
0.25 (misc.lisp) 82.41 574.62 P
0 11 Q
0.13 ( contain other supporting functions; they are included for completeness, but will not be of con-) 131.01 574.62 P
(cern here.) 63.65 561.62 T
0.1 (Bugspray uses a client/server model in which the primary copy of the database resides on the server \050although) 63.65 541.62 P
0.81 (all or part of the database is cached at the client\051. The database consists of a set of records, instances of the) 63.65 528.62 P
0.13 (classes defined in) 63.65 515.62 P
6 9 Q
0.25 (bugs.lisp) 144.37 515.62 P
0 11 Q
0.13 (. There are five sorts of records\321problems \050that is, problem reports\051, comments,) 192.97 515.62 P
-0.52 (bugs, fixes and workarounds. \050For our purposes here, there is no difference between fixes and workarounds, and) 63.65 502.62 P
-0.57 (in fact they\325re related in the class hierarchy through their parent class,) 63.65 489.62 P
6 9 Q
-1.12 (<solution>) 366.87 489.62 P
0 11 Q
-0.57 (.\051 The record class definitions) 420.87 489.62 P
-0.17 (in) 63.65 476.62 P
6 9 Q
-0.34 (bugs.lisp) 74.78 476.62 P
0 11 Q
-0.17 ( are normal CLOS definitions. Object slots hold either text strings \050for platform, symptoms, com-) 123.38 476.62 P
0.77 (ments, etc.\051 or \322links\323\321pointers to other records, such as from a problem report to a comment upon it. In a) 63.65 463.62 P
-0.06 (single-user system, these might more normally be stored as direct pointers, but here, a linked record is referred) 63.65 450.62 P
0.07 (to using the unique record identifier generated for it at definition time. Using these symbolic identifiers means) 63.65 437.62 P
1.08 (that the application does not need to map between host-specific and host-independent representations when) 63.65 424.62 P
(communicating with remote systems.) 63.65 411.62 T
-0.12 (The file) 63.65 391.62 P
6 9 Q
-0.24 (ui.lisp) 100.67 391.62 P
0 11 Q
-0.12 ( sets up a Garnet-based user interface, which creates a control window and dialogue boxes for) 138.47 391.62 P
0.58 (the entry and manipulation of records. As with Eureka, the details of the user interface are not relevant here,) 63.65 378.62 P
0.3 (being more concerned with the mechanism of Garnet than anything to do with Prospero. The interface allows) 63.65 365.62 P
-0.15 (records to be entered and linked together, as well as being used to control synchronisation. User interface com-) 63.65 352.62 P
-0.33 (ponents manipulate the database by calling the various methods on the record classes which were defined along) 63.65 339.62 P
(with the record classes in) 63.65 326.62 T
6 9 Q
(bugs.lisp) 177.6 326.62 T
0 11 Q
(.) 226.2 326.62 T
0.51 (The interface allows users to switch between different access modes to the database\321entry and linkage. The) 63.65 306.62 P
0.76 (access mode determines the type of promise which is made. The function) 63.65 293.62 P
6 9 Q
1.5 (ui-set-mode) 398.14 293.62 P
0 11 Q
0.76 ( at line 107 is called) 457.54 293.62 P
(when a mode switch is made. The processing of promises will be explained subsequently.) 63.65 280.62 T
0.6 (Most of the Prospero-specific processing begins in) 63.65 260.62 P
6 9 Q
1.17 (common.lisp) 293.58 260.62 P
0 11 Q
0.6 (, setting up elements common to both client) 352.98 260.62 P
-0.34 (and server sides. In particular, lines 14\32037 set up the action properties which are used by this application. These) 63.65 247.62 P
-0.4 (classes allow actions which operate over the content of the database \050record data fields\051 and its structure \050record) 63.65 234.62 P
1.72 (link fields\051 to be distinguished. The immediate subclasses of) 63.65 221.62 P
6 9 Q
3.38 (<action>) 348.02 221.62 P
0 11 Q
1.72 ( defined at lines 14\32021 \050) 391.22 221.62 P
6 9 Q
3.38 (<append-) 506.45 221.62 P
5.68 (action>) 63.65 208.62 P
0 11 Q
2.89 (,) 101.45 208.62 P
6 9 Q
5.68 (<structure-change-action>) 109.84 208.62 P
0 11 Q
2.89 (,) 244.84 208.62 P
6 9 Q
5.68 (<content-change-action>,) 253.24 208.62 P
0 11 Q
2.89 ( and) 382.84 208.62 P
6 9 Q
5.68 (<no-change-action>) 410.01 208.62 P
0 11 Q
2.89 (\051 are not) 507.21 208.62 P
0.34 (application actions, but properties which those actions can have; application actions are then defined in terms) 63.65 195.62 P
-0.62 (of these. The existence of) 63.65 182.62 P
6 9 Q
-1.22 (<set-f) 176.01 182.62 P
-1.22 (ield-action>) 208.41 182.62 P
0 11 Q
-0.62 ( separate from) 273.21 182.62 P
6 9 Q
-1.22 (<change-f) 337.02 182.62 P
-1.22 (ield-action>) 385.61 182.62 P
0 11 Q
-0.62 ( denotes a special case,) 450.42 182.62 P
0.22 (where the field that is set belongs to a newly-created, unsynchronised record. Since there is no change to syn-) 63.65 169.62 P
1.51 (chronised content when this happens, this action inherits from) 63.65 156.62 P
6 9 Q
2.97 (<no-change-action>) 352.86 156.62 P
0 11 Q
1.51 (, not from) 450.06 156.62 P
6 9 Q
2.97 (<content-) 501.05 156.62 P
(change-action>) 63.65 143.62 T
0 11 Q
(. The class) 139.25 143.62 T
6 9 Q
(<change-f) 188.74 143.62 T
(ield-action>) 237.34 143.62 T
0 11 Q
( is reserved for changes over synchronised data.) 302.14 143.62 T
6 9 Q
0.19 (Common.lisp) 63.65 123.62 P
0 11 Q
0.1 ( then provides functions for setting up the streams. Whereas Eureka used bounded streams, Bug-) 123.05 123.62 P
5.81 (spray uses) 63.65 110.62 P
6 9 Q
11.41 (<explicit-synch-stream>) 123.54 110.62 P
0 11 Q
5.81 (, another predefined class in Prospero, which uses explicit) 247.74 110.62 P
(synchronisation to control data sharing as in the check in/out example in Chapter 5.) 63.65 97.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 94
%%Page: "95" 95
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples.) 368.99 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(95) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.6 (Similarly to the actions,) 45.65 737.62 P
6 9 Q
-1.17 (guarantees.lisp) 151.13 737.62 P
0 11 Q
-0.6 ( defines the promises and guarantees which might be made according) 232.13 737.62 P
-0.42 (to these actions. Promises are defined at lines 22\32029; two classes of promise,) 45.65 724.62 P
6 9 Q
-0.82 (<structure-promise>) 381.5 724.62 P
0 11 Q
-0.42 ( and) 484.1 724.62 P
6 9 Q
-0.82 (<con-) 504.65 724.62 P
5.22 (tent-promise>) 45.65 711.62 P
0 11 Q
2.66 (, correspond to intents to make structural changes or content changes. A third promise,) 115.85 711.62 P
6 9 Q
0.01 (<structure-change-promise>) 45.65 698.62 P
0 11 Q
0 (, includes the possibility of making both. The guarantees which Bugspray uses) 186.05 698.62 P
0.66 (are the two basic guarantees which Prospero offers as part of its default behaviour\321) 45.65 685.62 P
6 9 Q
1.29 (<full-guarantee>) 425.96 685.62 P
0 11 Q
0.66 ( and) 512.36 685.62 P
6 9 Q
(<null-guarantee>) 45.65 672.62 T
0 11 Q
(.) 132.05 672.62 T
-0.01 (As well as defining the promises themselves,) 45.65 652.62 P
6 9 Q
-0.02 (guarantees.lisp) 246.63 652.62 P
0 11 Q
-0.01 ( also provides code which determines compat-) 327.62 652.62 P
-0.65 (ibility between promises, on the basis of which guarantees are issued. This, again, is an example of a point where) 45.65 639.62 P
-0.42 (a programmer provides details of application semantics for use by the internal mechanisms of the toolkit. In this) 45.65 626.62 P
-0.16 (case, the application defines methods on the generic function) 45.65 613.62 P
6 9 Q
-0.32 (compatible-promises) 315.46 613.62 P
0 11 Q
-0.16 ( which reflect their poten-) 418.06 613.62 P
-0.64 (tial interactions. The interactions here are quite simple. Structural promises and content promises are compatible) 45.65 600.62 P
-0.1 (with each other, but not with themselves. This reflects the fact that multiple users might simultaneously update) 45.65 587.62 P
0.1 (records \050the entry/edit phase\051 and link them together \050the comment/integrate phase\051, but that two users linking) 45.65 574.62 P
-0.27 (records or editing records at the same time may introduce incompatible changes. Three methods are defined for) 45.65 561.62 P
-0.05 (the generic function) 45.65 548.62 P
6 9 Q
-0.1 (compatible-promise) 136.22 548.62 P
0 11 Q
-0.05 (. The first \050line 37\051 marks promises as compatible, by default, while) 233.42 548.62 P
-0.49 (the second two \050lines 40 and 44\051 mark the exceptions. Note that, since) 45.65 535.62 P
6 9 Q
-0.96 (<structure-content-promise>) 350.59 535.62 P
0 11 Q
-0.49 ( inherits) 496.39 535.62 P
0.44 (from both) 45.65 522.62 P
6 9 Q
0.87 (<structure-promise>) 92.97 522.62 P
0 11 Q
0.44 ( and) 195.57 522.62 P
6 9 Q
0.87 (<content-promise>) 217.84 522.62 P
0 11 Q
0.44 (, these methods will find it incompatible with any) 309.64 522.62 P
-0.5 (other promise. This exploits the declarative class-based encoding mechanism described in Chapter 6. The return) 45.65 509.62 P
0.01 (value from compatible-promise can be a guarantee to be returned, but in this case we simply use true and false) 45.65 496.62 P
(\050t and nil\051, which are interpreted as) 45.65 483.62 T
6 9 Q
(<full-promise>) 202.66 483.62 T
0 11 Q
( and) 278.26 483.62 T
6 9 Q
(<null-promise>) 299.65 483.62 T
0 11 Q
(.) 375.25 483.62 T
-0.16 (Next,) 45.65 463.62 P
6 9 Q
-0.31 (client.lisp) 72.37 463.62 P
0 11 Q
-0.16 ( deals with the integration of Prospero mechanisms and client database manipulations. This) 131.77 463.62 P
1.24 (is managed differently in Bugspray than it was in Eureka. Bugspray defines CLOS \322after-methods\323 on the) 45.65 450.62 P
-0.11 (record manipulation generic functions to perform the Prospero behaviours. CLOS\325s method combination facil-) 45.65 437.62 P
-0 (ity ensures that these methods are executed after the execution of any relevant primary method when a generic) 45.65 424.62 P
0.08 (function is invoked. For instance, the method definition for) 45.65 411.62 P
6 9 Q
0.16 (new-object) 309.45 411.62 P
0 11 Q
0.08 ( at line 34 of) 363.45 411.62 P
6 9 Q
0.16 (client.lisp) 422.22 411.62 P
0 11 Q
0.08 ( is an after-) 481.61 411.62 P
-0.17 (method \050designated by the keyword) 45.65 398.62 P
6 9 Q
-0.34 (:after) 205.18 398.62 P
0 11 Q
-0.17 (\051, so that calls to) 237.58 398.62 P
6 9 Q
-0.34 (new-record) 311.88 398.62 P
0 11 Q
-0.17 ( will first cause the \322primary\323 method) 365.88 398.62 P
0.75 (at line 58 of) 45.65 385.62 P
6 9 Q
1.47 (bugs.lisp) 104.24 385.62 P
0 11 Q
0.75 ( to be executed \050adding the record to the local record table\051, and then call this after-) 152.84 385.62 P
0.25 (method.) 45.65 372.62 P
6 9 Q
0.48 (Client.lisp) 84.39 372.62 P
0 11 Q
0.25 ( uses these after-methods to create command objects which represent actions over Bug-) 143.79 372.62 P
1.99 (spray record objects, and then add them to the local stream. Other after methods \050at lines 17 and 24 of) 45.65 359.62 P
6 9 Q
(client.lisp) 45.65 346.62 T
0 11 Q
(\051 are defined for other actions over records.) 105.05 346.62 T
0.51 (The function) 45.65 326.62 P
6 9 Q
1.01 (request-guarantee) 105.94 326.62 P
0 11 Q
0.51 ( at line 73 makes a promise, based on the current mode; it is called by) 197.74 326.62 P
6 9 Q
1.01 (ui-) 515.45 326.62 P
-0.41 (set-mode) 45.65 313.62 P
0 11 Q
-0.21 ( in) 88.85 313.62 P
6 9 Q
-0.41 (ui.lisp) 102.49 313.62 P
0 11 Q
-0.21 ( \050line 107\051 whenever a mode change is made. The two modes\321entry and linkage\321deter-) 140.29 313.62 P
1.42 (mine what sort of promise is to be made. User interface functions \050) 45.65 300.62 P
6 9 Q
2.79 (ui-request-guarantee) 356.87 300.62 P
0 11 Q
1.42 ( at line 149 of) 464.87 300.62 P
6 9 Q
(ui.lisp) 45.65 287.62 T
0 11 Q
(\051 inform the user if the server refuses the desired guarantee due to concurrent activity by other users.) 83.45 287.62 T
0.8 (Finally,) 45.65 267.62 P
6 9 Q
1.56 (server.lisp) 83.12 267.62 P
0 11 Q
0.8 ( deals with server-side functionality. Essentially, this simply deals with the server-side) 142.52 267.62 P
0.84 (execution of client-initiated commands, by defining a number of methods on the generic function) 45.65 254.62 P
6 9 Q
1.64 (locally-) 488.45 254.62 P
(perform-action) 45.65 241.62 T
0 11 Q
(, corresponding to the various types of actions which might arise.) 121.25 241.62 T
-0.54 (The remaining files are included to complete the application, but are not of immediate interest or relevance here.) 45.65 221.62 P
6 9 Q
0.23 (Flatten.lisp) 45.65 208.62 P
0 11 Q
0.12 ( contains functions which map from CLOS objects onto printable forms which can be sent over) 110.45 208.62 P
2.81 (the WIRE remote function package in CMU Common Lisp, in which these applications were written.) 45.65 195.62 P
6 9 Q
-0.65 (Dbio.lisp) 45.65 182.62 P
0 11 Q
-0.33 ( deals with loading and saving databases and caches to disk; and) 94.25 182.62 P
6 9 Q
-0.65 (misc.lisp) 376.2 182.62 P
0 11 Q
-0.33 ( provides some ancillary) 424.8 182.62 P
(support functions.) 45.65 169.62 T
2 12 Q
(7.4.3  Bugspray in Use) 45.65 145.95 T
0 11 Q
-0.06 (Since Bugspray is a considerably larger application than the others presented in the past few chapters, this sec-) 45.65 128.62 P
(tion will consider how it operates by stepping through how it works.) 45.65 115.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 95
%%Page: "96" 96
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(96) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.26 (Most of the processing takes place in the client. The user sets an access mode to the database. On the basis of) 63.65 737.62 P
0.23 (this, the client makes a promise to the server, characterising upcoming activity for that mode. This characteri-) 63.65 724.62 P
0.22 (sation is compared against the promises which are currently offered to other clients. Compatibility is resolved) 63.65 711.62 P
0.75 (using application-specific information supplied, in this case, by specialised methods for the generic function) 63.65 698.62 P
6 9 Q
-1.21 (compatible-promises) 63.65 685.62 P
0 11 Q
-0.62 (. In this example, this is the most significant specialisation of Prospero functionality nec-) 166.25 685.62 P
(essary to support the application, and is only a few lines long.) 63.65 672.62 T
-0.19 (A guarantee is returned, which is checked; the user is informed if the desired guarantee is not granted. The user) 63.65 652.62 P
1.14 (can then enter, edit and link together records, from the graphical user interface. Action over the client-side) 63.65 639.62 P
-0.17 (records causes actions to be generated and added to the local stream. This is done through after-methods on the) 63.65 626.62 P
-0.61 (generic functions for creating records and manipulating fields. So, as user action continues, records of that activ-) 63.65 613.62 P
(ity are recorded and stored.) 63.65 600.62 T
1.69 (When the user selects \322Synchronise\323 from the command menu, the local stream is synchronised with the) 63.65 580.62 P
0.27 (server\325s stream. Prospero processes the local records and sends them to the server. At the server end, they are) 63.65 567.62 P
1.2 (then applied to the database. The synchronisation framework is set out by Prospero; application details are) 63.65 554.62 P
-0.56 (attached through methods on generic functions, such as) 63.65 541.62 P
6 9 Q
-1.1 (locally-apply-action) 305.72 541.62 P
0 11 Q
-0.56 (. This involves more slight spe-) 413.72 541.62 P
2.94 (cialisation\321to produce forms of the action instances which are acceptable to the transport system \050in) 63.65 528.62 P
6 9 Q
(f) 63.65 515.62 T
(latten.lisp) 69.05 515.62 T
0 11 Q
(, lines 5\32012\051.) 128.45 515.62 T
2 14 Q
(7.5  Flexibility) 63.65 488.62 T
0 11 Q
0.55 (The previous sections have introduced and described two longer examples of the use of Prospero in building) 63.65 466.62 P
0.56 (collaborative applications, illustrating the ways in which application code and collaboration code are related,) 63.65 453.62 P
-0.02 (and the ways in which applications can specialise Prospero structures to their own needs. The particular end to) 63.65 440.62 P
0.95 (which Prospero has been developed is greater flexibility. So, having seen the two examples separately, it is) 63.65 427.62 P
(worth stepping back to discuss the ways in which Prospero addresses problems raised earlier.) 63.65 414.62 T
0.55 (First, I will briefly to compare the two applications in terms of their different requirements and mechanisms.) 63.65 394.62 P
-0.28 (Next, I will discuss how the flexibility in Prospero which these applications exploit compares to the facilities in) 63.65 381.62 P
0.43 (other toolkits discussed earlier. Finally, I will discuss how the use of reflection and OI techniques makes this) 63.65 368.62 P
(possible.) 63.65 355.62 T
2 12 Q
(7.5.1  Comparing Eureka and Bugspray) 63.65 331.95 T
0 11 Q
1.03 (The two applications, Eureka and Bugspray, clearly differ considerably in their domains, which is what we) 63.65 314.62 P
-0.17 (require of a toolkit. However, and more importantly, they also differ considerably in their structures and styles.) 63.65 301.62 P
(Consider various differences:) 63.65 288.62 T
(1.) 63.65 268.62 T
(Eureka uses a peer) 77.18 268.62 T
(-to-peer data management policy; Bugspray adopts a client/server approach.) 159.12 268.62 T
(2.) 63.65 249.62 T
-0.25 (Eureka uses a completely replicated representation of user data; Bugspray uses a centralised data store \050with) 77.18 249.62 P
(partial replication in each client cache\051.) 77.18 236.62 T
(3.) 63.65 217.62 T
1.61 (Eureka supports highly synchronous interaction; Bugspray is more variable in its access patterns, from) 77.18 217.62 P
(semi-synchronous to lar) 77.18 204.62 T
(gely asynchronous.) 182.7 204.62 T
(4.) 63.65 185.62 T
0.57 (Eureka uses bounded synchronisation, leading to frequent, regular and transparent data sharing; Bugspray) 77.18 185.62 P
(uses an explicit synchronisation model, allowing users to update their changes as needed.) 77.18 172.62 T
(5.) 63.65 153.62 T
0.93 (Eureka allows each user free access to the workspace; Bugspray uses an application-speci\336c consistency) 77.18 153.62 P
(management policy) 77.18 140.62 T
(.) 162.93 140.62 T
0.36 (It is certainly not the case that the approach adopted by one example is right, and that adopted by the other is) 63.65 123.62 P
-0.57 (wrong. Nor is it the case that one approach subsumes the other, or even that one particular option for each design) 63.65 110.62 P
-0.56 (decision is more correct or more general. Rather, these and other design decisions reflect the way in which infra-) 63.65 97.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 96
%%Page: "97" 97
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples.) 368.99 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(97) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.24 (structure requirements and patterns of collaborative activity interact; the decisions can only be resolved in the) 45.65 737.62 P
-0.49 (context of particular applications or scenarios. What\325s more, looking at new applications will not simply require) 45.65 724.62 P
-0.03 (different sets of options for these various decisions, but instead will introduce entirely new candidate solutions) 45.65 711.62 P
0.76 (for these decisions, as well as opening up new areas for design decision-making. In other words, supporting) 45.65 698.62 P
0.46 (these applications means supporting the different strategies which they might use; mapping the infrastructure) 45.65 685.62 P
(supplied by the toolkit onto the needs of the application, rather than the other way around.) 45.65 672.62 T
2 12 Q
(7.5.2  Flexibility In Prospero and Other T) 45.65 648.95 T
(oolkits) 259.74 648.95 T
0 11 Q
-0.67 (In Chapter 2, six existing CSCW toolkits were described, with particular focus on their support for programming) 45.65 631.62 P
-0.33 (flexibility. Having now seen the core elements of Prospero\325s design, and examples of applications developed to) 45.65 618.62 P
-0.5 (demonstrate its flexibility, it seems appropriate to return to those systems and contrast the flexibility in Prospero) 45.65 605.62 P
(with that offered in the other systems. Could they be used to build these two applications, and if not, why not?) 45.65 592.62 T
0.28 (There are two sets of reasons why it would be difficult or impossible to generate these two applications using) 45.65 572.62 P
(the other toolkits. One set is fairly simple; the second is more significant.) 45.65 559.62 T
2 F
(7.5.2.1  Surface Flexibility) 45.65 532.62 T
0 F
0.62 (The first set of reasons arise from the inability of some toolkits to provide specific high-level features of the) 45.65 515.62 P
0.24 (application designs. For instance, Oval and Suite do not provide support for the forms of interface variability;) 45.65 502.62 P
1.65 (Suite operates in terms of textual interaction, while Oval provides graphical interaction only through pre-) 45.65 489.62 P
0.71 (defined views which do not include arbitrary graphical objects. While they could both support the Bugspray) 45.65 476.62 P
-0.29 (application, which uses a simple editor-like visualisation of structured data, neither has support for the forms of) 45.65 463.62 P
0.53 (graphical interaction in Eureka. This is a more significant issue in the case of Oval, since it is intended to be) 45.65 450.62 P
0.15 (used for end-user variability, without further programming; since Suite is organised as a library for use within) 45.65 437.62 P
1.62 (other programs, it may be possible to build graphical interfaces, although no such applications have been) 45.65 424.62 P
(described in the Suite literature.) 45.65 411.62 T
0.05 (Similarly, Oval and MEAD do not provide control over the patterns of data sharing and consistency which are) 45.65 391.62 P
0.04 (illustrated by the use of free-for-all access in Eureka and application-specific consistency control in Bugspray.) 45.65 378.62 P
0.32 (This level of control is simply outside their design requirements. Similarly, while Suite provides flexible data) 45.65 365.62 P
0.18 (management and consistency controls, its control is provided in terms of rules based on predefined conditions) 45.65 352.62 P
-0.36 (and facilities. It is not cast in terms of application-specific needs, as was exploited in the case of Bugspray\325s use) 45.65 339.62 P
(of consistency guarantees.) 45.65 326.62 T
2 F
(7.5.2.2  Architectural Flexibility) 45.65 299.62 T
0 F
0.22 (The second set of reasons, however, are more relevant to the basic design of the toolkits, and to the use of the) 45.65 282.62 P
(OI approach in Prospero.) 45.65 269.62 T
-0.29 (Some of the toolkits described in Chapter 2 have no support for the forms of architectural variability seen in the) 45.65 249.62 P
-0.23 (examples presented here. Eureka is fully-replicated, highly synchronous, with automatic synchronisation. Bug-) 45.65 236.62 P
-0.31 (spray is centralised with distributed caching, semi-synchronous to asynchronous, with explicit synchronisation.) 45.65 223.62 P
-0.34 (However, amongst the toolkits, Oval, GroupKit and Rendezvous are fully synchronous) 45.65 210.62 P
0 8.8 Q
-0.27 (4) 425.05 215.02 P
0 11 Q
-0.34 (, and Oval and Rendez-) 429.45 210.62 P
0.42 (vous share an emphasis on centralised architectures. Suite and COLA also emphasise synchronous operation,) 45.65 197.62 P
-0.5 (and although they provide opportunities for more flexible control, these do not extend to the more asynchronous) 45.65 184.62 P
0.2 (use of Bugspray. MEAD, similarly, assumes synchronous working \050although, again, this level of architectural) 45.65 171.62 P
-0.53 (flexibility is simply not an issue in its design, since it focuses more on visualisation and user interface coupling\051.) 45.65 158.62 P
45.65 110.95 531.65 131.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 118.94 177.62 118.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
-8.35 24.95 603.65 816.95 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(4.  That is, they provide only for real-time connections between processes. Clearly) 45.65 104.95 T
(, asynchronous models of work can be modelled) 341.76 104.95 T
(through synchronous interactions with a permanently-running server) 45.65 94.95 T
(.) 292.11 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 97
%%Page: "98" 98
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(98) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.11 (Critically, where mechanisms exist for deeper flexibility in the six toolkits of Chapter 2, their use of traditional) 63.65 737.62 P
-0.05 (abstraction techniques requires that the programmer \322drops down\323 to the implementation level in order to gain) 63.65 724.62 P
-0.17 (control. For instance, COLA\325s separation of mechanism and policy means that the entire data management and) 63.65 711.62 P
0.09 (consistency control mechanisms must be implemented within the application, requiring that it deal with a new) 63.65 698.62 P
-0.59 (level of abstraction. The two levels are inextricably mixed. GroupKit\325s \322open protocol\323 approach constrains this) 63.65 685.62 P
-0 (slightly by dealing in terms of a specific protocol for managing, say, data consistency, but still requires a com-) 63.65 672.62 P
0.08 (plete implementation; there is no provision for the incremental definition of new mechanisms and the optional) 63.65 659.62 P
0.16 (reuse of existing facilities, since open protocols are) 63.65 646.62 P
3 F
0.16 (completely) 293.13 646.62 P
0 F
0.16 ( open. In other words, while the OI approach is) 340.78 646.62 P
0.16 (designed to) 63.65 633.62 P
3 F
0.16 (allow) 117.13 633.62 P
0 F
0.16 ( programmers to) 141.58 633.62 P
3 F
0.16 (become involved in) 217.52 633.62 P
0 F
0.16 ( aspects of the infrastructure which supports their appli-) 302.76 633.62 P
(cations, these other approaches) 63.65 620.62 T
3 F
(require) 203.25 620.62 T
0 F
( programmers to) 235.63 620.62 T
3 F
(take responsibility) 311.09 620.62 T
0 F
( for them.) 392.06 620.62 T
2 12 Q
(7.5.3  OI and Re\337ection in Prospero) 63.65 596.95 T
0 11 Q
0.08 (The value of Prospero, then, is not in the particular) 63.65 579.62 P
3 F
0.08 (set of options) 291.1 579.62 P
0 F
0.08 ( it offers to application programmers, and the) 349.93 579.62 P
0.05 (different included mechanisms from which they can pick and chose. Rather, it lies in the provision of a frame-) 63.65 566.62 P
0.23 (work) 63.65 553.62 P
3 F
0.23 (within which) 89.23 553.62 P
0 F
0.23 ( new behaviours and structures can be defined. Each of the applications has taken elements) 145.99 553.62 P
0.04 (from the Prospero toolkit and tailored them to its specific needs, whether that be to the local versus the remote) 63.65 540.62 P
-0.17 (effects of executing actions, or the means by which promises can be compared. These specialisations were per-) 63.65 527.62 P
-0.43 (formed simply and concisely, and fit naturally into the general structure for collaborative action which Prospero) 63.65 514.62 P
1.8 (sets up and implements. Furthermore, the code within Prospero which implements various specialisations) 63.65 501.62 P
0.03 (employed by these two examples is similarly straightforward. The difference between) 63.65 488.62 P
6 9 Q
0.05 (<bounded-stream>) 444.59 488.62 P
0 11 Q
0.03 ( and) 530.99 488.62 P
6 9 Q
-1.26 (<explicit-synch-stream>,) 63.65 475.62 P
0 11 Q
-0.64 ( for example, requires three lines of Lisp code; and the addition of application-spe-) 193.25 475.62 P
(cific consistency management in Bugspray was only a few lines of code.) 63.65 462.62 T
-0.49 (The use of OI techniques, and the metaobject protocol in particular, is critical to the way in which this flexibility) 63.65 442.62 P
(is achieved.) 63.65 429.62 T
-0.29 (First, it provides the structures for programmers to gain control over aspects of the implementation. This means) 63.65 409.62 P
0.09 (not only the opportunity to create new structures and mechanisms which are usable within the toolkit, but also) 63.65 396.62 P
-0.46 (modifications which are seamlessly integrated into the toolkit\325s internal mechanisms \050such as changes to stream) 63.65 383.62 P
(synchronisation control, which then take immediate effect within the running system\051.) 63.65 370.62 T
0.59 (Second, it provides the means to do this more extensively than a parameterised approach will allow. That is,) 63.65 350.62 P
1.2 (extensions are made not only through the structural aspects of the object-oriented encoding \050the MOP as a) 63.65 337.62 P
0.43 (reflective representation\051, but also through the use of metacode, rather than simply \322meta-switches\323. The dif-) 63.65 324.62 P
(ference between the MOP approach and pure parameterisation is best seen in comparisons with Oval.) 63.65 311.62 T
-0.27 (Third, the metaobject protocol retains the use of high-level specifications which \322dropping down\323 to the imple-) 63.65 291.62 P
0.87 (mentation level would preclude. The components which metacode addresses are just those which base-level) 63.65 278.62 P
0.98 (code uses. Programmers express metacode in terms of the requirements on these reified metaobject classes,) 63.65 265.62 P
-0.28 (while other, implementation-specific details which lie underneath remain hidden. The same metalevel interface) 63.65 252.62 P
0.26 (can be maintained across implementations of Prospero, since the metalevel interface is written in terms of the) 63.65 239.62 P
3 F
(revealed structure) 63.65 226.62 T
0 F
( of the system, rather than the details of its implementation.) 143.99 226.62 T
-0.31 (This, in turn, encourages metaprogramming in terms of the specifics of the application, rather than the specifics) 63.65 206.62 P
0.38 (of the toolkit implementation. So, for instance, the use of consistency guarantees represents the expression of) 63.65 193.62 P
0.19 (application-specific requirements, rather than the re-implementation of consistency management in the toolkit) 63.65 180.62 P
(\050as would be required by, say, GroupKit\051.) 63.65 167.62 T
2.47 (Each of these elements\321application-specific control over aspects of the underlying system\325s behaviour,) 63.65 147.62 P
-0.52 (through programmatic access to a revealed model of its inherent structure\321derives directly from computational) 63.65 134.62 P
0.05 (reflection \050self-referential models\051 and the metaobject protocol \050object-oriented meta-structure\051 as elements of) 63.65 121.62 P
(the Open Implementation approach.) 63.65 108.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 98
%%Page: "99" 99
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples.) 368.99 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(99) 523.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 14 Q
0 X
(7.6  Summary) 45.65 735.62 T
0 11 Q
-0 (Building on the concepts and mechanisms introduced primarily in Chapters 5 and 6, this chapter has presented) 45.65 713.62 P
1.19 (two longer worked examples of applications built using the prototype Prospero implementation. These two) 45.65 700.62 P
-0.63 (examples vary significantly in their scope, structure and style of interaction; the first is a synchronous, replicated) 45.65 687.62 P
-0.03 (shared graphical editor, and the second is a more asynchronous, centralised collaborative database application.) 45.65 674.62 P
-0.47 (Although the styles, and hence internal organisation, of these two applications differ considerably, they are both) 45.65 661.62 P
0.96 (supported within the framework which Prospero defines and implements. Application programmers can use) 45.65 648.62 P
0.86 (specialisation and refinement to tailor the basic Prospero mechanisms and structures \050such as) 45.65 635.62 P
6 9 Q
1.69 (<stream>) 468.95 635.62 P
0 11 Q
0.86 ( and) 512.15 635.62 P
6 9 Q
1.46 (<promise>) 45.65 622.62 P
0 11 Q
0.74 (\051, as well as pre-defined and default derivatives of these \050such as) 94.25 622.62 P
6 9 Q
1.46 (<bounded-stream>) 389.98 622.62 P
0 11 Q
0.74 ( and) 476.38 622.62 P
6 9 Q
1.46 (<lock-) 499.25 622.62 P
-1.23 (promise>) 45.65 609.62 P
0 11 Q
-0.62 (\051 to match the needs of their particular applications or domains, while maintaining the overall structure) 88.85 609.62 P
(of their code and effecting a simple separation between application code, toolkit use and toolkit specialisation.) 45.65 596.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 99
%%Page: "100" 100
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 7: Using Prospero: Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(100) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 100
%%Page: "101" 101
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 8: Summary and Conclusions.) 407.87 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(101) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Chapter 8:) 45.65 674.29 T
(Summary and Conclusions) 45.65 646.29 T
0 11 Q
-0.54 (We have now seen the various elements of this work\321motivations, analysis, development and use. In this chap-) 45.65 554.42 P
-0.46 (ter, I will briefly summarise the preceding material, reiterate some of the principal points to show how this work) 45.65 541.42 P
(has addressed them, and then point the way towards opportunities for further investigation.) 45.65 528.42 T
2 14 Q
(8.1  Recapitulation) 45.65 501.42 T
0 11 Q
0.28 (I began \050in Chapters 1\3203\051 by describing a problem\321that existing CSCW toolkits are too inflexible to support) 45.65 479.42 P
-0 (the range of behaviours needed by collaborative tools. This problem has two aspects: one social, and one tech-) 45.65 466.42 P
-0.23 (nical. The social aspect, as illustrated by a number of experimental and naturalistic studies, is that collaborative) 45.65 453.42 P
-0.15 (technologies are typically ill-suited to the flexible and open ways in which collaborative activity proceeds. The) 45.65 440.42 P
0.44 (technological aspect is that traditional approaches to the design of toolkits require toolkit developers to make) 45.65 427.42 P
-0.05 (implementation decisions which subsequently restrict the ways in which those toolkits can be used and, hence,) 45.65 414.42 P
(the range and form of the applications which can be built using them.) 45.65 401.42 T
0.49 (These two aspects are related. In Chapter 3, I drew on recent work on Open Implementation to analyse these) 45.65 381.42 P
-0.37 (problems in terms of the use of) 45.65 368.42 P
3 F
-0.37 (abstraction) 182.71 368.42 P
0 F
-0.37 (, in both toolkits and applications. This analysis suggests a particular) 232.82 368.42 P
-0.38 (form of solution\321the use of Open Implementation techniques to open up a CSCW toolkit, resulting in a system) 45.65 355.42 P
-0.23 (in which the components and mechanisms that the toolkit offers can be manipulated, controlled and specialised) 45.65 342.42 P
(by application developers to match the needs of particular applications and usage situations.) 45.65 329.42 T
-0.68 (The main body of the dissertation \050chapters 4\3207\051 has outlined such a solution. Chapter 4 described the basic form) 45.65 309.42 P
-0.12 (and design principles behind Prospero, a CSCW application toolkit designed using Open Implementation tech-) 45.65 296.42 P
-0.33 (niques. Chapters 5 and 6 introduced two novel techniques which the toolkit embodies. Each of these techniques) 45.65 283.42 P
0.14 (is focussed on providing ways to map implementations structures onto application needs, rather than the other) 45.65 270.42 P
(way around.) 45.65 257.42 T
-0.31 (The first technique is the) 45.65 237.42 P
3 F
-0.31 (divergence/synchronisation approach) 156.21 237.42 P
0 F
-0.31 (, a descriptive and implementational framework) 322.41 237.42 P
0.68 (for managing collaborative data spaces. Divergence and synchronisation cast the problem of distributed data) 45.65 224.42 P
-0.47 (control in terms of managing and resolving inconsistency, rather than attempting to avoid it. This means that the) 45.65 211.42 P
1.12 (application can get involved in replication control. This framework is specifically designed for the ways in) 45.65 198.42 P
-0.48 (which potentially replicated data is processed in) 45.65 185.42 P
3 F
-0.48 (collaborative) 256.47 185.42 P
0 F
-0.48 ( rather than simply distributed environments, and,) 315.13 185.42 P
-0.15 (as such, gives much more direct support for collaborative activity. Specifically, it provides support for scalable) 45.65 172.42 P
-0.5 (synchrony \050by opening up \322synchronicity\323\051, opportunistic work \050by allow application-controlled inconsistency\051) 45.65 159.42 P
(and multi-synchronous action \050by turning \322floor control\323 into an application issue\051.) 45.65 146.42 T
-0.14 (The second technique,) 45.65 126.42 P
3 F
-0.14 (consistency guarantees) 146.64 126.42 P
0 F
-0.14 (, supports the management of consistency over such a collabora-) 248.84 126.42 P
0.89 (tive data store. Consistency guarantees not only provide direct support for collaborative activity \050unlike, for) 45.65 113.42 P
0.17 (example, the locks of traditional distributed or multi-user databases\051, but are also a means for application pro-) 45.65 100.42 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 101
%%Page: "102" 102
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 8: Summary and Conclusions) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(102) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.53 (grammers to express the semantics of application operations. Application semantics provide a much richer basis) 63.65 737.62 P
-0.36 (for decisions about concurrency than would be available if all actions had simply to be mapped to the most gen-) 63.65 724.62 P
3.05 (eral read/write-semantics model. As a result, collaborative applications developed using Prospero have) 63.65 711.62 P
0.52 (increased potential for concurrency and opportunism as appropriate for the particular application \050rather than) 63.65 698.62 P
(pre-conceived notions of allowable concurrency embedded within the toolkit\325s design\051.) 63.65 685.62 T
0.39 (These techniques have been demonstrated and implemented in the prototype Prospero toolkit. To supplement) 63.65 665.62 P
0.48 (the smaller examples which Chapters 5 and 6 used to illustrate technical points, Chapter 7 presented two full) 63.65 652.62 P
0.19 (examples\321Eureka, a shared graphical editor, and Bugspray, a multi-user bug-tracking database. Individually,) 63.65 639.62 P
1.36 (these examples both illustrate how Prospero\325s structures and principles are used in designing collaborative) 63.65 626.62 P
-0.57 (applications, and how the relationship between toolkit facilities and application programming is managed. More) 63.65 613.62 P
0.02 (importantly, when taken together, these two examples illustrate the flexibility which Prospero embodies. They) 63.65 600.62 P
-0.14 (demonstrate how a single toolkit can embody radically different models of collaboration, and how applications) 63.65 587.62 P
(can revise and adapt toolkit mechanisms for their own needs.) 63.65 574.62 T
2 14 Q
(8.2  Claims and Goals) 63.65 547.62 T
0 11 Q
(A number of claims and goals were set out in the introduction as the principal elements of this dissertation.) 63.65 525.62 T
3 F
(1.) 63.65 505.62 T
0.22 (That the evidence of empirical and naturalistic studies of cooperative work demonstrates that usage issues) 77.18 505.62 P
(and system issues ar) 77.18 492.62 T
(e fundamentally linked.) 166.91 492.62 T
0 F
(While there are many examinations of the use of interactive technology \050supporting both individual users) 77.18 475.62 T
(and collaborating groups\051 which demonstrate the ways in which the technology systematically undermines) 77.18 462.62 T
-0.15 (patterns of everyday action, these critiques have typically focussed on design features of the particular tech-) 77.18 449.62 P
(nologies in use. Here, I have drawn upon a range of experimental and naturalistic studies, emphasising the) 77.18 436.62 T
(ways in which they show activity to be or) 77.18 423.62 T
(ganised around the \336ne detail of interactive technologies, emer) 260.3 423.62 T
(g-) 536.58 423.62 T
(ing not only from the interface but as re\337ections of the implementation. On this basis, I have ar) 77.18 410.62 T
(gued for a) 495.24 410.62 T
(much stronger relationship between the or) 77.18 397.62 T
(ganisation of computational mechanism and the or) 262.42 397.62 T
(ganisation of) 484.65 397.62 T
-0.19 (activity around it. In other words, the relationship between system design and system use is more than inter-) 77.18 384.62 P
-0.38 (face-deep. The design of more ef) 77.18 371.62 P
-0.38 (fective interactive and collaborative technologies, then, must begin with an) 220.46 371.62 P
(understanding of these sorts of interactions and their implications.) 77.18 358.62 T
3 F
(2.) 63.65 339.62 T
0.47 (That the r) 77.18 339.62 P
0.47 (eevaluation of abstraction in softwar) 121.12 339.62 P
0.47 (e engineering, set out by r) 285.17 339.62 P
0.47 (esear) 402 339.62 P
0.47 (ch in Open Implementation,) 425.42 339.62 P
(applies to these issues as encounter) 77.18 326.62 T
(ed in CSCW) 233.52 326.62 T
(.) 286.28 326.62 T
0 F
-0.16 (In Chapter 3, I introduced the principles behind recent work on Open Implementation \050and their conceptual) 77.18 309.62 P
-0.2 (foundations in the work of computational re\337ection\051. A fundamental precept of this work is that abstraction) 77.18 296.62 P
-0.38 (in software engineering dif) 77.18 283.62 P
-0.38 (fers fundamentally from abstraction in mathematics. It ar) 194.68 283.62 P
-0.38 (gues that computational) 442.93 283.62 P
(abstractions are not wholly abstract, but rather are the \322visible components\323 of underlying, concrete imple-) 77.18 270.62 T
(mentations\321implementations which carry with them constraints and implications for their use.) 77.18 257.62 T
(I have demonstrated that this analysis can be carried over to the sorts of abstractions typically provided in) 77.18 240.62 T
(collaborative systems and toolkits for the design of collaborative systems. Abstractions such as \322shared) 77.18 227.62 T
(object\323, \322workspace\323 or \322telepointer\323 are only useful in such toolkits as the interface to implementations;) 77.18 214.62 T
-0.41 (but those implementations carry with them implications for the nature of collaborative activity which can be) 77.18 201.62 P
(carried out over those abstractions. Further) 77.18 188.62 T
(, the abstract interfaces themselves provide no expression of) 265.54 188.62 T
-0.16 (these constraints. It is issues of just this sort which lead to the problems described above\321breakdowns aris-) 77.18 175.62 P
(ing from the separation of user activity and system behaviour \050abstract manipulation and actual implemen-) 77.18 162.62 T
(tation\051.) 77.18 149.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 102
%%Page: "103" 103
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 8: Summary and Conclusions.) 407.87 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(103) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
3 11 Q
0 X
(3.) 45.65 737.62 T
(That OI/r) 59.18 737.62 T
(e\337ective principles can be used to design a novel CSCW toolkit.) 100.64 737.62 T
0 F
-0.17 (The obvious result of an OI-style analysis of the \337exibility problem in CSCW is an OI-style solution to that) 59.18 720.62 P
-0.16 (problem. I have presented Prospero, a prototype CSCW toolkit. Prospero builds on the OI analysis by open-) 59.18 707.62 P
(ing up toolkit abstractions\321structures and mechanisms\321to examination and manipulation by application) 59.18 694.62 T
-0.38 (clients. The clients can \322become involved\323 in the implementation of the infrastructure which supports them.) 59.18 681.62 P
(The concepts which Prospero embodies \050principally) 59.18 668.62 T
(, the diver) 287.29 668.62 T
(gence/synchronisation framework, and the) 331.39 668.62 T
(use of consistency guarantees\051 are designed not just to support cooperative work, but as a basis for pro-) 59.18 655.62 T
(grammatic extensions and specialisation of Prospero\325) 59.18 642.62 T
(s internal mechanisms.) 293.52 642.62 T
3 F
(4.) 45.65 623.62 T
-0.15 (That a toolkit built along these lines yields signi\336cant impr) 59.18 623.62 P
-0.15 (ovements in design \050and hence, usage\051 \337exibility) 316.86 623.62 P
-0.15 (.) 528.9 623.62 P
0 F
-0.29 (T) 59.18 606.62 P
-0.29 (wo examples presented in Chapter 7 to help demonstrate the \337exibility achieved through Prospero\325) 65.14 606.62 P
-0.29 (s use of) 496.15 606.62 P
(Open Implementation techniques. These applications vary across a number of dimensions. They dif) 59.18 593.62 T
(fer not) 497.08 593.62 T
(only in their application domains\321the traditional \050and motivational\051 area of \337exibility in toolkit design\321) 59.18 580.62 T
(but also in the nature and structure of their implementation. These implementational variances\321synchro-) 59.18 567.62 T
(nous versus asynchronous, peer) 59.18 554.62 T
(-to-peer versus client-server) 198.27 554.62 T
(, centralised versus replicated\321are ones which) 321.23 554.62 T
(cross-cut the barriers which traditional toolkit designs erect. Chapter 7 showed how the other toolkits intro-) 59.18 541.62 T
-0.16 (duced in Chapter 2 would either fail altogether to support these two dif) 59.18 528.62 P
-0.16 (ferent applications, or would require) 369.31 528.62 P
(the programmer to \322step down\323 into the code of the implementation \050if this were available\051 and provide) 59.18 515.62 T
(implementation-speci\336c extensions and modi\336cations. Prospero\325) 59.18 502.62 T
(s model allows customisation at a high-) 343.64 502.62 T
(level through the metalevel interface.) 59.18 489.62 T
-0.33 (Critically) 59.18 472.62 P
-0.33 (, Prospero does not provide a) 100.03 472.62 P
3 F
-0.33 (parameterised) 229.13 472.62 P
0 F
-0.33 ( implementation, in which users can select one of a set) 292.67 472.62 P
(of pre-de\336ned behaviours for each component of an application. Rather) 59.18 459.62 T
(, it provides a framework within) 373.39 459.62 T
(which new behaviours and mechanisms can be crafted through the programmatic extension and specialisa-) 59.18 446.62 T
(tion of revealed aspects of the toolkit\325) 59.18 433.62 T
(s internals. The view that Prospero provides onto aspects of its inter-) 225.38 433.62 T
(nal structure, and the opportunities that it of) 59.18 420.62 T
(fers for applications to tailor and specialise this structure) 252.08 420.62 T
(according to their particular needs, are the essence of the Open Implementations approach; and also the) 59.18 407.62 T
(means by which Prospero of) 59.18 394.62 T
(fers considerably greater \337exibility and control than traditional toolkits.) 184.24 394.62 T
2 14 Q
(8.3  Future W) 45.65 367.62 T
(ork and Opportunities) 130.21 367.62 T
0 11 Q
0.4 (The analysis and design presented in this dissertation have been pursued as an experiment to demonstrate the) 45.65 345.62 P
-0.04 (validity of the techniques and their applicability to CSCW as a domain where concerns of openness, flexibility) 45.65 332.62 P
0.34 (and revisability are paramount. Building further on this, then, there are a number of areas for further research) 45.65 319.62 P
(investigation.) 45.65 306.62 T
(1.) 45.65 286.62 T
3 F
0.77 (Development of Pr) 59.18 286.62 P
0.77 (osper) 143.4 286.62 P
0.77 (o) 167.44 286.62 P
0 F
0.77 (. The most obvious area for future work is in further extensions to the Prospero) 172.94 286.62 P
(toolkit itself.) 59.18 273.62 T
-0.01 (A number of areas for possible future developed were discussed in Chapter 4, as areas which the prototype) 59.18 256.62 P
(toolkit does not address. For instance, extension to the user interface is one obvious area, which would pro-) 59.18 243.62 T
(vide a better integration of user interface actions \050particularly \322intermediate\323 actions, such as dragging and) 59.18 230.62 T
-0.39 (selection\051 with the actions which Prospero sees, as well as opening up more opportunities for the integration) 59.18 217.62 P
(of user interface components with the shared data space \050discussed in section 4.5.2\051. Similarly) 59.18 204.62 T
(, many inter-) 472.73 204.62 T
-0.14 (esting aspects of application-speci\336c control have been left unaddressed by Prospero in the areas of session) 59.18 191.62 P
(management, object naming/identity and object namespace scope control. Areas such as these, omitted in) 59.18 178.62 T
(the initial implementation so as to concentrate on core elements which demonstrate the application of OI) 59.18 165.62 T
(principles, are candidates for the same sorts of development as distributed data management and consis-) 59.18 152.62 T
(tency control have received here.) 59.18 139.62 T
-0.03 (Another important area is in direct support for dynamic \337exibility through dynamic re\337ection, described in) 59.18 122.62 P
(Chapter 3. The accessible meta-level model is the basis for this, by providing mechanisms through which) 59.18 109.62 T
(applications can change the model in order to change their behaviour dynamically) 59.18 96.62 T
(. In the prototype Pros-) 419.26 96.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 103
%%Page: "104" 104
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 8: Summary and Conclusions) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(104) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
(pero implementation described here, this can be achieved through the exploitation of Lisp\325) 77.18 737.62 T
(s inherent dyna-) 475.26 737.62 T
(mism. Using CLOS\325) 77.18 724.62 T
(s) 167.34 724.62 T
6 9 Q
(change-class) 174.37 724.62 T
0 11 Q
( facility) 239.17 724.62 T
(, for example, a programmer could switch between dif) 272.37 724.62 T
(ferent) 511.06 724.62 T
(models of synchronisation at run-time by) 77.18 711.62 T
(, for example, changing a stream from a bounded-stream to an) 257.65 711.62 T
-0.33 (explicit-synch-stream. However) 77.18 698.62 P
-0.33 (, Prospero itself does not provide support for this, even though it is clearly a) 217.55 698.62 P
(highly desirable facility even when implemented in a more static programming language.) 77.18 685.62 T
(2.) 63.65 666.62 T
3 F
0.07 (Open Implementations) 77.18 666.62 P
0 F
0.07 (. A number of areas open for further work focus on the development of Open Imple-) 177.15 666.62 P
(mentation techniques and, in particular) 77.18 653.62 T
(, their application to CSCW) 248.13 653.62 T
(.) 369.65 653.62 T
-0.26 (First, the design of Open Implementations is at an early stage of development, and general techniques build-) 77.18 636.62 P
(ing on the generalised experiences of OI developers are only slowly being developed \050e.g. recent work on) 77.18 623.62 T
(OIA/D \050Kiczales et al., 1995\051\051. Each new OI experience, and each application to a new domain, brings) 77.18 610.62 T
(re\336nements and insights into the model. As described in Chapter 7, one interesting aspect of the Open) 77.18 597.62 T
(Implementation in Prospero is the way in which applications) 77.18 584.62 T
3 F
(enrich) 346.97 584.62 T
0 F
(, rather than) 375.08 584.62 T
3 F
(con\336gur) 430.67 584.62 T
(e) 466.92 584.62 T
0 F
(, the base lan-) 471.81 584.62 T
(guage. The ways in which this happens, its consequences, and its applicability to new domains, all remain) 77.18 571.62 T
(avenues for fruitful investigation in the development of the OI technique.) 77.18 558.62 T
-0.05 (Second, as the focus of OI techniques has broadened from its original grounding in programming language) 77.18 541.62 P
(semantics and applications, researchers from other areas have begun to adopt aspects of the OI approach) 77.18 528.62 T
(and apply them to their own work. This has included a number of investigations in distributed systems and) 77.18 515.62 T
(distributed operating systems of the value of re\337ective and metalevel techniques \050e.g. Chiba and Masuda,) 77.18 502.62 T
(1993; Okamura and Ishikawa, 1994; Stroud and W) 77.18 489.62 T
(u, 1995\051. These investigations aim principally at) 300.99 489.62 T
(dynamic control and con\336guration of distributed systems and augmentation of programming languages in) 77.18 476.62 T
-0.38 (support of distributed programming, so typically at a lower level than the work presented here; their focus is) 77.18 463.62 P
-0.41 (infrastructure \050that is, \322below\323 the application\051. However) 77.18 450.62 P
-0.41 (, they re\337ect a concern with the mutual implication) 326.01 450.62 P
(of programming, distribution and concurrency issues, and as such, share some of the motivations which) 77.18 437.62 T
(have driven this work. They point towards an opportunity to use re\337ective techniques to integrate system) 77.18 424.62 T
(and application issues by using metalevel information to coordinate the needs of both. The subsequent) 77.18 411.62 T
-0.39 (issues of layered metaobject protocols is one which, similarly) 77.18 398.62 P
-0.39 (, requires investigation, and which \050despite the) 344.33 398.62 P
(occasional use of CLOS\325) 77.18 385.62 T
(s re\337ective facilities in support of my own\051 has been outside the scope of this) 186.87 385.62 T
(research.) 77.18 372.62 T
(3.) 63.65 353.62 T
3 F
0.43 (T) 77.18 353.62 P
0.43 (echnical and Social Issues in Systems Design) 82.29 353.62 P
0 F
0.43 (. A fundamental motivation for much of this work has been) 284.09 353.62 P
-0.18 (the relationship between technical and social concerns in the development of interactive technologies. From) 77.18 340.62 P
-0.17 (its inception, CSCW has had a strong concern with the social aspects of group work, as well as with techno-) 77.18 327.62 P
1.29 (logical opportunities. However) 77.18 314.62 P
1.29 (, in the work presented here, I have been particularly concerned with the) 215.89 314.62 P
0.67 (ways in which these issues are mutually in\337uential and can be integrated in the search for some common) 77.18 301.62 P
(solution.) 77.18 288.62 T
-0.09 (The use of re\337ective techniques towards this end is particularly interesting because of the way that they cut) 77.18 271.62 P
(across the boundaries which normally separate social concerns \050and sociologists\051 from technical concerns) 77.18 258.62 T
(\050and technologists\051. In other recent work, I have been investigating the use of explicit, computationally) 77.18 245.62 T
(re\337ective representations in traditional single-user interactive systems, orienting towards them as) 77.18 232.62 T
(\322accounts\323 which systems of) 77.18 219.62 T
(fer of their own action \050Dourish, 1995; Dourish et al., 1996\051. This use of) 204.38 219.62 T
(accounts, and the notion of accountability on which it draws \050based on the role of accountability in Gar\336n-) 77.18 206.62 T
(kel\325) 77.18 193.62 T
(s ethnomethodology \0501967\051\051, has provided the underpinnings for a new form of relationship between) 93.68 193.62 T
(social science and system design \050Button and Dourish, 1996\051.) 77.18 180.62 T
(An important area of investigation which this opens up, then, is the use of these sorts of techniques\321tech-) 77.18 163.62 T
(niques like OI, which break down the traditional barriers of computational systems\321as a means to take) 77.18 150.62 T
(sociological investigations of technology use and make their insights \322real\323 in design; to embed them not) 77.18 137.62 T
(simply in the methods by which we design computer systems, but in the computer systems themselves.) 77.18 124.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 104
%%Page: "105" 105
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 8: Summary and Conclusions.) 407.87 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(105) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 14 Q
0 X
(8.4  Concluding Remarks) 45.65 735.62 T
0 11 Q
-0.13 (In this research, I have taken a set of insights into the nature of CSCW, derived from experimental and natural-) 45.65 713.62 P
0.07 (istic studies of collaborative work, and, from these, developed and demonstrated a new approach to the design) 45.65 700.62 P
0.55 (of CSCW technologies. In doing so, I have presented not only these ideas themselves, but also some mecha-) 45.65 687.62 P
-0.12 (nisms for CSCW implementation. In addition, I have looped back on myself, and encountered and developed a) 45.65 674.62 P
1.28 (set of understandings about the nature of the relationship between technological design and social analysis) 45.65 661.62 P
(which are now spurs to further work.) 45.65 648.62 T
0.14 (It is not uncommon, perhaps, to come to this point in writing a dissertation\321the final paragraph\321only to dis-) 45.65 628.62 P
0.12 (cover that it is not the end at all, but the beginning. The work reported here has demonstrated the applicability) 45.65 615.62 P
-0.41 (and utility of a set of principles: that usage implications drive down deep into the heart of computational design,) 45.65 602.62 P
1.06 (that abstraction \322barriers\323 function better as semi-permeable membranes, and that the representations at the) 45.65 589.62 P
-0.48 (heart of computer systems design are, themselves, up for negotiation and reworking. These principles, however,) 45.65 576.62 P
-0.26 (map out a considerably more vast terrain than can be covered here. I look forward to exploring it further, and to) 45.65 563.62 P
(meeting others there.) 45.65 550.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 105
%%Page: "106" 106
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Chapter 8: Summary and Conclusions) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(106) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 106
%%Page: "107" 107
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Epilogue.) 500.76 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(107) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Epilogue) 45.65 646.29 T
0 11 Q
(And now my charms are all o\325erthrown) 99.65 554.42 T
(And what strength I have\325s mine own) 99.65 541.42 T
(Which is most faint: now t\325is true) 99.65 528.42 T
(I must here be released by you.) 99.65 515.42 T
(But release me from my bands) 99.65 495.42 T
(With the help of your good hands) 99.65 482.42 T
(Gentle breath of yours my sails) 99.65 469.42 T
(Must fill, or else my project fails,) 99.65 456.42 T
(Which was to please. Now I want) 99.65 443.42 T
(Spirits to enforce, art to enchant) 99.65 430.42 T
(And my ending is despair,) 99.65 417.42 T
(Unless I be relieved by prayer) 99.65 404.42 T
(Which pierces so that it assaults) 99.65 391.42 T
(Mercy itself and frees all faults) 99.65 378.42 T
(As from your crimes would pardon\325d be) 99.65 365.42 T
(Let your indulgence set me free.) 99.65 352.42 T
(\321Prospero\325s closing speech from \322The Tempest\323) 189.65 332.42 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 107
%%Page: "108" 108
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Epilogue) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(108) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 108
%%Page: "109" 109
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Collected References.) 461.45 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(109) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Collected References) 45.65 646.29 T
0 11 Q
0.54 (Ahuja, S., Ensor, J., and Lucco, S. \0501990\051. \322A Comparison of Application Sharing Mechanisms In Real-time) 45.65 554.42 P
0.06 (Desktop Conferencing Systems\323, in) 45.65 541.42 P
3 F
0.06 (Proc. ACM Conference on Office Information Systems COIS \32490) 206.3 541.42 P
0 F
0.06 ( \050Boston,) 491.25 541.42 P
(Mass.\051, pp. 238\320248.) 45.65 528.42 T
0.28 (Anderson, T., Bershad, B., Lazowska, E., and Levy, H. \0501992\051.\322Scheduler Activations: Effective Kernel Sup-) 45.65 508.42 P
-0.16 (port for the User-Level Management of Parallelism\323, ACM Transactions on Computer Systems, 10\0501\051, pp. 53\320) 45.65 495.42 P
(79.) 45.65 482.42 T
0.22 (Barghouti, N. and Kaiser, G. \0501991\051.\322Concurrency Control in Advanced Database Applications\323, ACM Com-) 45.65 462.42 P
(puting Surveys, 23\0503\051, pp. 269\320317.) 45.65 449.42 T
0.25 (Beck, E. and Bellotti, V. \0501993\051. \322Informed Opportunism as Strategy: Supporting Coordination in Distributed) 45.65 429.42 P
2.34 (Collaborative Writing\323, in) 45.65 416.42 P
3 F
2.34 (Proc. Third European Conference on Computer-Supported Cooperative Work) 171.22 416.42 P
(ECSCW\32593) 45.65 403.42 T
0 F
(\050Milano, Italy\051, pp. 233\320248.) 99.12 403.42 T
1.18 (Bentley, R. \0501994\051.) 45.65 383.42 P
3 F
1.18 (\322Supporting Multi-User Interface Development for Cooperative Systems\323) 136.59 383.42 P
0 F
1.18 (, PhD Thesis,) 470 383.42 P
(Department of Computing, Lancaster University, England.) 45.65 370.42 T
0.45 (Bentley, R., Rodden, T., Sawyer, P., and Sommerville, I. \0501992\051. \322An Architecture for Tailoring Cooperative) 45.65 350.42 P
0.44 (Multi-User Displays\323, in) 45.65 337.42 P
3 F
0.44 (Proc. ACM Conference on Computer-Supported Cooperative Work CSCW\32592) 158.78 337.42 P
0 F
0.44 ( \050Tor-) 505.25 337.42 P
(onto, Canada\051, pp. 187\320194.) 45.65 324.42 T
-0.67 (Bentley, R. and Dourish, P. \0501995\051. \322Medium vs. Mechanism: Supporting collaboration through customisation\323,) 45.65 304.42 P
0.36 (in) 45.65 291.42 P
3 F
0.36 (Proc. European Conference on Computer-Supported Cooperative Work ECSCW\32595) 57.31 291.42 P
0 F
0.36 (\050Stockholm, Sweden\051,) 433.21 291.42 P
(pp. 133\320148.) 45.65 278.42 T
-0.37 (Berlage, T. \0501994\051. \322A Selective Undo Mechanism for Graphical User Interfaces Based on Command Objects\323,) 45.65 258.42 P
(ACM Transactions on Computer-Human Interaction, 1\0503\051, pp. 269\320294.) 45.65 245.42 T
-0.66 (Bhatti, N. and Schlichting, R. \0501995\051. \322A System for Constructing Configurable High-Level Protocols\323, in) 45.65 225.42 P
3 F
-0.66 (Proc.) 507.51 225.42 P
(ACM SIGCOMM\32595) 45.65 212.42 T
0 F
( \050Boston, Mass.\051.) 136.99 212.42 T
0.52 (Birman, K. and Joseph, T. \0501987\051. \322Exploiting Virtual Synchrony in Distributed Systems\323, in) 45.65 192.42 P
3 F
0.52 (Proc. Eleventh) 465.76 192.42 P
(ACM Symposium on Operating Systems Principles) 45.65 179.42 T
0 F
(, pp. 123\320138.) 268.99 179.42 T
-0.43 (Bly, S. and Minneman, S. \0501990\051.\322Commune: A Shared Drawing Surface\323, in) 45.65 159.42 P
3 F
-0.43 (Proc. ACM Conference on Office) 386.43 159.42 P
(Information Systems COIS \32490) 45.65 146.42 T
0 F
( \050Boston, Mass.\051, pp. 184\320192.) 180.39 146.42 T
-0.5 (Bobrow, D., Kahn, K., Kiczales, G., Masinter, M., Stefik, M., and Zbydel. F. \0501986\051. \322CommonLoops: Merging) 45.65 126.42 P
0.74 (Lisp and Object-Oriented Programming\323, in) 45.65 113.42 P
3 F
0.74 (Proc. ACM Conference on Object-Oriented Programming, Sys-) 246.73 113.42 P
(tems, Languages and Applications OOPSLA \32486) 45.65 100.42 T
0 F
( \050Portland, Oregon\051.) 258.31 100.42 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 109
%%Page: "110" 110
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Collected References) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(110) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.67 (Bowers, J., Button, G. and Sharrock, W. \0501995\051. \322Workflow from Within and Without\323, in) 63.65 737.62 P
3 F
-0.67 (Proc. European Con-) 455.98 737.62 P
(ference on Computer-Supported Cooperative Work ECSCW\32595) 63.65 724.62 T
0 F
( \050Stockholm, Sweden\051, pp. 51\32066.) 342.59 724.62 T
0.61 (Braun, T. and Diot, C. \0501995\051. \322Protocol Implementation Using Integrated Layer Processing\323, in) 63.65 704.62 P
3 F
0.61 (Proc. ACM) 498.94 704.62 P
(SIGCOMM\32595) 63.65 691.62 T
0 F
( \050Boston, Mass.\051.) 129.02 691.62 T
-0.31 (Bretthauer, H., Davis, H., Kopp, J., and Playford, K. \0501993\051. \322Balancing the EuLisp Metaobject Protocol\323, Lisp) 63.65 671.62 P
(and Symbolic Computation, 6\0501/2\051, pp. 119\320138.) 63.65 658.62 T
0.03 (Brink, T. and Gomez. L. \0501992\051. \322A Collaborative Medium for the Support of Conversational Props\323, in) 63.65 638.62 P
3 F
0.03 (Proc.) 525.51 638.62 P
(ACM Conference on Computer-Supported Cooperative Work CSCW\32592) 63.65 625.62 T
0 F
( \050Toronto, Canada\051, pp. 171\320178.) 380.17 625.62 T
0.11 (Brink, T. and Hill, R. \0501993\051. \322Building Shared Graphical Editors Using the Abstraction-Link-View Architec-) 63.65 605.62 P
0.8 (ture\323, in) 63.65 592.62 P
3 F
0.8 (Proc. Third European Conference on Computer-Supported Cooperative Work ECSCW\32593) 104.04 592.62 P
0 F
0.8 ( \050Milano,) 507.91 592.62 P
(Italy\051, pp. 311\320324.) 63.65 579.62 T
0.06 (Button, G. and Dourish, P. \0501996\051. \322Technomethodology: Paradoxes and Possibilities\323, in) 63.65 559.62 P
3 F
0.06 (Proc. ACM Confer-) 462.45 559.62 P
(ence on Human Factors in Computing Systems CHI\32596) 63.65 546.62 T
0 F
( \050Vancouver, Canada\051, pp. 19\32026.) 306.54 546.62 T
-0.4 (Cao, P., Felten, Ed., and Li, K. \0501994\051. \322Implementation and Performance of Application-Controlled File Cach-) 63.65 526.62 P
(ing\323) 63.65 513.62 T
3 F
(,) 82.59 513.62 T
0 F
( in) 85.34 513.62 T
3 F
(Proc. of First Symposium on Operating Systems Design and Implementation) 99.4 513.62 T
0 F
(, pp. 165\320178.) 436.1 513.62 T
-0.23 (Cardelli, L. \0501995\051. \322A Language with Distributed Scope\323, in) 63.65 493.62 P
3 F
-0.23 (Proc. 22nd ACM Symposium on the Principles of) 334.36 493.62 P
(Programming languages) 63.65 480.62 T
0 F
(, pp. 286\320297.) 173.34 480.62 T
0.33 (Chiba, S. \0501995\051. \322A Metaobject Protocol for C++\323, in) 63.65 460.62 P
3 F
0.33 (Proc. ACM Conference on Object-Oriented Program-) 309.7 460.62 P
(ming Systems, Languages and Applications OOPSLA\32595) 63.65 447.62 T
0 F
( \050Austin, Texas\051, pp. 285\320299.) 312.97 447.62 T
1.34 (Chiba, S. and Masuda, T. \0501993\051) 63.65 427.62 P
3 F
1.34 (. \322Designing with an Extensible Distributed Language with a Meta-Level) 214.27 427.62 P
1.93 (Architecture\323) 63.65 414.62 P
0 F
1.93 (, in Proc. European Conference on Object-Oriented Programming ECOOP93 \050Kaiserlautern,) 124.75 414.62 P
(Germany\051.) 63.65 401.62 T
1.36 (Clark, D. and Tennenhouse, D. \0501990\051. \322Architectural Considerations for a New Generation of Protocols\323,) 63.65 381.62 P
(ACM SIGCOMM Communications Review, 20\0504\051, pp. 200\320208.) 63.65 368.62 T
0.1 (Crowley, T., Milazzo, P., Baker, E., Forsdick, H., and Tomlinson, R. \0501990\051. \322MMConf: An Infrastructure for) 63.65 348.62 P
0.94 (Building Shared Multimedia Applications\323, in) 63.65 335.62 P
3 F
0.94 (Proc. ACM Conference on Computer-Supported Cooperative) 274.89 335.62 P
(Work CSCW \32590) 63.65 322.62 T
0 F
( \050Los Angeles, California\051, pp. 329\320342.) 136.97 322.62 T
-0.09 (Cypher, A. and Smith, D.C. \0501995\051.) 63.65 302.62 P
3 F
-0.09 (\322KidSim: End User Programming of Simulations\323) 223.21 302.62 P
0 F
-0.09 (, in) 446.13 302.62 P
3 F
-0.09 (Proc. ACM Confer-) 462.75 302.62 P
(ence on Human Factors in Computing Systems CHI\32595) 63.65 289.62 T
0 F
( \050Denver, Colorado\051, pp. 27\32036.) 306.54 289.62 T
0.06 (De Michaelis, G. and Grasso, A. \0501994\051. \322Situating Conversations with the Language/Action Perspective: The) 63.65 269.62 P
0.16 (Milan Conversation Model\323, in) 63.65 256.62 P
3 F
0.16 (Proc. ACM Conference on Computer-Supported Cooperative Work CSCW\32594) 205.13 256.62 P
0 F
(\050Chapel Hill, North Carolina\051, pp. 89\320100.) 63.65 243.62 T
0.17 (Demers, A., Petersen, K., Spreitzer, M., Terry, D., Theimer, M., and Welch, B. \0501994\051. \322The Bayou Architec-) 63.65 223.62 P
0.93 (ture: Support for Data Sharing among Mobile Users\323, in) 63.65 210.62 P
3 F
0.93 (Proc. First IEEE Workshop on Mobile Computing) 322.55 210.62 P
(Systems and Applications) 63.65 197.62 T
0 F
( \050Santa Cruz, California\051.) 176.09 197.62 T
-0.05 (Dewan, P. \0501990\051. \322A Tour of the Suite User Interface Software\323, in) 63.65 177.62 P
3 F
-0.05 (Proc. ACM Conference on User Interface) 366.01 177.62 P
(Software and Technology UIST\32590) 63.65 164.62 T
0 F
( \050Snowbird, Utah\051.) 216.72 164.62 T
-0.66 (Dewan, P. and Choudhary, R. \0501992\051. \322A High-Level and Flexible Framework for Implementing Multiuser User) 63.65 144.62 P
(Interfaces\323, ACM Transactions on Information Systems, 10\0504\051, pp. 345\320380.) 63.65 131.62 T
0.2 (Dewan, P. and Choudhary, R. \0501995\051. \322Coupling the User Interfaces of a Multiuser Program\323, ACM Transac-) 63.65 111.62 P
(tions on Computer-Human Interaction, 2\0501\051, pp. 1\32039.) 63.65 98.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 110
%%Page: "111" 111
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Collected References.) 461.45 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(111) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
(Dix, A. \0501992\051. \322Pace and Interaction\323, in) 45.65 737.62 T
3 F
(People and Computers VII: Proc. of HCI\32592) 232.3 737.62 T
0 F
(, York, UK, 1992.) 428.13 737.62 T
0.47 (Dourish, P. \0501995\051. \322Accounting for System Behaviour: Representation, Reflection and Resourceful Action\323,) 45.65 717.62 P
(in) 45.65 704.62 T
3 F
(Proc. Third Decennial Conference on Computers in Context CIC\32595) 56.96 704.62 T
0 F
( \050Aarhus, Denmark\051, pp. 147\320156.) 358.52 704.62 T
-0.15 (Dourish, P. and Bellotti, V. \0501992\051. \322Awareness and Coordination in Shared Workspaces\323, in) 45.65 684.62 P
3 F
-0.15 (Proc. ACM Con-) 457.09 684.62 P
(ference on Computer-Supported Cooperative Work CSCW \32492) 45.65 671.62 T
0 F
( \050Toronto, Canada\051, pp. 107\320114.) 320.61 671.62 T
0.56 (Dourish, P., Adler, A., and Smith, B.C. \0501996\051. \322Organising User Interfaces around Reflective Accounts\323, in) 45.65 651.62 P
3 F
(Proc. Reflection\32596) 45.65 638.62 T
0 F
( \050San Francisco, California\051.) 131.8 638.62 T
0.14 (Eisenberg, M. \0501995\051. \322Programmable Applications: Interpreter meets Interface\323, SIGCHI Bulletin, 27\0502\051, pp.) 45.65 618.62 P
(68\32093.) 45.65 605.62 T
0.45 (Ellis, C. and Gibbs, S. \0501989\051. \322Concurrency Control in a Groupware System\323, in) 45.65 585.62 P
3 F
0.45 (Proc. ACM Conference on) 412.97 585.62 P
(Manamagement of Data SIGMOD\32589) 45.65 572.62 T
0 F
(, \050Seattle, Washington\051.) 212.14 572.62 T
-0.02 (Farrag, A. and Ozsu, T. \0501989\051. \322Using Semantic Knowledge of Transactions to Increase Concurrency\323, ACM) 45.65 552.62 P
(Transactions on Database Systems, 14\0504\051, pp. 503\320525.) 45.65 539.62 T
-0.27 (Fischer, G. and Girgensohn, A. \0501990\051. \322End-User Modifiability in Design Environments\323, in) 45.65 519.62 P
3 F
-0.27 (Proc. ACM Con-) 457.33 519.62 P
(ference on Human Factors in Computer Systems CHI\32590) 45.65 506.62 T
0 F
( \050Seattle, Washington\051.) 295.86 506.62 T
-0.43 (Fish, R., Kraut, R., Leland, M., and Cohen, M. \0501988\051. \322Quilt\321A Collaborative Tool for Cooperative Writing\323,) 45.65 486.62 P
(in) 45.65 473.62 T
3 F
(Proc. ACM Conference on Office Information Systems COIS \32488) 56.96 473.62 T
0 F
( \050Palo Alto, California\051.) 341.39 473.62 T
0.19 (Floyd, S., Jacobson, V., McCanne, S., Lui, C-G., and Zhang, L. \0501995\051. \322A Reliable Multicast Framework for) 45.65 453.62 P
(Light-weight Sessions and Application Layer Framing\323, in) 45.65 440.62 T
3 F
(Proc. ACM SIGCOMM\32595) 307.18 440.62 T
0 F
( \050Boston, Mass.\051.) 425.41 440.62 T
-0.26 (Friedman, D. and Wand, M. \0501984\051. \322Reification: Reflection Without Metaphysics\323, in) 45.65 420.62 P
3 F
-0.26 (Proc. ACM Conference) 428.61 420.62 P
(on Lisp and Functional Programming) 45.65 407.62 T
0 F
(\050Austin, Texas\051.) 215.85 407.62 T
(Garfinkel, H. \0501967\051.) 45.65 387.62 T
3 F
(\322Studies in Ethnomethodology\323) 141.57 387.62 T
0 F
(, Prentice-Hall, New York.) 282.74 387.62 T
0.01 (Garfinkel, D., Gust, P., Lemon, M., and Lowder, S. \0501989\051.) 45.65 367.62 P
3 F
0.01 (\322The SharedX Multi-User Interface User\325s Guide,) 309.77 367.62 P
1.55 (Version 2.0\323) 45.65 354.62 P
0 F
1.55 (, Software Technology Lab Report STL-TM-89-07, Hewlett-Packard Laboratories \050Palo Alto,) 104.04 354.62 P
(California\051.) 45.65 341.62 T
0.09 (Greenberg, S. \0501991\051. \322Personalisable Groupware: Accommodating Individual Roles and Group Differences\323,) 45.65 321.62 P
0.17 (in) 45.65 308.62 P
3 F
0.17 (Proc. European Conference on Computer-Supported Collaborative Work ECSCW91) 57.13 308.62 P
0 F
0.17 (, \050Amsterdam, Nether-) 431.72 308.62 P
(land\051, pp. 17\32032.) 45.65 295.62 T
-0.53 (Greenberg, S., Roseman, M., Webster, D., and Bohnet, R. \0501992\051. \322Human and Technical Factors of Distributed) 45.65 275.62 P
(Group Drawing Tools\323, Interacting with Computers 4\0503\051, pp. 364\320392.) 45.65 262.62 T
-0.22 (Greenberg, S. and Marwood, D. \0501994\051. \322Real-Time Groupware as a Distributed System: Concurrency Control) 45.65 242.62 P
-0.68 (and its Effect on the Interface\323, in) 45.65 229.62 P
3 F
-0.68 (Proc. ACM Conference on Computer-Supported Cooperative Work CSCW\32594) 193 229.62 P
0 F
(\050Chapel Hill, North Carolina\051, pp. 207\320218.) 45.65 216.62 T
0.76 (Greif, I. and Sarin, S. \0501986\051. \322Data Sharing in Group Work\323) 45.65 196.62 P
3 F
0.76 (,) 322.39 196.62 P
0 F
0.76 (in) 328.65 196.62 P
3 F
0.76 ( Proc. ACM Conference on Computer-Sup-) 337.21 196.62 P
(ported Cooperative Work CSCW \32486) 45.65 183.62 T
0 F
( \050Austin, Texas\051.) 207.58 183.62 T
0.16 (Grinter, R. \0501995\051. \322Using a Configuration Management Tool to Coordinate Software Development\323, in Proc.) 45.65 163.62 P
(ACM Conference on Organisational Computing Systems COOCS\32595 \050Milpetas, California\051.) 45.65 150.62 T
1.1 (Gust, P. \0501988\051. \322Shared X: X in a Distributed Group Work Environment\323, unpublished paper presented at) 45.65 130.62 P
(Second Annual X Technical Conference.) 45.65 117.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 111
%%Page: "112" 112
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Collected References) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(112) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
0.06 (Haake, A. and Haake, J. \0501993\051. \322Take CoVer: Exploiting Version Management in Collaborative Systems\323, in) 63.65 737.62 P
3 F
(Proc. InterCHI\32593) 63.65 724.62 T
0 F
( \050Amsterdam, Netherlands\051, pp. 406\320413.) 145.52 724.62 T
-0.05 (Haake, J. and Wilson, B. \0501992\051. \322Supporting Collaborative Writing of Hyperdocuments\323, in) 63.65 704.62 P
3 F
-0.05 (Proc. ACM Con-) 474.89 704.62 P
(ference Computer-Supported Cooperative Work CSCW \32492) 63.65 691.62 T
0 F
( \050Toronto, Canada\051, pp. 138\320146.) 324.86 691.62 T
-0.2 (Hamilton, G. and Kougiouris, P. \0501993\051.) 63.65 671.62 P
3 F
-0.2 (\322The Spring Nucleus: A Microkernel for Objects\323) 242.99 671.62 P
0 F
-0.2 (, Sun Microsystems) 462.97 671.62 P
(Laboratories Technical Report TR-93-14 \050Mountain View, California\051.) 63.65 658.62 T
-0.13 (Harper, R. and Hughes, J. \0501993\051. \322What A F-ing System! Send \324em all to the same place and then expect us to) 63.65 638.62 P
1.58 (step \324em hitting: Making technology work in air traffic control\323, in Button \050ed\051,) 63.65 625.62 P
3 F
1.58 (\322Technology in Working) 437.1 625.62 P
(Order\323) 63.65 612.62 T
0 F
(, pp. 127\320144, Routledge, London.) 96.65 612.62 T
-0.46 (Harty, K. and Cheriton, D. \0501992\051. \322Application-Controlled Physical Memory using External Page-Cache Man-) 63.65 592.62 P
1.03 (agement\323, in) 63.65 579.62 P
3 F
1.03 (Proc. ACM Conference on Architectural Support for Programming Languages and Operating) 124.68 579.62 P
(Systems ASPLOS V) 63.65 566.62 T
0 F
( \050Boston, Mass\051, pp. 187\320199.) 149.2 566.62 T
-0.01 (Heath, C. and Luff, P. \0501992\051. \322Collaboration and Control: Crisis Management and Multimedia Technology in) 63.65 546.62 P
(London Underground Line Control Rooms\323, Computer Supported Cooperative Work, 1\0501\3202\051, pp. 69\32095.) 63.65 533.62 T
-0 (Heath, C., Jirotka, M., Luff, P. and Hindmarsh, J. \0501995\051. \322Unpacking Collaboration: the Interactional Organi-) 63.65 513.62 P
(sation of Trading in a City Dealing Room\323, Computer-Supported Cooperative Work, 3\0502\051, pp. 147\320165.) 63.65 500.62 T
1.24 (Herlihy, M. \0501990\051. \322Apologizing Versus Asking Permission: Optimistic Concurrency Control for Abstract) 63.65 480.62 P
(Data Types\323, ACM Transactions on Database Systems, 15\0501\051, pp. 96\320124.) 63.65 467.62 T
-0.41 (Hill, R. \0501992\051. \322The Abstraction-Link-View Paradigm: Using Constraints to Connect User Interfaces to Appli-) 63.65 447.62 P
-0.12 (cations\323, in) 63.65 434.62 P
3 F
-0.12 (Proc. ACM Conference on Human Factors in Computing Systems CHI \32492) 116.27 434.62 P
0 F
-0.12 ( \050Monterey, California\051,) 444.18 434.62 P
(pp. 335\320342.) 63.65 421.62 T
-0.27 (Hill, R. \0501993\051. \322The Rendezvous Constraints Maintainance System\323, in) 63.65 401.62 P
3 F
-0.27 (Proc. ACM Symposium on User Inter-) 382.35 401.62 P
(face Software and Technology UIST\32593) 63.65 388.62 T
0 F
( \050Atlanta, Georgia\051.) 237.8 388.62 T
0.34 (Hill, R., Brinck, T., Rohall, S., Patterson, J., and Wilner, W. \0501994\051. \322The Rendezvous Architecture and Lan-) 63.65 368.62 P
(guage for Multi-User Applications\323, ACM Transactions on Computer-Human Interaction, 1\0502\051, pp. 81\320125.) 63.65 355.62 T
0.21 (Hill, W., Hollan, J., Wroblewski, D., and McCandless, T. \0501992\051. \322Edit Wear and Read Wear\323, in) 63.65 335.62 P
3 F
0.21 (Proc. ACM) 499.33 335.62 P
(Conference on Human Factors in Computing Systems CHI\32592) 63.65 322.62 T
0 F
( \050Monterey, California\051, pp. 3\32010.) 337.1 322.62 T
0.16 (Hughes, J., Randall, D. and Shapiro, D. \0501993\051. \322From Ethnographic Record to System Design: Some Experi-) 63.65 302.62 P
(ences from the Field\323, Computer Supported Cooperative Work, 1\0503\051, pp. 123\320141.) 63.65 289.62 T
-0.06 (Jeffay, K., Lin, J., Menges, J., Smith, F., and Smith, J. \0501992\051. \322The Architecture of the Artifact-Based Collab-) 63.65 269.62 P
0.91 (oration System\323, in) 63.65 256.62 P
3 F
0.91 (Proc. ACM Conference on Computer-Supported Cooperative Work CSCW\32592) 154.37 256.62 P
0 F
0.91 ( \050Toronto,) 504.14 256.62 P
(Canada\051, pp. 195\320202.) 63.65 243.62 T
1.6 (Kaiser, G. \0501994\051.) 63.65 223.62 P
1.6 (\322Cooperative Transactions for Multi-User Environments\323, in Won Kim \050ed.\051,) 150.92 223.62 P
3 F
1.6 (\322Modern) 508.71 223.62 P
(Database Management: The Object Model, Interoperability and Beyond\323) 63.65 210.62 T
0 F
(, ACM Press, New York.) 388.1 210.62 T
0.89 (Karsenty, A. and Beaudouin-Lafon, M. \0501993\051. \322An Algorithm for Distributed Groupware Applications\323, in) 63.65 190.62 P
3 F
(Proc. 13th International Conference on Distributed Computing Systems \050ICDCS\051) 63.65 177.62 T
0 F
(, pp. 195\320202.) 422.05 177.62 T
-0.05 (Khalidi, Y. and Nelson, M. \0501993\051.) 63.65 157.62 P
3 F
-0.05 (\322The Spring Virual Memory System\323) 220.69 157.62 P
0 F
-0.05 (, Technical Report SMLI TR-93-009,) 384.87 157.62 P
(Sun Microsystems Laboratories \050Mountain View, California\051.) 63.65 144.62 T
-0.35 (Kiczales, G. \0501992\051.) 63.65 124.62 P
3 F
-0.35 (\322Towards a New Model of Abstaction in Software Engineering\323) 154.23 124.62 P
0 F
-0.35 (, in Proc. IMSA\32592 Work-) 434.97 124.62 P
(shop on Reflection and Metalevel Architectures \050Tokyo, Japan\051, pp. 1\32011.) 63.65 111.62 T
(Kiczales, G. \0501996\051. \322Beyond the Black Box: Open Implementation\323, IEEE Software, January, pp. 8\32011.) 63.65 91.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 112
%%Page: "113" 113
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Collected References.) 461.45 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(113) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
-0.31 (Kiczales, G. and Rodriguez, L. \0501990\051. \322Efficient Method Dispatch in PCL\323, in) 45.65 737.62 P
3 F
-0.31 (Proc. ACM Conference on Lisp) 393.87 737.62 P
(and Functional Programming) 45.65 724.62 T
0 F
( \050Nice, France\051, pp. 99\320105.) 177.65 724.62 T
0.05 (Kiczales, G., des Rivi\217res, J., and Bobrow, D. \0501991\051. \322) 45.65 704.62 P
3 F
0.05 (The Art of the Metaobject Protocol) 290.49 704.62 P
0 F
0.05 (\323, MIT Press, Cam-) 445.04 704.62 P
(bridge, Mass.) 45.65 691.62 T
-0.17 (Kiczales, G., DeLine, R., Lea, A., and Maeda, C. \0501995\051. \322Open Implementations Analysis and Design\323 \050Tuto-) 45.65 671.62 P
0.74 (rial Notes\051) 45.65 658.62 P
3 F
0.74 (, Proc. ACM Conference on Object-Oriented Programming Systems, Languages and Applications) 93.13 658.62 P
(OOPSLA \32495) 45.65 645.62 T
0 F
( \050Austin, Texas\051.) 104 645.62 T
0.35 (Kiczales, G. and Paepcke, A. \050forthcoming\051.) 45.65 625.62 P
3 F
0.35 (\322Open Implementations and Metaobject Protocols\323) 246.01 625.62 P
0 F
0.35 (, MIT Press,) 476.56 625.62 P
(Cambridge, Mass.) 45.65 612.62 T
-0.21 (Lai, K.-Y. and Malone, T. \0501988\051. \322Object Lens: A Spreadsheet for Cooperative Work\323, in) 45.65 592.62 P
3 F
-0.21 (Proc. ACM Confer-) 445 592.62 P
(ence on Computer-Supported Cooperative Work CSCW\32588) 45.65 579.62 T
0 F
( \050Portland, Oregon\051, pp. 115\320124.) 305.64 579.62 T
-0.24 (Lamping, J., Kiczales, G., Rodriguez, L. and Ruf, E. \0501992\051. \322An Architecture for an Open Compiler\323, in) 45.65 559.62 P
3 F
-0.24 (Proc.) 507.51 559.62 P
(IMSA\32592 Workshop on Reflection and Metalevel Architectures) 45.65 546.62 T
0 F
( \050Tokyo, Japan\051, pp. 95\320106.) 321.21 546.62 T
0.28 (Lauwers, C., Joeseph, T., Lantz, K., and Romanow, A. \0501990\051. \322Replicated Architectures for Shared Window) 45.65 526.62 P
-0.18 (Systems: A Critique\323, in) 45.65 513.62 P
3 F
-0.18 (Proc. ACM Conference on Office Information Systems COIS \32490) 155.85 513.62 P
0 F
-0.18 ( \050Cambridge, Mass.\051,) 438.83 513.62 P
(pp. 249\320260.) 45.65 500.62 T
-0.41 (Lopes, C. \0501996\051. \322Adaptive Parameter Passing\323, in Proc. International Symposium on Object Technologies for) 45.65 480.62 P
(Advanced Software ISOTAS\32596 \050Japan\051.) 45.65 467.62 T
-0.31 (Mackay, W. \0501989\051. \322How Do Experienced Information Lens Users Use Rules?\323, in) 45.65 447.62 P
3 F
-0.31 (Proc. ACM Conference on) 415.26 447.62 P
(Human Factors in Computing Systems CHI\32589) 45.65 434.62 T
0 F
( \050Austin, Texas\051.) 251.89 434.62 T
0.82 (Mackay, W. \0501990\051. \322Patterns of Sharing Customisable Software\323, in) 45.65 414.62 P
3 F
0.82 (Proc. ACM Conference on Computer-) 360.65 414.62 P
(Supported Cooperative Work CSCW \32590) 45.65 401.62 T
0 F
( \050Los Angeles, California\051, pp. 209\320222.) 224.08 401.62 T
0.65 (Mackay, W. \0501991\051. \322Triggers and Barriers to Customising Software\323, in) 45.65 381.62 P
3 F
0.65 (Proc. ACM Conference on Human) 376.6 381.62 P
(Factors in Computer Systems CHI \32491) 45.65 368.62 T
0 F
( \050New Orleans, Louisiana\051, pp. 153\320160.) 214.61 368.62 T
0.37 (MacLean, A., Carter, K., Moran, T., and L\232vstrand, L. \0501990\051. \322User-Tailorable Systems: Pressing the Issues) 45.65 348.62 P
2.83 (with Buttons\323, in) 45.65 335.62 P
3 F
2.83 (Proc. ACM Conference on Human Factors in Computing Systems CHI \32490) 132.37 335.62 P
0 F
2.83 ( \050Seattle,) 489.71 335.62 P
(Washington\051.) 45.65 322.62 T
0.91 (McGuffin, L. and Olson, G. \0501992\051.) 45.65 302.62 P
3 F
0.91 (\322ShrEdit: A Shared Electronic Workspace\323) 211.5 302.62 P
0 F
0.91 (, CSMIL Technical Report,) 408.24 302.62 P
(Cognitive Science and Machine Intelligence Laboratory, University of Michigan.) 45.65 289.62 T
0.12 (Maeda, C. \0501996\051. \322A Metaobject Protocol for Accessing File Systems\323, in) 45.65 269.62 P
3 F
0.12 (Proc. International Symposium on) 379.73 269.62 P
(Object Technologies for Advanced Software ISOTAS\32596) 45.65 256.62 T
0 F
( \050Japan\051.) 292.82 256.62 T
-0.13 (Malone, T., Grant, K., Lai, K.-Y., Rao, R., and Rosenblitt, D. \0501987\051. \322Semi-Structured Messages Are Surpris-) 45.65 236.62 P
-0.09 (ingly Useful for Computer-Supported Coordination\323, ACM Transactions on Office Information Systems, 5\0502\051,) 45.65 223.62 P
(pp. 115\320131.) 45.65 210.62 T
-0.14 (Malone, T., Lai, K.-Y., and Fry, C. \0501995\051. \322Experiments with Oval: A Radically Tailorable Tool for Coopera-) 45.65 190.62 P
(tive Work\323, ACM Transactions on Information Systems, 13\0502\051, pp. 175\320205.) 45.65 177.62 T
0.08 (Maes, P. \0501987\051.) 45.65 157.62 P
3 F
0.08 (\322Computational Reflection\323) 121.64 157.62 P
0 F
0.08 (, Technical Report 87.2, Artificial Intelligence Laboratory, Vrije) 247.32 157.62 P
(Universiteit, Brussels.) 45.65 144.62 T
0.35 (Miller, D., Smith, J., and Muller, M. \0501992\051. \322TelePICTIVE: Computer-Supported Collaborative GUI Design) 45.65 124.62 P
-0.38 (for Designers with Diverse Experience\323, in) 45.65 111.62 P
3 F
-0.38 (Proc. ACM Symposium on User Interface Software and Technology) 236.15 111.62 P
(UIST\32592) 45.65 98.62 T
0 F
( \050Monterey, California\051, pp. 151\320160.) 83.53 98.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 113
%%Page: "114" 114
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Collected References) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(114) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
1.08 (Munson, J. and Dewan, P. \0501994\051. \322A Flexible Object Merging Framework\323, in) 63.65 737.62 P
3 F
1.08 (Proc. ACM Conference on) 429.11 737.62 P
(Computer-Supported Cooperative Work CSCW\32594) 63.65 724.62 T
0 F
( \050Chapel Hill, North Carolina\051, pp. 231\320242.) 286.99 724.62 T
0.38 (Myers, B. \0501990\051. \322A New Model for Handling Input\323, ACM Transactions on Information Systems, 8\0503\051, pp.) 63.65 704.62 P
(289\320320.) 63.65 691.62 T
0.09 (Myers, B., Guise, D., Dannenberg, R., Vander Zanden, B., Kosbie, D., Pervin, E, Mickish, A. and Marchal, P.) 63.65 671.62 P
0.21 (\0501990\051. \322Garnet: Comprehensive Support for Graphical, Highly-Interactive User Interfaces\323. IEEE Computer,) 63.65 658.62 P
(23\05011\051, pp. 71\32085.) 63.65 645.62 T
-0.14 (Nardi, B. \0501993\051.) 63.65 625.62 P
3 F
-0.14 (\322A Small Matter of Programming: Perspectives on End-User Computing\323) 141.44 625.62 P
0 F
-0.14 (, MIT Press, Cam-) 468.49 625.62 P
(bridge, Mass.) 63.65 612.62 T
-0.35 (Nardi, B. and Miller, J. \0501991\051. \322Twinkling Lights and Nested Loops: Distributed Problem Solving and Spread-) 63.65 592.62 P
4.47 (sheet Development\323, in Greenberg \050ed.\051,) 63.65 579.62 P
3 F
4.47 (\322Computer-Supported Cooperative Work and Groupware\323) 267.46 579.62 P
0 F
4.47 (,) 546.9 579.62 P
(Academic Press.) 63.65 566.62 T
-0.27 (Nelson, M., Khalidi, Y., and Madany, P. \0501992\051.) 63.65 546.62 P
3 F
-0.27 (\322The Spring File System\323) 277.48 546.62 P
0 F
-0.27 (, Technical Report SMLI TR-93-10,) 391.26 546.62 P
(Sun Microsystems Laboratories \050Mountain View, California\051.) 63.65 533.62 T
0.07 (Neuwirth, C., Kaufer, D., Chandhok, R., and Morris, J. \0501990\051. \322Issues in the Design of Computer Support for) 63.65 513.62 P
-0.18 (Co-authoring and Commenting\323, in) 63.65 500.62 P
3 F
-0.18 (Proc. ACM Conference on Computer-Supported Cooperative Work CSCW) 222.13 500.62 P
(\32490) 63.65 487.62 T
0 F
( \050Los Angeles, California\051, pp. 183\320196\051.) 78.31 487.62 T
-0.46 (Neuwirth, C., Chandhok, R., Kaufer, D., Erion, P., Morris, J., and Miller, D. \0501992\051. \322Flexible Diff-ing in a Col-) 63.65 467.62 P
0.17 (laborative Writing System\323, in) 63.65 454.62 P
3 F
0.17 (Proc. ACM Conference on Computer-Supported Cooperative Work CSCW \32492) 202.13 454.62 P
0 F
(\050Toronto, Canada\051, pp. 147\320154.) 63.65 441.62 T
-0.38 (Neuwirth, C., Kaufer, D., Chandok, R., and Morris, J. \0501994\051. \322Computer Support for Distributed Collaborative) 63.65 421.62 P
0.1 (Writing: Defining Parameters of Interaction\323, in) 63.65 408.62 P
3 F
0.1 (Proc. ACM Conference on Computer-Supported Cooperative) 279.04 408.62 P
(Work CSCW\32594) 63.65 395.62 T
0 F
(\050Chapel Hill, North Carolina\051, pp. 145\320152.) 136.97 395.62 T
-0.18 (Nichols, D., Curtis, P., Dixon, M., and Lamping, J. \0501995\051. \322High-Latency, Low-Bandwidth WIndowing in the) 63.65 375.62 P
-0.34 (Jupiter Collaboration System) 63.65 362.62 P
3 F
-0.34 (\323) 191.31 362.62 P
0 F
-0.34 (, in) 197.43 362.62 P
3 F
-0.34 (Proc. ACM Symposium on User Interface Software and Technology UIST\32595) 213.56 362.62 P
0 F
(\050Pittsburgh, Pennsylvania\051.) 63.65 349.62 T
0.56 (O\325Malley, S. and Peterson, L. \0501992\051. \322A Dynamic Network Architecture\323, ACM Transactions on Computer) 63.65 329.62 P
(Systems, 10\0502\051, pp. 110\320143.) 63.65 316.62 T
1.01 (Okamura, H. and Ishikawa, Y. \0501994\051. \322Object Location Control Using Meta-level Programming\323, in) 63.65 296.62 P
3 F
1.01 (Proc.) 525.51 296.62 P
(European Conference on Object-Oriented Programming ECOOP\32594) 63.65 283.62 T
0 F
( \050Bologna, Italy\051, pp. 299\320319.) 367.63 283.62 T
(Ousterhout, J. \0501994\051.) 63.65 263.62 T
3 F
(\322Tcl and the Tk Toolkit\323) 162.64 263.62 T
0 F
(, Addison-Wesley, Reading, Mass.) 272.04 263.62 T
-0.23 (Padget, J., Nuyens, G., and Bretthauer, H. \0501993\051. \322An Overview of EuLisp\323, Lisp and Symbolic Computation,) 63.65 243.62 P
(6\0501/2\051, pp. 9\32098.) 63.65 230.62 T
0.58 (Paepcke, A. \0501988\051. \322PCLOS: A Flexible Implementation of CLOS Persistence\323, in) 63.65 210.62 P
3 F
0.58 (Proc. European Confer-) 441.25 210.62 P
(ence on Object-Oriented Programming ECOOP\32588) 63.65 197.62 T
0 F
(.) 290.94 197.62 T
0.12 (Patterson, J. \0501991\051. \322Comparing the Programming Demands of Single-User and Multi-User Applications\323, in) 63.65 177.62 P
3 F
(Proc. ACM Conference on User Interface Software and Technology UIST \32491) 63.65 164.62 T
0 F
( \050Hilton Head, South Carolina\051.) 406.13 164.62 T
-0.17 (Patterson, J., Hill, R., Rohall, S., and Meeks, S. \0501990\051. \322Rendezvous: An Architecture for Synchronous Multi-) 63.65 144.62 P
1.66 (User Applications\323, in) 63.65 131.62 P
3 F
1.66 (Proc. ACM Conference on Computer-Supported Cooperative Work CSCW\32590) 170.05 131.62 P
0 F
1.66 ( \050Los) 525.08 131.62 P
(Angeles, California\051, pp. 317\320328.) 63.65 118.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 114
%%Page: "115" 115
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Collected References.) 461.45 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(115) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
0 11 Q
0 X
0.91 (Rao, R. \0501991\051. \322Implementational Reflection in Silica\323, in) 45.65 737.62 P
3 F
0.91 (Proc. European Conference on Object-Oriented) 315.69 737.62 P
(Programming ECOOP 91) 45.65 724.62 T
0 F
( \050Geneva, Switzerland\051.) 160.53 724.62 T
-0.51 (Rao, R. \0501993\051. \322The Silica Window System: The Metalevel Approach Applied More Widely\323, in Paepcke \050ed\051,) 45.65 704.62 P
3 F
(\322Object-Oriented Programming: The CLOS Perspective\323) 45.65 691.62 T
0 F
(, MIT Press, Cambridge, Mass.) 301.07 691.62 T
1.25 (Rashid, R., Tevanian, A., Young, M., Golub, D., Baron, R., Black, D., Bolosky, W., and Chew, J. \0501987\051.) 45.65 671.62 P
1.29 (\322) 45.65 658.62 P
1.29 (Machine-Independent V) 50.53 658.62 P
1.29 (irtual Memory Management for Paged Uniprocessor and Multiprocessor Architec-) 158.38 658.62 P
2.36 (tures) 45.65 645.62 P
2.36 (\323, in) 67.03 645.62 P
3 F
2.36 (Proc. ACM Conference on Architectural Support for Programming Languages and Operating) 93.44 645.62 P
(Systems) 45.65 632.62 T
0 F
( \050Palo Alto, California\051.) 80.47 632.62 T
0.55 (Rein, G. and Ellis, C. \0501991\051. \322rIBIS: A Real-Time Group Hypertext System\323,) 45.65 612.62 P
0.55 (Intl. Journal of Man-Machine) 399.87 612.62 P
(Studies, 34) 45.65 599.62 T
(, pp. 349\320367.) 94.54 599.62 T
0.54 (des Rivi\217res, J. and Smith, B.C. \0501984\051. \322The Implementation of Procedurally Reflective Languages\323, Xerox) 45.65 579.62 P
(PARC Technical Report ISL-4 \050Palo Alto, California\051.) 45.65 566.62 T
0.02 (Robinson, M. \0501993\051. \322Designing for Unanticipated Use...\323, in) 45.65 546.62 P
3 F
0.02 (Proc. European Conference on Computer-Sup-) 323.52 546.62 P
(ported Cooperative Work ECSCW\32593) 45.65 533.62 T
0 F
( \050Milano, Italy\051, pp. 187\320202.) 211.55 533.62 T
0.02 (Rodriguez, L. \0501992\051. \322A Study on the Viability of a Production-Quality Metaobject Protocol-Based Statically) 45.65 513.62 P
2.36 (Parallelizing Compiler\323) 45.65 500.62 P
3 F
2.36 (,) 152.8 500.62 P
0 F
2.36 (in) 160.65 500.62 P
3 F
2.36 ( Proc. IMSA\32592 Workshop on Reflection and Metalevel Architectures \050Tokyo,) 169.21 500.62 P
(Japan\051) 45.65 487.62 T
0 F
(, pp. 107\320112.) 76.19 487.62 T
0.02 (Roseman, M. and Greenberg, S. \0501992\051. \322GroupKit: A Groupware Toolkit for Building Real-Time Conferenc-) 45.65 467.62 P
0.3 (ing Applications\323, in) 45.65 454.62 P
3 F
0.3 (Proc. ACM Conference on Computer-Supported Cooperative Work CSCW\32592) 141.26 454.62 P
0 F
0.3 (\050Toronto,) 489.79 454.62 P
(Canada\051, pp. 43\32050.) 45.65 441.62 T
1.19 (Roseman, M. and Greenberg, S. \0501993\051. \322Building Flexible Groupware Through Open Protocols\323, in) 45.65 421.62 P
3 F
1.19 (Proc.) 507.51 421.62 P
(ACM Conference on Organisational Computing Systems COOCS\32593) 45.65 408.62 T
0 F
( \050Milpetas, California\051, pp. 279\320288.) 348.75 408.62 T
0.37 (Roseman, M. and Greenberg, S. \0501996\051. \322Building Real-Time Groupware with GroupKit, a Groupware Tool-) 45.65 388.62 P
(kit\323, ACM Transactions on Computer-Human Interaction, 3\0501\051, pp. 66\320106.) 45.65 375.62 T
-0.44 (Smith, B.C. \0501982\051.) 45.65 355.62 P
3 F
-0.44 (\322Reflection and Semantics in a Procedural Language\323) 133.85 355.62 P
0 F
-0.44 (, MIT Laboratory for Computer Sci-) 373.79 355.62 P
(ence Report MIT-TR-272 \050Cambridge, Mass.\051.) 45.65 342.62 T
0.11 (Smith, B.C. \0501984\051. \322Reflection and Semantics in Lisp\323, in) 45.65 322.62 P
3 F
0.11 (Proc. ACM Symposium on Principles of Program-) 308.84 322.62 P
(ming Languages) 45.65 309.62 T
0 F
( \050Salt Lake City, Utah\051 pp. 23\32035.) 118.68 309.62 T
-0.06 (Steele, G. and Sussman., G. \0501978\051.) 45.65 289.62 P
3 F
-0.06 (\322The Art of the Interpreter, or, The Modularity Complex \050Parts Zero, One) 205.38 289.62 P
(and Two\051\323) 45.65 276.62 T
0 F
(, AI Memo No. 453, MIT Artificial Intelligence Laboratory \050Cambridge, Mass.\051.) 93.63 276.62 T
(Steele, G. \0501984\051.) 45.65 256.62 T
3 F
(\322Common Lisp: The Language) 126.3 256.62 T
0 F
(\323 \050first edition\051, Digital Press, 1984.) 263.5 256.62 T
-0.1 (Stefik, M., Foster, G., Bobrow, D., Kahn, K., Lanning, S., and Suchman, L. \0501987a\051. \322Beyond the Chalkboard:) 45.65 236.62 P
(Computer Support for Collaboration and Problem-Solving in Meetings\323, Communications of the ACM, 30\0501\051.) 45.65 223.62 T
0.63 (Stefik, M., Bobrow, D., Foster, G., Lanning, S., and Tatar, D. \0501987b\051. \322WYSIWIS Revisited: Early Experi-) 45.65 203.62 P
(ences with Multiuser Interfaces\323, ACM Transactions on Office Information Systems, 5, pp. 147\320186.) 45.65 190.62 T
-0.1 (Streitz, N., Haake, J., Hannemann, J., Lemke, A., Sch\237tt, W., and Th\237ring, M. \0501992\051. \322SEPIA: A Cooperative) 45.65 170.62 P
0.25 (Hypermedia Authoring Environment\323, in) 45.65 157.62 P
3 F
0.25 (Proc. ACM European Conference on Hypertext ECHT \32492) 230.87 157.62 P
0 F
0.25 ( \050Milano,) 490.46 157.62 P
(Italy\051.) 45.65 144.62 T
0.17 (Streitz, N., Gissler, J., Haake, J., and Hol, J. \0501994\051. \322DOLPIN: Integrated Meeting Support Across Local and) 45.65 124.62 P
-0.23 (Remote Desktop Environments and Liveboards\323, in) 45.65 111.62 P
3 F
-0.23 (Proc. ACM Conference on Computer-Supported Coopera-) 274.94 111.62 P
(tive Work CSCW\32594) 45.65 98.62 T
0 F
( \050Chapel Hill, North Carolina\051, pp. 345\320358.) 134.86 98.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 115
%%Page: "116" 116
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Collected References) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(116) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
0 11 Q
0 X
-0.08 (Stroud, R. and Wu, Z. \0501995\051. \322Using Metaobject Protocols to Implement Atomic Data Types\323, in) 63.65 737.62 P
3 F
-0.08 ( Proc. Euro-) 494.51 737.62 P
(pean Conference on Object-Oriented Programming ECOOP\32595) 63.65 724.62 T
0 F
( \050Aarhus, Denmark\051.) 345.63 724.62 T
-0.29 (Suchman, L. \0501983\051. \322Office Procedures as Practical Action: Models of work and system design\323, ACM Trans-) 63.65 704.62 P
(actions on Office Information Systems, 1, pp. 320\320328.) 63.65 691.62 T
1.14 (Suchman, L. \0501987\051.) 63.65 671.62 P
3 F
1.14 (\322Plans and Situated Actions: The problem of human-machine communication\323) 160.55 671.62 P
0 F
1.14 (, Cam-) 518.57 671.62 P
(bridge University Press, Cambridge, UK, 1987.) 63.65 658.62 T
-0.15 (Suchman, L. \0501993\051. \322Technologies of Accountability: Of Lizards and Aeroplanes\323, in Button \050ed.\051,) 63.65 638.62 P
3 F
-0.15 (\322Technol-) 504.43 638.62 P
(ogy in Working Order: Studies of Work, Interaction and Technology\323) 63.65 625.62 T
0 F
(, pp. 113\320126, Routledge, London.) 371.01 625.62 T
-0.17 (Suchman, L. \0501994\051. \322Do Categories have Politics? The language/action perspective reconsidered\323, Computer-) 63.65 605.62 P
(Supported Cooperative Work, 2\0503\051, pp. 177\320190.) 63.65 592.62 T
-0.39 (Tatar, D., Foster, G., and Bobrow, D. \0501991\051. \322Designing for Conversation: Lessons from Cognoter\323, Intl. Jour-) 63.65 572.62 P
(nal of Man-Machine Studies, 34, pp 185\320209.) 63.65 559.62 T
-0.19 (Terry, D., Demers, A., Petersen, K., Spreitzer, M., Theimer, M. and Welch, B. \0501994\051. \322Session Guarantees for) 63.65 539.62 P
0.22 (Weakly Consistent Replicated Data\323, in) 63.65 526.62 P
3 F
0.22 (Proc. International Conference on Parallel and Distributed Informa-) 243.17 526.62 P
(tion Systems) 63.65 513.62 T
0 F
( \050Austin, Texas\051.) 118.34 513.62 T
-0.35 (Trevor, J., Rodden, T., and Mariani, J. \0501994\051.) 63.65 493.62 P
3 F
-0.35 (\322) 267.1 493.62 P
0 F
-0.35 (The Use of Adapters to Support Cooperative Sharing\323, in) 273.22 493.62 P
3 F
-0.35 (Proc.) 525.51 493.62 P
-0.62 (ACM Conference on Computer-Supported Cooperative Work CSCW\32594) 63.65 480.62 P
0 F
-0.62 ( \050Chapel Hill, North Carolina\051, pp. 219\320) 376.46 480.62 P
(230.) 63.65 467.62 T
-0.62 (Trevor, J., Rodden, T., and Blair, G. \0501995\051. \322COLA: A Lightweight Platform for CSCW\323, Computer Supported) 63.65 447.62 P
(Cooperative Work, 3, pp. 197\320224.) 63.65 434.62 T
0.73 (Trigg, R., Moran, T., and Halasz, F. \0501987\051. \322Adaptability and Tailorability in NoteCards\323, in Bullinger and) 63.65 414.62 P
(Shackel \050Eds.\051) 63.65 401.62 T
3 F
(Proc. INTERACT \32487) 130.55 401.62 T
0 F
(, North-Holland, 1987.) 225.58 401.62 T
0.87 (Winograd, T. \0501986\051. \322A Language/Action Perspective on the Design of Cooperative Work\323, in) 63.65 381.62 P
3 F
0.87 (Proc. ACM) 498.67 381.62 P
(Conference on Computer-Supported Cooperative Work CSCW \32486) 63.65 368.62 T
0 F
( \050Austin, Texas\051.) 356.95 368.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 116
%%Page: "117" 117
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples.) 387.22 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(117) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
2 22 Q
0 X
(Appendix A:) 45.65 674.29 T
(Code of Application Examples) 45.65 646.29 T
0 11 Q
(This appendix presents the code of the example applications described and discussed in Chapter 7.) 45.65 554.42 T
2 14 Q
(1  Eureka) 45.65 527.42 T
2 12 Q
(1.1  eureka.lisp) 45.65 502.75 T
6 9 Q
(1) 45.65 485.75 T
(\050unless \050find-package \322EUREKA\323\051) 65.49 485.75 T
(2) 45.65 474.75 T
(   \050make-package \322EUREKA\323 :use \324\050\322LISP\323 \322KR\323 \322PROSPERO\323 \322PCL\323\051\051\051) 65.49 474.75 T
(3) 45.65 463.75 T
(\050in-package \322EUREKA\323\051) 65.49 463.75 T
(4) 45.65 452.75 T
(5) 45.65 441.75 T
(;;;) 65.49 441.75 T
(6) 45.65 430.75 T
(;;; Eureka \050because \322it\325s so simple\323\051.) 65.49 430.75 T
(7) 45.65 419.75 T
(;;; eureka.lisp) 65.49 419.75 T
(8) 45.65 408.75 T
(;;;) 65.49 408.75 T
(9) 45.65 397.75 T
(10) 45.65 386.75 T
(;;;) 65.49 386.75 T
(11) 45.65 375.75 T
(;;; set up property definitions as subclasses of <action>.) 65.49 375.75 T
(12) 45.65 364.75 T
(;;;) 65.49 364.75 T
(13) 45.65 353.75 T
(14) 45.65 342.75 T
(\050defclass <object-create-action> \050<action>\051) 65.49 342.75 T
(15) 45.65 331.75 T
(  \050\050name :initarg :name :accessor create-object-name\051) 65.49 331.75 T
(16) 45.65 320.75 T
(   \050points :initarg :points :accessor create-object-points\051\051\051) 65.49 320.75 T
(17) 45.65 309.75 T
(18) 45.65 298.75 T
(\050defclass <object-edit-action> \050<action>\051) 65.49 298.75 T
(19) 45.65 287.75 T
(  \050\050action :initarg :action :accessor edit-action-action\051) 65.49 287.75 T
(20) 45.65 276.75 T
(   \050object-name :initarg :name :accessor edit-action-object-name\051\051\051) 65.49 276.75 T
(21) 45.65 265.75 T
(22) 45.65 254.75 T
(\050defclass <object-move-action> \050<action>\051) 65.49 254.75 T
(23) 45.65 243.75 T
(  \050\050points :initarg :points\051) 65.49 243.75 T
(24) 45.65 232.75 T
(   \050object :initarg :object\051\051\051) 65.49 232.75 T
(25) 45.65 221.75 T
(26) 45.65 210.75 T
(27) 45.65 199.75 T
(;;;) 65.49 199.75 T
(28) 45.65 188.75 T
(;;; wrapper to create command objects based on UI information. these) 65.49 188.75 T
(29) 45.65 177.75 T
(;;; are called from the glue functions, and then the command objects) 65.49 177.75 T
(30) 45.65 166.75 T
(;;; are added to streams.) 65.49 166.75 T
(31) 45.65 155.75 T
(;;;) 65.49 155.75 T
(32) 45.65 144.75 T
(33) 45.65 133.75 T
(\050defun object-create-object \050name points\051) 65.49 133.75 T
(34) 45.65 122.75 T
(  \050make-instance \324<object-create-action> :name name :points points\051\051) 65.49 122.75 T
(35) 45.65 111.75 T
(36) 45.65 100.75 T
(\050defun object-delete-object \050obj-name\051) 65.49 100.75 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 117
%%Page: "118" 118
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(118) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
6 9 Q
0 X
(37) 63.65 738.95 T
(  \050make-instance \324<object-edit-action> :action :delete) 83.49 738.95 T
(38) 63.65 727.95 T
(:name obj-name\051\051) 175.29 727.95 T
(39) 63.65 716.95 T
(40) 63.65 705.95 T
(\050defun object-move-object \050obj\051) 83.49 705.95 T
(41) 63.65 694.95 T
(  \050make-instance \324<object-move-action>) 83.49 694.95 T
(42) 63.65 683.95 T
(:points \050gob-points obj\051 :object obj\051\051) 175.29 683.95 T
(43) 63.65 672.95 T
(44) 63.65 661.95 T
(45) 63.65 650.95 T
(;;;) 83.49 650.95 T
(46) 63.65 639.95 T
(;;; set up local and remote streams.) 83.49 639.95 T
(47) 63.65 628.95 T
(;;;) 83.49 628.95 T
(48) 63.65 617.95 T
(49) 63.65 606.95 T
(\050defvar *local-stream*\051) 83.49 606.95 T
(50) 63.65 595.95 T
(51) 63.65 584.95 T
(\050defun start-local-stream \050\051) 83.49 584.95 T
(52) 63.65 573.95 T
(  \050setq *local-stream*) 83.49 573.95 T
(53) 63.65 562.95 T
(        \050make-instance \324<bounded-stream> :name \322NAME FOO\323) 83.49 562.95 T
(54) 63.65 551.95 T
(:host \322HOST FOO\323\051\051\051) 304.89 551.95 T
(55) 63.65 540.95 T
(56) 63.65 529.95 T
(\050defun connect-remote-stream \050host local-stream\051) 83.49 529.95 T
(57) 63.65 518.95 T
(  \050let \050\050rs \050make-instance \324<remote-stream> :name \322REMOTE FOO\323) 83.49 518.95 T
(58) 63.65 507.95 T
(:host host\051\051\051) 321.09 507.95 T
(59) 63.65 496.95 T
(    \050push rs \050stream-peers local-stream\051\051\051\051) 83.49 496.95 T
(60) 63.65 485.95 T
(61) 63.65 474.95 T
(\050defun start-streams \050remote-host\051) 83.49 474.95 T
(62) 63.65 463.95 T
(  \050connect-remote-stream remote-host \050start-local-stream\051\051\051) 83.49 463.95 T
(63) 63.65 452.95 T
(64) 63.65 441.95 T
(;;; need to find other streams. get a clue from the init fn) 83.49 441.95 T
(65) 63.65 430.95 T
(;;; just one for the nonce) 83.49 430.95 T
(66) 63.65 419.95 T
(\050defun setup-streams \050host\051) 83.49 419.95 T
(67) 63.65 408.95 T
(  \050let \050\050rs \050create-instance \324<remote-stream> :name \322FOO TEMP NAME\323) 83.49 408.95 T
(68) 63.65 397.95 T
(                             :host host\051\051\051) 83.49 397.95 T
(69) 63.65 386.95 T
(    \050push \050stream-peers *local-stream* rs\051\051\051\051) 83.49 386.95 T
(70) 63.65 375.95 T
(71) 63.65 364.95 T
(72) 63.65 353.95 T
(;;;) 83.49 353.95 T
(73) 63.65 342.95 T
(;;; handle the remote execution of command objects. these functions) 83.49 342.95 T
(74) 63.65 331.95 T
(;;; basically just associate command object classes with the ui) 83.49 331.95 T
(75) 63.65 320.95 T
(;;; functions which perform them.) 83.49 320.95 T
(76) 63.65 309.95 T
(;;;) 83.49 309.95 T
(77) 63.65 298.95 T
(78) 63.65 287.95 T
(\050defmethod locally-perform-action \050\050action <object-create-action>\051\051) 83.49 287.95 T
(79) 63.65 276.95 T
(  \050ui-add-polyline-from-create-obj action\051) 83.49 276.95 T
(80) 63.65 265.95 T
(  \050opal:update window\051\051) 83.49 265.95 T
(81) 63.65 254.95 T
(82) 63.65 243.95 T
(\050defmethod locally-perform-action \050\050action <object-edit-action>\051\051) 83.49 243.95 T
(83) 63.65 232.95 T
(\050ui-delete-polyline-from-edit-obj action\051) 94.29 232.95 T
(84) 63.65 221.95 T
(  \050opal:update window\051\051) 83.49 221.95 T
2 12 Q
(1.2  ui.lisp) 63.65 199.95 T
6 9 Q
(1) 63.65 182.95 T
(\050unless \050find-package \322EUREKA\323\051) 83.49 182.95 T
(2) 63.65 171.95 T
(   \050make-package \322EUREKA\323 :use \324\050\322LISP\323 \322KR\323 \322PROSPERO\323 \322PCL\323\051\051\051) 83.49 171.95 T
(3) 63.65 160.95 T
(\050in-package \322EUREKA\323\051) 83.49 160.95 T
(4) 63.65 149.95 T
(5) 63.65 138.95 T
(;;;) 83.49 138.95 T
(6) 63.65 127.95 T
(;;; Eureka \050because \322it\325s so simple\323\051.) 83.49 127.95 T
(7) 63.65 116.95 T
(;;; ui.lisp) 83.49 116.95 T
(8) 63.65 105.95 T
(;;;) 83.49 105.95 T
(9) 63.65 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 118
%%Page: "119" 119
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples.) 387.22 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(119) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
6 9 Q
0 X
(10) 45.65 738.95 T
(\050load \050merge-pathnames \322polyline-creator-loader\323) 65.49 738.95 T
(11) 45.65 727.95 T
(                       user::garnet-gadgets-pathname\051 :verbose t\051) 65.49 727.95 T
(12) 45.65 716.95 T
(13) 45.65 705.95 T
(;;;) 65.49 705.95 T
(14) 45.65 694.95 T
(;;; start-ui initialises the ui and sets up three interactors.) 65.49 694.95 T
(15) 45.65 683.95 T
(;;; poly-inter creates new polylines; quit-inter looks for) 65.49 683.95 T
(16) 45.65 672.95 T
(;;; keypresses to quit the ui; and delete-inter watches for object) 65.49 672.95 T
(17) 45.65 661.95 T
(;;; deletions.) 65.49 661.95 T
(18) 45.65 650.95 T
(\050defun start-ui \050\051) 65.49 650.95 T
(19) 45.65 639.95 T
(  ;;\050setq *lush-activity-record* nil\051) 65.49 639.95 T
(20) 45.65 628.95 T
(  \050create-instance \324window inter:interactor-window) 65.49 628.95 T
(21) 45.65 617.95 T
(                   \050:title \322Eureka\323\051\051) 65.49 617.95 T
(22) 45.65 606.95 T
(\050create-instance \324strokes-agg opal:aggregate\051) 76.49 606.95 T
(23) 45.65 595.95 T
(  \050s-value window :aggregate strokes-agg\051) 65.49 595.95 T
(24) 45.65 584.95 T
(25) 45.65 573.95 T
(  \050create-instance \324poly-inter garnet-gadgets:polyline-creator) 65.49 573.95 T
(26) 45.65 562.95 T
(         \050:start-event :leftdown\051) 65.49 562.95 T
(27) 45.65 551.95 T
(         \050:start-where `\050:in ,window\051\051) 65.49 551.95 T
(28) 45.65 540.95 T
(         \050:input-filter nil\051) 65.49 540.95 T
(29) 45.65 529.95 T
(         \050:selection-function #\325add-polyline\051) 65.49 529.95 T
(30) 45.65 518.95 T
(         \050:running-where t\051\051) 65.49 518.95 T
(31) 45.65 507.95 T
(32) 45.65 496.95 T
(  \050create-instance \324quit-inter inter:text-interactor) 65.49 496.95 T
(33) 45.65 485.95 T
(         \050:window window\051) 65.49 485.95 T
(34) 45.65 474.95 T
(         \050:continuous nil\051) 65.49 474.95 T
(35) 45.65 463.95 T
(         \050:start-where t\051) 65.49 463.95 T
(36) 45.65 452.95 T
(         \050:start-event \324\050:any-keyboard :except #\134delete\051\051) 65.49 452.95 T
(37) 45.65 441.95 T
(         \050:final-function #\325stop-ui\051\051) 65.49 441.95 T
(38) 45.65 430.95 T
(39) 45.65 419.95 T
(\050create-instance \324delete-inter inter:text-interactor) 76.29 419.95 T
(40) 45.65 408.95 T
(        \050:window window\051) 65.49 408.95 T
(41) 45.65 397.95 T
(        \050:continuous nil\051) 65.49 397.95 T
(42) 45.65 386.95 T
(        \050:start-where `\050:leaf-element-of ,strokes-agg\051\051) 65.49 386.95 T
(43) 45.65 375.95 T
(        \050:start-event #\134delete\051) 65.49 375.95 T
(44) 45.65 364.95 T
(        \050:final-function #\325delete-polyline\051\051) 65.49 364.95 T
(45) 45.65 353.95 T
(46) 45.65 342.95 T
(  \050opal:add-component strokes-agg poly-inter\051) 65.49 342.95 T
(47) 45.65 331.95 T
(48) 45.65 320.95 T
(  \050opal:update window\051\051) 65.49 320.95 T
(49) 45.65 309.95 T
(50) 45.65 298.95 T
(\050defun stop-ui \050inter obj event string x y\051) 65.49 298.95 T
(51) 45.65 287.95 T
(  \050declare \050ignore inter obj event string x y\051\051) 65.49 287.95 T
(52) 45.65 276.95 T
(  \050opal:destroy window\051\051) 65.49 276.95 T
(53) 45.65 265.95 T
(54) 45.65 254.95 T
(55) 45.65 243.95 T
(;;;) 65.49 243.95 T
(56) 45.65 232.95 T
(;;; glue functions) 65.49 232.95 T
(57) 45.65 221.95 T
(;;;) 65.49 221.95 T
(58) 45.65 210.95 T
(;;; we need to relate the user interface to the prospero side. so,) 65.49 210.95 T
(59) 45.65 199.95 T
(;;; we produce glue functions for each of the interactors, which causes) 65.49 199.95 T
(60) 45.65 188.95 T
(;;; the appropriate prospero behaviour to happen, usually the creation) 65.49 188.95 T
(61) 45.65 177.95 T
(;;; of a new command object. we also have another function which will) 65.49 177.95 T
(62) 45.65 166.95 T
(;;; take the command object and produce the appropriate user interface) 65.49 166.95 T
(63) 45.65 155.95 T
(;;; behaviour. these are going to be linked by locally-perform-action.) 65.49 155.95 T
(64) 45.65 144.95 T
(;;;) 65.49 144.95 T
(65) 45.65 133.95 T
(66) 45.65 122.95 T
(\050defun add-polyline \050gadget points\051) 65.49 122.95 T
(67) 45.65 111.95 T
(  \050declare \050ignore gadget\051\051) 65.49 111.95 T
(68) 45.65 100.95 T
(  \050let* \050\050new-name \050gentemp \322EUREKA\323\051\051) 65.49 100.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 119
%%Page: "120" 120
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(120) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
6 9 Q
0 X
(69) 63.65 738.95 T
(         \050cmd-obj \050object-create-object new-name points\051\051\051) 83.49 738.95 T
(70) 63.65 727.95 T
(    \050add-action-to-stream cmd-obj *local-stream*\051\051\051) 83.49 727.95 T
(71) 63.65 716.95 T
(72) 63.65 705.95 T
(\050defun ui-add-polyline-from-create-obj \050create-obj\051) 83.49 705.95 T
(73) 63.65 694.95 T
(  \050let \050\050new-polyline \050create-instance) 83.49 694.95 T
(74) 63.65 683.95 T
(                       \050create-object-name create-obj\051) 83.49 683.95 T
(75) 63.65 672.95 T
(                       opal:polyline) 83.49 672.95 T
(76) 63.65 661.95 T
(                       \050:point-list) 83.49 661.95 T
(77) 63.65 650.95 T
(                        \050copy-list \050create-object-points create-obj\051\051\051\051\051\051) 83.49 650.95 T
(78) 63.65 639.95 T
(\050opal:add-component strokes-agg new-polyline\051\051\051) 83.49 639.95 T
(79) 63.65 628.95 T
(80) 63.65 617.95 T
(81) 63.65 606.95 T
(\050defun delete-polyline \050inter obj event string x y\051) 83.49 606.95 T
(82) 63.65 595.95 T
(  \050declare \050ignore inter obj event string\051\051) 83.49 595.95 T
(83) 63.65 584.95 T
(  \050let \050\050line \050opal:point-to-component strokes-agg x y\051\051\051) 83.49 584.95 T
(84) 63.65 573.95 T
(    \050when line) 83.49 573.95 T
(85) 63.65 562.95 T
(          \050let \050\050cmd-obj \050object-delete-object \050name-for-schema line\051\051\051\051) 83.49 562.95 T
(86) 63.65 551.95 T
(            \050add-action-to-stream cmd-obj *local-stream*\051\051\051\051\051) 83.49 551.95 T
(87) 63.65 540.95 T
(88) 63.65 529.95 T
(\050defun ui-delete-polyline-from-edit-obj \050edit-obj\051) 83.49 529.95 T
(89) 63.65 518.95 T
(  \050let \050\050polyline \050symbol-value \050intern \050edit-action-object-name) 83.49 518.95 T
(90) 63.65 507.95 T
(edit-obj\051\051\051\051\051) 315.69 507.95 T
(91) 63.65 496.95 T
(    \050opal:remove-component strokes-agg polyline\051\051\051) 83.49 496.95 T
(92) 63.65 485.95 T
2 14 Q
(2  Bugspray) 63.65 443.62 T
2 12 Q
(2.1  bugs.lisp) 63.65 418.95 T
6 9 Q
(1) 63.65 401.95 T
(\050unless \050find-package \322BUGS\323\051) 83.49 401.95 T
(2) 63.65 390.95 T
(  \050make-package \322BUGS\323 :use \324\050\322LISP\323 \322PCL\323 \322KR\323 \322PROSPERO\323\051\051\051) 83.49 390.95 T
(3) 63.65 379.95 T
(\050in-package \322BUGS\323\051) 83.49 379.95 T
(4) 63.65 368.95 T
(5) 63.65 357.95 T
(;;;) 83.49 357.95 T
(6) 63.65 346.95 T
(;;; bugspray -- multi-user bug-tracking database) 83.49 346.95 T
(7) 63.65 335.95 T
(;;;) 83.49 335.95 T
(8) 63.65 324.95 T
(9) 63.65 313.95 T
(;;;) 83.49 313.95 T
(10) 63.65 302.95 T
(;;; class definitions for the various entry types.) 83.49 302.95 T
(11) 63.65 291.95 T
(;;;) 83.49 291.95 T
(12) 63.65 280.95 T
(\050defclass <bugs-record> \050\051) 83.49 280.95 T
(13) 63.65 269.95 T
(  \050\050author :initform \050getenv \322USER\323\051 :accessor record-author\051) 83.49 269.95 T
(14) 63.65 258.95 T
(   \050entry-slots :accessor entry-slots\051) 83.49 258.95 T
(15) 63.65 247.95 T
(   \050id :initform \050generate-id\051 :initarg :id :accessor record-id\051\051\051) 83.49 247.95 T
(16) 63.65 236.95 T
(17) 63.65 225.95 T
(\050defclass <bug> \050<bugs-record>\051) 83.49 225.95 T
(18) 63.65 214.95 T
(  \050\050symptoms :initform \322\322 :initarg :symptoms :accessor bug-symptoms\051) 83.49 214.95 T
(19) 63.65 203.95 T
(   \050hypothesis :initform \322\322 :initarg :hypothesis :accessor bug-hypothesis\051) 83.49 203.95 T
(20) 63.65 192.95 T
(   \050problems :initform nil :initarg :problems :accessor bug-problems\051) 83.49 192.95 T
(21) 63.65 181.95 T
(   \050entry-slots :initform \324\050symptoms hypothesis\051\051\051\051) 83.49 181.95 T
(22) 63.65 170.95 T
(23) 63.65 159.95 T
(\050defclass <problem> \050<bugs-record>\051) 83.49 159.95 T
(24) 63.65 148.95 T
(  \050\050symptoms :initform \322\322 :initarg :symptoms :accessor problem-symptoms\051) 83.49 148.95 T
(25) 63.65 137.95 T
(   \050customer :initform \322\322 :initarg :customer :accessor problem-customer\051) 83.49 137.95 T
(26) 63.65 126.95 T
(   \050contact :initform \322\322 :initarg :contact :accessor problem-contact\051) 83.49 126.95 T
(27) 63.65 115.95 T
(   \050platform :initform\323\323 :initarg :platform :accessor problem-platform\051) 83.49 115.95 T
(28) 63.65 104.95 T
(   \050comments :initform nil :accessor problem-comments\051) 83.49 104.95 T
(29) 63.65 93.95 T
(   \050date :initform \322\322 :initarg :date :accessor problem-date\051) 83.49 93.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 120
%%Page: "121" 121
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples.) 387.22 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(121) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
6 9 Q
0 X
(30) 45.65 738.95 T
(   \050entry-slots :initform \324\050symptoms customer contact platform\051\051\051\051) 65.49 738.95 T
(31) 45.65 727.95 T
(32) 45.65 716.95 T
(\050defclass <comment> \050<bugs-record>\051) 65.49 716.95 T
(33) 45.65 705.95 T
(  \050\050text :initform \322\322 :initarg :text :accessor comment-text\051) 65.49 705.95 T
(34) 45.65 694.95 T
(   \050entry-slots :initform \324\050text\051\051\051\051) 65.49 694.95 T
(35) 45.65 683.95 T
(36) 45.65 672.95 T
(\050defclass <solution> \050<bugs-record>\051) 65.49 672.95 T
(37) 45.65 661.95 T
(  \050\051\051) 65.49 661.95 T
(38) 45.65 650.95 T
(39) 45.65 639.95 T
(\050defclass <fix> \050<solution>\051) 65.49 639.95 T
(40) 45.65 628.95 T
(  \050\050platform :initform \322\322 :initarg :platform :accessor fix-platform\051) 65.49 628.95 T
(41) 45.65 617.95 T
(   \050reference :initform \322\322 :initarg :reference :accessor fix-reference\051) 65.49 617.95 T
(42) 45.65 606.95 T
(   \050entry-slots :initform \324\050platform reference\051\051\051\051) 65.49 606.95 T
(43) 45.65 595.95 T
(44) 45.65 584.95 T
(\050defclass <workaround> \050<solution>\051) 65.49 584.95 T
(45) 45.65 573.95 T
(  \050\050platform :initform \322\322 :initarg :platform :accessor workaround-platform\051) 65.49 573.95 T
(46) 45.65 562.95 T
(   \050text :initform \322\322 :initarg :text :accessor workaround-text\051) 65.49 562.95 T
(47) 45.65 551.95 T
(   \050entry-slots :initform \324\050platform text\051\051\051\051) 65.49 551.95 T
(48) 45.65 540.95 T
(49) 45.65 529.95 T
(50) 45.65 518.95 T
(;;;) 65.49 518.95 T
(51) 45.65 507.95 T
(;;; first, methods for creating and updating records.) 65.49 507.95 T
(52) 45.65 496.95 T
(;;;) 65.49 496.95 T
(53) 45.65 485.95 T
(54) 45.65 474.95 T
(\050defmethod initialize-instance :after \050\050record <bugs-record>\051 &rest initargs\051) 65.49 474.95 T
(55) 45.65 463.95 T
(  \050declare \050ignore initargs\051\051) 65.49 463.95 T
(56) 45.65 452.95 T
(  \050new-record record\051\051) 65.49 452.95 T
(57) 45.65 441.95 T
(58) 45.65 430.95 T
(\050defmethod new-record \050\050record <bugs-record>\051\051) 65.49 430.95 T
(59) 45.65 419.95 T
(  \050record-object record\051\051) 65.49 419.95 T
(60) 45.65 408.95 T
(61) 45.65 397.95 T
(\050defmethod update-record-slots \050\050record <bugs-record>\051 slot-value-list\051) 65.49 397.95 T
(62) 45.65 386.95 T
(  \050dolist \050slot-value slot-value-list\051) 65.49 386.95 T
(63) 45.65 375.95 T
(  \050let \050\050slot \050intern \050car slot-value\051\051\051) 117.65 375.95 T
(64) 45.65 364.95 T
(\050value \050cadr slot-value\051\051\051) 189.65 364.95 T
(65) 45.65 353.95 T
(    \050setf \050slot-value record slot\051 value\051\051\051\051) 117.65 353.95 T
(66) 45.65 342.95 T
(67) 45.65 331.95 T
(68) 45.65 320.95 T
(;;;) 65.49 320.95 T
(69) 45.65 309.95 T
(;;; second, methods for linking various sorts of records.) 65.49 309.95 T
(70) 45.65 298.95 T
(;;;) 65.49 298.95 T
(71) 45.65 287.95 T
(72) 45.65 276.95 T
(\050defmethod add-link \050\050problem <problem>\051 \050comment <comment>\051\051) 65.49 276.95 T
(73) 45.65 265.95 T
(  \050setf \050problem-comments problem\051 \050append \050problem-comments problem\051) 65.49 265.95 T
(74) 45.65 254.95 T
(   \050list \050record-id) 405.65 254.95 T
(comment\051\051\051\051\051) 45.65 244.95 T
(75) 45.65 233.95 T
(76) 45.65 222.95 T
(\050defmethod add-link \050\050bug <bug>\051 \050problem <problem>\051\051) 65.49 222.95 T
(77) 45.65 211.95 T
(  \050setf \050bug-problems bug\051 \050append \050bug-problems bug\051) 65.49 211.95 T
(78) 45.65 200.95 T
(   \050list \050record-id problem\051\051\051\051\051) 333.65 200.95 T
(79) 45.65 189.95 T
(80) 45.65 178.95 T
(81) 45.65 167.95 T
(;;;) 65.49 167.95 T
(82) 45.65 156.95 T
(;;; the mapping betweeen record objects and ids is made using a) 65.49 156.95 T
(83) 45.65 145.95 T
(;;; hash-table which operates either as the database or as a cache) 65.49 145.95 T
(84) 45.65 134.95 T
(;;; \050depending\051.) 65.49 134.95 T
(85) 45.65 123.95 T
(;;;) 65.49 123.95 T
(86) 45.65 112.95 T
(87) 45.65 101.95 T
(\050defvar *record-table* \050make-hash-table\051\051) 65.49 101.95 T
(88) 45.65 90.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 121
%%Page: "122" 122
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(122) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
6 9 Q
0 X
(89) 63.65 738.95 T
(\050defun id-to-object \050id\051) 83.49 738.95 T
(90) 63.65 727.95 T
(  \050gethash id *record-table*\051\051) 83.49 727.95 T
(91) 63.65 716.95 T
(92) 63.65 705.95 T
(\050defun record-object \050object\051) 83.49 705.95 T
(93) 63.65 694.95 T
(  \050let \050\050id \050record-id object\051\051\051) 83.49 694.95 T
(94) 63.65 683.95 T
(    \050setf \050gethash id *record-table*\051 object\051\051\051) 83.49 683.95 T
(95) 63.65 672.95 T
(96) 63.65 661.95 T
2 12 Q
(2.2  ui.lisp) 63.65 639.95 T
6 9 Q
(1) 63.65 622.95 T
(\050unless \050find-package \322BUGS\323\051) 83.49 622.95 T
(2) 63.65 611.95 T
(  \050make-package \322BUGS\323 :use \324\050\322LISP\323 \322PCL\323 \322KR\323 \322PROSPERO\323\051\051\051) 83.49 611.95 T
(3) 63.65 600.95 T
(\050in-package \322BUGS\323\051) 83.49 600.95 T
(4) 63.65 589.95 T
(5) 63.65 578.95 T
(\050load \050merge-pathnames \322motif-prop-sheet-win-loader\323) 83.49 578.95 T
(6) 63.65 567.95 T
(       user::garnet-gadgets-pathname\051 :verbose t\051) 207.65 567.95 T
(7) 63.65 556.95 T
(\050load \050merge-pathnames \322motif-menubar-loader\323) 83.49 556.95 T
(8) 63.65 545.95 T
(       user::garnet-gadgets-pathname\051 :verbose t\051) 207.65 545.95 T
(9) 63.65 534.95 T
(\050load \050merge-pathnames \322motif-scrolling-menu-loader\323) 83.49 534.95 T
(10) 63.65 523.95 T
(       user::garnet-gadgets-pathname\051 :verbose t\051) 207.65 523.95 T
(11) 63.65 512.95 T
(\050load \050merge-pathnames \322motif-error-gadget-loader\323) 83.49 512.95 T
(12) 63.65 501.95 T
(       user::garnet-gadgets-pathname\051 :verbose t\051) 207.65 501.95 T
(13) 63.65 490.95 T
(14) 63.65 479.95 T
(;;;) 83.49 479.95 T
(15) 63.65 468.95 T
(;;; ui.lisp) 83.49 468.95 T
(16) 63.65 457.95 T
(;;; user interface functions for bug tracking database) 83.49 457.95 T
(17) 63.65 446.95 T
(;;;) 83.49 446.95 T
(18) 63.65 435.95 T
(19) 63.65 424.95 T
(\050defvar *selection* nil\051) 83.49 424.95 T
(20) 63.65 413.95 T
(\050defvar *access-mode* nil\051) 83.49 413.95 T
(21) 63.65 402.95 T
(22) 63.65 391.95 T
(\050defun start-controller \050\051) 83.49 391.95 T
(23) 63.65 380.95 T
(  \050create-instance \324window inter:interactor-window) 83.49 380.95 T
(24) 63.65 369.95 T
(    \050:background-color opal:motif-gray\051) 83.49 369.95 T
(25) 63.65 358.95 T
(    \050:title \322BugSpray controller\323\051\051) 83.49 358.95 T
(26) 63.65 347.95 T
(  \050create-instance \324agg opal:aggregate\051) 83.49 347.95 T
(27) 63.65 336.95 T
(  \050s-value window :aggregate agg\051) 83.49 336.95 T
(28) 63.65 325.95 T
(29) 63.65 314.95 T
(  \050create-instance \324menubar gg:motif-menubar) 83.49 314.95 T
(30) 63.65 303.95 T
(    \050:items) 83.49 303.95 T
(31) 63.65 292.95 T
(     \324\050\050\322File\323 nil) 83.49 292.95 T
(32) 63.65 281.95 T
(\050\050\322Quit\323 stop-controller\051\051\051) 135.65 281.95 T
(33) 63.65 270.95 T
(       \050\322Mode\323 ui-set-mode) 83.49 270.95 T
(34) 63.65 259.95 T
(\050\050\322Entry\323\051 \050\322Linkage\323\051\051\051) 135.65 259.95 T
(35) 63.65 248.95 T
(       \050\322Object\323 ui-new-object) 83.49 248.95 T
(36) 63.65 237.95 T
(\050\050\322Problem\323\051 \050\322Comment\323\051 \050\322Bug\323\051 \050\322Fix\323\051 \050\322Workaround\323\051\051\051) 135.65 237.95 T
(37) 63.65 226.95 T
(       \050\322Command\323 nil) 83.49 226.95 T
(38) 63.65 215.95 T
(\050\050\322Edit\323 ui-edit-selection\051 \050\322Delete\323 ui-delete-selection\051) 135.65 215.95 T
(39) 63.65 204.95 T
( \050\322Link\323 ui-link-selection\051 \050\322Synchronise\323 ui-synchronise\051\051\051\051\051\051) 135.65 204.95 T
(40) 63.65 193.95 T
(  \050opal:add-component agg menubar\051) 83.49 193.95 T
(41) 63.65 182.95 T
(42) 63.65 171.95 T
(  \050create-instance \324scrolllist gg:motif-scrolling-menu) 83.49 171.95 T
(43) 63.65 160.95 T
(    \050:top 30\051 \050:width 150\051) 83.49 160.95 T
(44) 63.65 149.95 T
(    \050:title \322Current objects:\323\051) 83.49 149.95 T
(45) 63.65 138.95 T
(    \050:items nil\051) 83.49 138.95 T
(46) 63.65 127.95 T
(    \050:toggle-p nil\051) 83.49 127.95 T
(47) 63.65 116.95 T
(    \050:menu-selection-function #\325ui-select-item\051) 83.49 116.95 T
(48) 63.65 105.95 T
(    \050:item-to-string-function #\325object-to-string\051\051) 83.49 105.95 T
(49) 63.65 94.95 T
(  \050opal:add-component agg scrolllist\051) 83.49 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 122
%%Page: "123" 123
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples.) 387.22 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(123) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
6 9 Q
0 X
(50) 45.65 738.95 T
(  \050opal:update window\051\051) 65.49 738.95 T
(51) 45.65 727.95 T
(52) 45.65 716.95 T
(\050defun init-controller \050\051) 65.49 716.95 T
(53) 45.65 705.95 T
(  \050maphash #\325\050lambda \050key value\051 \050declare \050ignore key\051\051) 65.49 705.95 T
(54) 45.65 694.95 T
(       \050add-menu-item value\051\051 *record-table*\051) 117.65 694.95 T
(55) 45.65 683.95 T
(  \050opal:update window\051\051) 65.49 683.95 T
(56) 45.65 672.95 T
(57) 45.65 661.95 T
(\050defun stop-controller \050gadget menuitem submenuitem\051) 65.49 661.95 T
(58) 45.65 650.95 T
(  \050declare \050ignore gadget menuitem submenuitem\051\051) 65.49 650.95 T
(59) 45.65 639.95 T
(  \050opal:destroy window\051\051) 65.49 639.95 T
(60) 45.65 628.95 T
(61) 45.65 617.95 T
(;;; helper functions for the controller window, mainly for handling) 65.49 617.95 T
(62) 45.65 606.95 T
(;;; menu selections, etc.) 65.49 606.95 T
(63) 45.65 595.95 T
(;;;) 65.49 595.95 T
(64) 45.65 584.95 T
(\050defun ui-select-item \050gadget menuitem\051) 65.49 584.95 T
(65) 45.65 573.95 T
(  \050declare \050ignore gadget\051\051) 65.49 573.95 T
(66) 45.65 562.95 T
(  \050setq *selection* \050g-value menuitem :item\051\051\051) 65.49 562.95 T
(67) 45.65 551.95 T
(68) 45.65 540.95 T
(\050defun add-menu-item \050item\051) 65.49 540.95 T
(69) 45.65 529.95 T
(  \050let \050\050items \050g-value scrolllist :items\051\051\051) 65.49 529.95 T
(70) 45.65 518.95 T
(    \050unless \050member item items\051) 65.49 518.95 T
(71) 45.65 507.95 T
(      \050s-value scrolllist :items \050append items \050list item\051\051\051\051\051\051) 65.49 507.95 T
(72) 45.65 496.95 T
(73) 45.65 485.95 T
(\050defun ui-edit-selection \050gadget menuitem submenuitem\051) 65.49 485.95 T
(74) 45.65 474.95 T
(  \050declare \050ignore gadget menuitem submenuitem\051\051) 65.49 474.95 T
(75) 45.65 463.95 T
(  \050when *selection*) 65.49 463.95 T
(76) 45.65 452.95 T
(\050dialogue-enter-record *selection*\051\051\051) 117.65 452.95 T
(77) 45.65 441.95 T
(78) 45.65 430.95 T
(\050defun ui-delete-selection \050gadget menu submenuitem\051) 65.49 430.95 T
(79) 45.65 419.95 T
(  \050declare \050ignore gadget menu submenuitem\051\051) 65.49 419.95 T
(80) 45.65 408.95 T
(  \050when *selection*) 65.49 408.95 T
(81) 45.65 397.95 T
(\050let \050\050items \050g-value scrolllist :items\051\051\051) 117.65 397.95 T
(82) 45.65 386.95 T
(  \050s-value scrolllist :items \050remove *selection* items\051\051\051\051\051) 117.65 386.95 T
(83) 45.65 375.95 T
(84) 45.65 364.95 T
(\050defun ui-link-selection \050gadget menu submenuitem\051) 65.49 364.95 T
(85) 45.65 353.95 T
(  \050declare \050ignore gadget menu submenuitem\051\051) 65.49 353.95 T
(86) 45.65 342.95 T
(  \050when *selection*) 65.49 342.95 T
(87) 45.65 331.95 T
(\050let \050\050s *selection*\051\051) 117.65 331.95 T
(88) 45.65 320.95 T
(  \050gg:display-query) 117.65 320.95 T
(89) 45.65 309.95 T
(   \050create-instance nil gg:motif-query-gadget) 117.65 309.95 T
(90) 45.65 298.95 T
(  \050:string \322Select end-point of link\323\051) 189.65 298.95 T
(91) 45.65 287.95 T
(  \050:button-names \324\050\322OK\323 \322Cancel\323\051\051) 189.65 287.95 T
(92) 45.65 276.95 T
(  \050:foreground-color opal:motif-gray\051) 189.65 276.95 T
(93) 45.65 265.95 T
(  \050:modal-p nil\051) 189.65 265.95 T
(94) 45.65 254.95 T
(  \050:selection-function #\325\050lambda \050gadget item\051) 189.65 254.95 T
(95) 45.65 243.95 T
(   \050declare \050ignore) 405.65 243.95 T
(gadget\051\051) 45.65 233.95 T
(96) 45.65 222.95 T
(   \050ui-link-selected) 405.65 222.95 T
(item s\051\051\051\051\051\051\051\051) 45.65 212.95 T
(97) 45.65 201.95 T
(98) 45.65 190.95 T
(\050defun ui-link-selected \050item oldselect\051) 65.49 190.95 T
(99) 45.65 179.95 T
(  \050when \050and \050string= \322OK\323 item\051 \050not \050eq *selection* oldselect\051\051\051) 65.49 179.95 T
(100) 45.65 168.95 T
(    \050add-link *selection* oldselect\051\051\051) 65.49 168.95 T
(101) 45.65 157.95 T
(102) 45.65 146.95 T
(\050defun ui-new-object \050gadget menuitem submenuitem\051) 65.49 146.95 T
(103) 45.65 135.95 T
(  \050declare \050ignore gadget menuitem\051\051) 65.49 135.95 T
(104) 45.65 124.95 T
(  \050let \050\050obj \050make-instance \050item-to-classname submenuitem\051\051\051\051) 65.49 124.95 T
(105) 45.65 113.95 T
(    \050dialogue-enter-record obj\051\051\051) 65.49 113.95 T
(106) 45.65 102.95 T
(107) 45.65 91.95 T
(\050defun ui-set-mode \050gadget menuitem submenuitem\051) 65.49 91.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 123
%%Page: "124" 124
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(124) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
6 9 Q
0 X
(108) 63.65 738.95 T
(  \050declare \050ignore gadget menuitem\051\051) 83.49 738.95 T
(109) 63.65 727.95 T
(  \050setq *access-mode* \050intern \050string-upcase submenuitem\051) 83.49 727.95 T
(110) 63.65 716.95 T
(      \050find-package \322KEYWORD\323\051\051\051) 279.65 716.95 T
(111) 63.65 705.95 T
(  \050if *current-guarantee*) 83.49 705.95 T
(112) 63.65 694.95 T
(      \050redeem-guarantee *server-stream* *current-guarantee*\051\051) 83.49 694.95 T
(113) 63.65 683.95 T
(  \050setq *current-guarantee* \050request-guarantee\051\051\051) 83.49 683.95 T
(114) 63.65 672.95 T
(115) 63.65 661.95 T
(\050defun ui-synchronise \050gadget menuitem submenuitem\051) 83.49 661.95 T
(116) 63.65 650.95 T
(  \050declare \050ignore gadget menuitem submenuitem\051\051) 83.49 650.95 T
(117) 63.65 639.95 T
(  \050synchronise *local-stream* *server-stream*\051\051) 83.49 639.95 T
(118) 63.65 628.95 T
(119) 63.65 617.95 T
(;;; functions for the motif dialogue box for entering any form) 83.49 617.95 T
(120) 63.65 606.95 T
(;;; of report object) 83.49 606.95 T
(121) 63.65 595.95 T
(;;;) 83.49 595.95 T
(122) 63.65 584.95 T
(\050defmethod dialogue-enter-record \050\050record <bugs-record>\051\051) 83.49 584.95 T
(123) 63.65 573.95 T
(  \050let \050\050items \050mapcar #\325\050lambda \050x\051 \050list \050symbol-name x\051) 83.49 573.95 T
(124) 63.65 562.95 T
(   \050slot-value record) 423.65 562.95 T
(x\051\051\051) 63.65 552.95 T
(125) 63.65 541.95 T
(       \050entry-slots record\051\051\051\051) 207.65 541.95 T
(126) 63.65 530.95 T
(    \050gg:pop-up-win-for-prop) 83.49 530.95 T
(127) 63.65 519.95 T
(     \050create-instance nil gg:motif-prop-sheet-with-ok) 83.49 519.95 T
(128) 63.65 508.95 T
(      \050:items items\051) 207.65 508.95 T
(129) 63.65 497.95 T
(      \050:ok-function #\325\050lambda \050gadget\051) 207.65 497.95 T
(130) 63.65 486.95 T
(\050dialogue-ok gadget) 423.65 486.95 T
(record\051\051\051) 63.65 476.95 T
(131) 63.65 465.95 T
(      \050:accept-function #\325\050lambda \050gadget\051) 207.65 465.95 T
(132) 63.65 454.95 T
-0.6 (    \050dialogue-ok gadget) 423.65 454.95 P
(record\051\051\051) 63.65 444.95 T
(133) 63.65 433.95 T
(      \050:cancel-function #\325\050lambda \050gadget\051) 207.65 433.95 T
(134) 63.65 422.95 T
(    \050dialogue-cancel) 423.65 422.95 T
(gadget record\051\051\051\051) 63.65 412.95 T
(135) 63.65 401.95 T
(     200 150 \050format nil \322Entry form for ~A\323 \050class-name \050class-of record\051\051\051\051\051\051) 83.49 401.95 T
(136) 63.65 390.95 T
(137) 63.65 379.95 T
(138) 63.65 368.95 T
(\050defun dialogue-ok \050gadget record\051) 83.49 368.95 T
(139) 63.65 357.95 T
(  \050update-record-slots record \050g-value gadget :changed-values\051\051) 83.49 357.95 T
(140) 63.65 346.95 T
(  \050add-menu-item record\051\051) 83.49 346.95 T
(141) 63.65 335.95 T
(142) 63.65 324.95 T
(\050defun dialogue-cancel \050gadget record\051) 83.49 324.95 T
(143) 63.65 313.95 T
(  \050declare \050ignore gadget record\051\051) 83.49 313.95 T
(144) 63.65 302.95 T
(  \050format t \322DIALOGUE CANCEL~%\323\051\051) 83.49 302.95 T
(145) 63.65 291.95 T
(146) 63.65 280.95 T
(;;;) 83.49 280.95 T
(147) 63.65 269.95 T
(;;; ui support for guarantees) 83.49 269.95 T
(148) 63.65 258.95 T
(;;;) 83.49 258.95 T
(149) 63.65 247.95 T
(\050defun ui-request-guarantee \050\051) 83.49 247.95 T
(150) 63.65 236.95 T
(  \050let \050\050guarantee \050request-guarantee\051\051\051) 83.49 236.95 T
(151) 63.65 225.95 T
(    \050if \050eq \050class-of guarantee\051 \050find-class \324<null-guarantee>\051\051) 83.49 225.95 T
(152) 63.65 214.95 T
(\050gg:display-error-and-wait) 135.65 214.95 T
(153) 63.65 203.95 T
( \050create-instance nil gg:motif-error-gadget) 135.65 203.95 T
(154) 63.65 192.95 T
(  \322Requested guarantee was NOT granted.\323\051\051\051) 279.65 192.95 T
(155) 63.65 181.95 T
(    \050setq *current-guarantee* guarantee\051\051\051) 83.49 181.95 T
(156) 63.65 170.95 T
(157) 63.65 159.95 T
(;;; misc. helper functions) 83.49 159.95 T
(158) 63.65 148.95 T
(;;;) 83.49 148.95 T
(159) 63.65 137.95 T
(160) 63.65 126.95 T
(\050defun item-to-classname \050item\051) 83.49 126.95 T
(161) 63.65 115.95 T
(  ;; \050intern \050format nil \322<~A>\323 \050string-upcase item\051\051\051\051) 83.49 115.95 T
(162) 63.65 104.95 T
(  \050intern \050concatenate \324string \322<\322 \050string-upcase item\051 \322>\323\051\051\051) 83.49 104.95 T
(163) 63.65 93.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 124
%%Page: "125" 125
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples.) 387.22 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(125) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
6 9 Q
0 X
(164) 45.65 738.95 T
(\050defmethod object-to-string \050\050obj <bugs-record>\051\051) 65.49 738.95 T
(165) 45.65 727.95 T
(  \050format nil \322~A: ~A\323 \050class-name \050class-of obj\051\051 \050record-id obj\051\051\051) 65.49 727.95 T
(166) 45.65 716.95 T
(167) 45.65 705.95 T
(\050defmethod object-to-string \050\050foo t\051\051) 65.49 705.95 T
(168) 45.65 694.95 T
(  \050format nil \322~A\323 foo\051\051) 65.49 694.95 T
(169) 45.65 683.95 T
2 12 Q
(2.3  common.lisp) 45.65 661.95 T
6 9 Q
(1) 45.65 644.95 T
(\050unless \050find-package \322BUGS\323\051) 65.49 644.95 T
(2) 45.65 633.95 T
(  \050make-package \322BUGS\323 :use \324\050\322LISP\323 \322PCL\323 \322KR\323 \322PROSPERO\323\051\051\051) 65.49 633.95 T
(3) 45.65 622.95 T
(\050in-package \322BUGS\323\051) 65.49 622.95 T
(4) 45.65 611.95 T
(5) 45.65 600.95 T
(;;;) 65.49 600.95 T
(6) 45.65 589.95 T
(;;; common.lisp) 65.49 589.95 T
(7) 45.65 578.95 T
(;;; Components and definitions common to client and server sides.) 65.49 578.95 T
(8) 45.65 567.95 T
(;;;) 65.49 567.95 T
(9) 45.65 556.95 T
(10) 45.65 545.95 T
(;;; define semantic properties as subclasses of action, and then the) 65.49 545.95 T
(11) 45.65 534.95 T
(;;; various application operations in terms of those.) 65.49 534.95 T
(12) 45.65 523.95 T
(;;;) 65.49 523.95 T
(13) 45.65 512.95 T
(14) 45.65 501.95 T
(\050defclass <append-action> \050<action>\051) 65.49 501.95 T
(15) 45.65 490.95 T
(  \050\051\051) 65.49 490.95 T
(16) 45.65 479.95 T
(\050defclass <content-change-action> \050<action>\051) 65.49 479.95 T
(17) 45.65 468.95 T
(  \050\051\051) 65.49 468.95 T
(18) 45.65 457.95 T
(\050defclass <structure-change-action> \050<action>\051) 65.49 457.95 T
(19) 45.65 446.95 T
(  \050\051\051) 65.49 446.95 T
(20) 45.65 435.95 T
(\050defclass <no-change-action> \050<action>\051) 65.49 435.95 T
(21) 45.65 424.95 T
(  \050\051\051) 65.49 424.95 T
(22) 45.65 413.95 T
(23) 45.65 402.95 T
(\050defclass <bugs-action> \050<action>\051) 65.49 402.95 T
(24) 45.65 391.95 T
(  \050\050id :initarg :id :accessor action-id\051) 65.49 391.95 T
(25) 45.65 380.95 T
(   \050fields :initform nil :initarg :fields :accessor action-fields\051) 65.49 380.95 T
(26) 45.65 369.95 T
(   \050values :initform nil :initarg :values :accessor action-values\051\051\051) 65.49 369.95 T
(27) 45.65 358.95 T
(28) 45.65 347.95 T
(\050defclass <create-object-action> \050<bugs-action> <append-action>\051) 65.49 347.95 T
(29) 45.65 336.95 T
(  \050\050type :initarg :type :accessor create-action-type\051\051\051) 65.49 336.95 T
(30) 45.65 325.95 T
(\050defclass <find-action> \050<bugs-action> <no-change-action>\051) 65.49 325.95 T
(31) 45.65 314.95 T
(  \050\051\051) 65.49 314.95 T
(32) 45.65 303.95 T
(\050defclass <set-field-action> \050<bugs-action> <no-change-action>\051) 65.49 303.95 T
(33) 45.65 292.95 T
(  \050\051\051) 65.49 292.95 T
(34) 45.65 281.95 T
(\050defclass <change-field-action> \050<bugs-action> <content-change-action>\051) 65.49 281.95 T
(35) 45.65 270.95 T
(  \050\051\051) 65.49 270.95 T
(36) 45.65 259.95 T
(\050defclass <add-link-action> \050<bugs-action> <structure-change-action>\051) 65.49 259.95 T
(37) 45.65 248.95 T
(  \050\051\051) 65.49 248.95 T
(38) 45.65 237.95 T
(39) 45.65 226.95 T
(;;;) 65.49 226.95 T
(40) 45.65 215.95 T
(;;; check send action prevents action loops) 65.49 215.95 T
(41) 45.65 204.95 T
(;;; refuse attempts to send actions to the host which sent them.) 65.49 204.95 T
(42) 45.65 193.95 T
(;;;) 65.49 193.95 T
(43) 45.65 182.95 T
(\050defmethod check-send-action \050\050action <bugs-action>\051 \050stream <remote-stream>\051\051) 65.49 182.95 T
(44) 45.65 171.95 T
(  \050let \050\050host \050stream-host stream\051\051) 65.49 171.95 T
(45) 45.65 160.95 T
(\050source \050action-source action\051\051\051) 117.65 160.95 T
(46) 45.65 149.95 T
(    \050if \050string-equal \050subseq source \050length host\051\051 host\051) 65.49 149.95 T
(47) 45.65 138.95 T
(nil) 117.65 138.95 T
(48) 45.65 127.95 T
(      t\051\051\051) 65.49 127.95 T
(49) 45.65 116.95 T
(50) 45.65 105.95 T
(51) 45.65 94.95 T
(;;;) 65.49 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 125
%%Page: "126" 126
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(126) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
6 9 Q
0 X
(52) 63.65 738.95 T
(;;; stream stuff; initialisation and setup) 83.49 738.95 T
(53) 63.65 727.95 T
(;;;) 83.49 727.95 T
(54) 63.65 716.95 T
(55) 63.65 705.95 T
(\050defvar *local-stream* nil\051) 83.49 705.95 T
(56) 63.65 694.95 T
(\050defvar *server-stream* nil\051) 83.49 694.95 T
(57) 63.65 683.95 T
(\050defvar *client-streams* nil\051) 83.49 683.95 T
(58) 63.65 672.95 T
(59) 63.65 661.95 T
(\050defun server-setup-streams \050&rest client-hosts\051) 83.49 661.95 T
(60) 63.65 650.95 T
(  \050setq *local-stream* \050make-instance \324<explicit-synch-stream>) 83.49 650.95 T
(61) 63.65 639.95 T
(      :name *ident*) 351.65 639.95 T
(62) 63.65 628.95 T
(      :host *host*\051\051) 351.65 628.95 T
(63) 63.65 617.95 T
(  \050dolist \050host client-hosts\051) 83.49 617.95 T
(64) 63.65 606.95 T
(  \050server-add-client host\051\051\051) 135.65 606.95 T
(65) 63.65 595.95 T
(66) 63.65 584.95 T
(\050defun server-add-client \050host\051) 83.49 584.95 T
(67) 63.65 573.95 T
(  \050push \050make-instance \324<remote-stream> :host host\051) 83.49 573.95 T
(68) 63.65 562.95 T
(\050stream-peers *local-stream*\051\051\051) 135.65 562.95 T
(69) 63.65 551.95 T
(70) 63.65 540.95 T
(\050defun client-setup-streams \050host\051) 83.49 540.95 T
(71) 63.65 529.95 T
(  \050setq *local-stream* \050make-instance \324<explicit-synch-stream>) 83.49 529.95 T
(72) 63.65 518.95 T
(      :name *ident*) 351.65 518.95 T
(73) 63.65 507.95 T
(      :host *host*\051\051) 351.65 507.95 T
(74) 63.65 496.95 T
(  \050setq *server-stream* \050make-instance \324<remote-stream> :name \322Bugspray server\323) 83.49 496.95 T
(75) 63.65 485.95 T
(       :host host\051\051) 351.65 485.95 T
(76) 63.65 474.95 T
(  \050push *server-stream* \050stream-peers *local-stream*\051\051\051) 83.49 474.95 T
(77) 63.65 463.95 T
(78) 63.65 452.95 T
(\050defmethod find-local-stream \050\051) 83.49 452.95 T
(79) 63.65 441.95 T
(  *local-stream*\051) 83.49 441.95 T
2 12 Q
(2.4  guarantees.lisp) 63.65 419.95 T
6 9 Q
(1) 63.65 402.95 T
(\050unless \050find-package \322BUGS\323\051) 83.49 402.95 T
(2) 63.65 391.95 T
(  \050make-package \322BUGS\323 :use \324\050\322LISP\323 \322PCL\323 \322KR\323 \322PROSPERO\323\051\051\051) 83.49 391.95 T
(3) 63.65 380.95 T
(\050in-package \322BUGS\323\051) 83.49 380.95 T
(4) 63.65 369.95 T
(5) 63.65 358.95 T
(;;;) 83.49 358.95 T
(6) 63.65 347.95 T
(;;; guarantees.lisp) 83.49 347.95 T
(7) 63.65 336.95 T
(;;; code related to consistency guarantees for bugspray application.) 83.49 336.95 T
(8) 63.65 325.95 T
(;;; both client and server sides) 83.49 325.95 T
(9) 63.65 314.95 T
(;;;) 83.49 314.95 T
(10) 63.65 303.95 T
(11) 63.65 292.95 T
(;;;) 83.49 292.95 T
(12) 63.65 281.95 T
(;;; basic approach -- the application defines various sorts of guarantees) 83.49 281.95 T
(13) 63.65 270.95 T
(;;; which can be given, and then the comparative conditions under which) 83.49 270.95 T
(14) 63.65 259.95 T
(;;; they might be granted.) 83.49 259.95 T
(15) 63.65 248.95 T
(;;;) 83.49 248.95 T
(16) 63.65 237.95 T
(;;; a structure-promise implies that only structural changes will be) 83.49 237.95 T
(17) 63.65 226.95 T
(;;; made. a content-promise implies that only content-changes will be) 83.49 226.95 T
(18) 63.65 215.95 T
(;;; made. a structure-content-promise implies that structural and content) 83.49 215.95 T
(19) 63.65 204.95 T
(;;; changes will be made.) 83.49 204.95 T
(20) 63.65 193.95 T
(;;;) 83.49 193.95 T
(21) 63.65 182.95 T
(22) 63.65 171.95 T
(\050defclass <bugs-promise> \050<promise>\051) 83.49 171.95 T
(23) 63.65 160.95 T
(  \050\051\051) 83.49 160.95 T
(24) 63.65 149.95 T
(\050defclass <structure-promise> \050<bugs-promise>\051) 83.49 149.95 T
(25) 63.65 138.95 T
(  \050\051\051) 83.49 138.95 T
(26) 63.65 127.95 T
(\050defclass <content-promise> \050<bugs-promise>\051) 83.49 127.95 T
(27) 63.65 116.95 T
(  \050\051\051) 83.49 116.95 T
(28) 63.65 105.95 T
(\050defclass <structure-content-promise> \050<structure-promise> <content-promise>\051) 83.49 105.95 T
(29) 63.65 94.95 T
(  \050\051\051) 83.49 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 126
%%Page: "127" 127
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples.) 387.22 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(127) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
6 9 Q
0 X
(30) 45.65 738.95 T
(31) 45.65 727.95 T
(;;;) 65.49 727.95 T
(32) 45.65 716.95 T
(;;; granting guarantees.) 65.49 716.95 T
(33) 45.65 705.95 T
(;;;) 65.49 705.95 T
(34) 45.65 694.95 T
(;;; in bugspray, we just want to look for structure/structure conflicts) 65.49 694.95 T
(35) 45.65 683.95 T
(;;; and content/content conflicts) 65.49 683.95 T
(36) 45.65 672.95 T
(;;;) 65.49 672.95 T
(37) 45.65 661.95 T
(\050defmethod compatible-promises \050\050new <bugs-promise>\051 \050old <bugs-promise>\051\051) 65.49 661.95 T
(38) 45.65 650.95 T
(  t\051) 65.49 650.95 T
(39) 45.65 639.95 T
(40) 45.65 628.95 T
(\050defmethod compatible-promises \050\050new <structure-promise>\051) 65.49 628.95 T
(41) 45.65 617.95 T
(\050old <structure-promise>\051\051) 333.65 617.95 T
(42) 45.65 606.95 T
(  nil\051) 65.49 606.95 T
(43) 45.65 595.95 T
(44) 45.65 584.95 T
(\050defmethod compatible-promises \050\050new <content-promise>\051) 65.49 584.95 T
(45) 45.65 573.95 T
(\050old <content-promise>\051\051) 333.65 573.95 T
(46) 45.65 562.95 T
(  nil\051) 65.49 562.95 T
(47) 45.65 551.95 T
(48) 45.65 540.95 T
2 12 Q
(2.5  client.list) 45.65 518.95 T
6 9 Q
(1) 45.65 501.95 T
(\050unless \050find-package \322BUGS\323\051) 65.49 501.95 T
(2) 45.65 490.95 T
(  \050make-package \322BUGS\323 :use \324\050\322LISP\323 \322PCL\323 \322KR\323 \322PROSPERO\323\051\051\051) 65.49 490.95 T
(3) 45.65 479.95 T
(\050in-package \322BUGS\323\051) 65.49 479.95 T
(4) 45.65 468.95 T
(5) 45.65 457.95 T
(;;;) 65.49 457.95 T
(6) 45.65 446.95 T
(;;; client.lisp) 65.49 446.95 T
(7) 45.65 435.95 T
(;;; Client-side database components for the bug-tracking database) 65.49 435.95 T
(8) 45.65 424.95 T
(;;; application.) 65.49 424.95 T
(9) 45.65 413.95 T
(;;;) 65.49 413.95 T
(10) 45.65 402.95 T
(11) 45.65 391.95 T
(12) 45.65 380.95 T
(;;;) 65.49 380.95 T
(13) 45.65 369.95 T
(;;; first, various functions for performing database actions. these) 65.49 369.95 T
(14) 45.65 358.95 T
(;;; then create and process action records. add these as after-methods.) 65.49 358.95 T
(15) 45.65 347.95 T
(;;;) 65.49 347.95 T
(16) 45.65 336.95 T
(17) 45.65 325.95 T
(\050defmethod update-record-slots :after \050\050record <bugs-record>\051 slot-value-list\051) 65.49 325.95 T
(18) 45.65 314.95 T
(  \050let \050\050id \050record-id record\051\051\051) 65.49 314.95 T
(19) 45.65 303.95 T
(    \050dolist \050slot-value slot-value-list\051) 65.49 303.95 T
(20) 45.65 292.95 T
(       \050let \050\050slot \050intern \050car slot-value\051\051\051) 65.49 292.95 T
(21) 45.65 281.95 T
(     \050value \050cadr slot-value\051\051\051) 117.65 281.95 T
(22) 45.65 270.95 T
( \050generate-update-record record id slot value\051\051\051\051\051) 117.65 270.95 T
(23) 45.65 259.95 T
(24) 45.65 248.95 T
(\050defmethod add-link :after \050\050from <bugs-record>\051 \050to <bugs-record>\051\051) 65.49 248.95 T
(25) 45.65 237.95 T
(  \050let \050\050from-id \050record-id from\051\051) 65.49 237.95 T
(26) 45.65 226.95 T
(\050to-id \050record-id to\051\051\051) 117.65 226.95 T
(27) 45.65 215.95 T
(    \050when *local-stream*) 65.49 215.95 T
(28) 45.65 204.95 T
(  \050add-action-to-stream) 117.65 204.95 T
(29) 45.65 193.95 T
(   \050make-instance \324<add-link-action> :source *ident* :id from-id) 117.65 193.95 T
(30) 45.65 182.95 T
(  :fields \050list to-id\051 :values nil\051) 261.65 182.95 T
(31) 45.65 171.95 T
(   *local-stream*\051\051) 117.65 171.95 T
(32) 45.65 160.95 T
(    \050format t \322! link ~A ~A~%\323 from-id to-id\051\051\051) 65.49 160.95 T
(33) 45.65 149.95 T
(34) 45.65 138.95 T
(\050defmethod new-record :after \050\050record <bugs-record>\051\051) 65.49 138.95 T
(35) 45.65 127.95 T
(  \050let \050\050id \050record-id record\051\051) 65.49 127.95 T
(36) 45.65 116.95 T
(\050type \050class-name \050class-of record\051\051\051\051) 117.65 116.95 T
(37) 45.65 105.95 T
(    \050when *local-stream*) 65.49 105.95 T
(38) 45.65 94.95 T
(  \050add-action-to-stream) 117.65 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 127
%%Page: "128" 128
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(128) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
6 9 Q
0 X
(39) 63.65 738.95 T
(   \050make-instance \324<create-object-action> :source *ident*) 135.65 738.95 T
(40) 63.65 727.95 T
(  :id id :type type\051) 279.65 727.95 T
(41) 63.65 716.95 T
(   *local-stream*\051\051) 135.65 716.95 T
(42) 63.65 705.95 T
(    \050format t \322-> <CREATE-OBJECT-ACTION> ~A ~A~%\323) 83.49 705.95 T
(43) 63.65 694.95 T
(    \050class-name \050class-of record\051\051 \050record-id record\051\051\051\051) 135.65 694.95 T
(44) 63.65 683.95 T
(45) 63.65 672.95 T
(\050defun generate-update-record \050record id slot value\051) 83.49 672.95 T
(46) 63.65 661.95 T
(  \050let \050\050update-type \050if \050new-record-p record\051 \324<set-field-action>) 83.49 661.95 T
(47) 63.65 650.95 T
(       \324<change-field-action>\051\051\051) 207.65 650.95 T
(48) 63.65 639.95 T
(    \050when *local-stream*) 83.49 639.95 T
(49) 63.65 628.95 T
(  \050add-action-to-stream) 135.65 628.95 T
(50) 63.65 617.95 T
(   \050make-instance update-type :source *ident* :id id) 135.65 617.95 T
(51) 63.65 606.95 T
(  :fields \050list slot\051 :values \050list value\051\051) 279.65 606.95 T
(52) 63.65 595.95 T
(   *local-stream*\051\051) 135.65 595.95 T
(53) 63.65 584.95 T
(    \050format t \322-> ~A ~A ~A ~A~%\323 update-type id slot value\051\051\051) 83.49 584.95 T
(54) 63.65 573.95 T
(55) 63.65 562.95 T
(;;; new-record-p) 83.49 562.95 T
(56) 63.65 551.95 T
(;;; a record is \322new\323 if it\325s been created since the last point of) 83.49 551.95 T
(57) 63.65 540.95 T
(;;; synchronisation \050and hence, changes to its fields cannot conflict) 83.49 540.95 T
(58) 63.65 529.95 T
(;;; with activities elsewhere\051.) 83.49 529.95 T
(59) 63.65 518.95 T
(;;;) 83.49 518.95 T
(60) 63.65 507.95 T
(\050defun new-record-p \050record\051) 83.49 507.95 T
(61) 63.65 496.95 T
(  \050let \050\050id \050record-id record\051\051\051) 83.49 496.95 T
(62) 63.65 485.95 T
(    \050pending-action-p *local-stream*) 83.49 485.95 T
(63) 63.65 474.95 T
(      #\325\050lambda \050action\051) 207.65 474.95 T
(64) 63.65 463.95 T
(  \050and \050eq \050class-of action\051) 279.65 463.95 T
(65) 63.65 452.95 T
(   \050find-class \324<create-object-) 351.65 452.95 T
(action>\051\051) 63.65 442.95 T
(66) 63.65 431.95 T
(     \050eq \050action-id action\051 id\051\051\051\051\051\051) 279.65 431.95 T
(67) 63.65 420.95 T
(68) 63.65 409.95 T
(;;;) 83.49 409.95 T
(69) 63.65 398.95 T
(;;; promise and guarantee, based on the access mode) 83.49 398.95 T
(70) 63.65 387.95 T
(;;;) 83.49 387.95 T
(71) 63.65 376.95 T
(\050defvar *current-guarantee* nil\051) 83.49 376.95 T
(72) 63.65 365.95 T
(73) 63.65 354.95 T
(\050defun request-guarantee \050\051) 83.49 354.95 T
(74) 63.65 343.95 T
(  \050let \050\050promise \050case *access-mode*) 83.49 343.95 T
(75) 63.65 332.95 T
(       \050\050:entry\051 \050make-instance \324<content-promise>\051\051) 207.65 332.95 T
(76) 63.65 321.95 T
(       \050\050:linkage\051 \050make-instance \324<structure-promise>\051\051) 207.65 321.95 T
(77) 63.65 310.95 T
(       \050t \050make-instance \324<structure-content-promise>\051\051\051\051\051) 207.65 310.95 T
(78) 63.65 299.95 T
(    \050get-guarantee *server-stream* promise\051\051\051) 83.49 299.95 T
(79) 63.65 288.95 T
(80) 63.65 277.95 T
(;;;) 83.49 277.95 T
(81) 63.65 266.95 T
(;;;) 83.49 266.95 T
(82) 63.65 255.95 T
(\050defmethod add-action-to-stream \050\050action <bugs-action>\051 \050stream <local-stream>\051\051) 83.49 255.95 T
(83) 63.65 244.95 T
(  \050push action \050stream-actions stream\051\051\051) 83.49 244.95 T
(84) 63.65 233.95 T
(85) 63.65 222.95 T
(86) 63.65 211.95 T
(;;;;) 83.49 211.95 T
(87) 63.65 200.95 T
(88) 63.65 189.95 T
(\050defun init-load-database \050\051) 83.49 189.95 T
(89) 63.65 178.95 T
(  \050let \050\050host \050stream-host *server-stream*\051\051\051) 83.49 178.95 T
(90) 63.65 167.95 T
(    \050host-load-database host\051\051\051) 83.49 167.95 T
(91) 63.65 156.95 T
2 12 Q
(2.6  server) 63.65 134.95 T
(.lisp) 119.68 134.95 T
6 9 Q
(1) 63.65 117.95 T
(\050unless \050find-package \322BUGS\323\051) 83.49 117.95 T
(2) 63.65 106.95 T
(  \050make-package \322BUGS\323 :use \324\050\322LISP\323 \322PCL\323 \322KR\323 \322PROSPERO\323\051\051\051) 83.49 106.95 T
(3) 63.65 95.95 T
(\050in-package \322BUGS\323\051) 83.49 95.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 128
%%Page: "129" 129
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples.) 387.22 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(129) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
6 9 Q
0 X
(4) 45.65 738.95 T
(5) 45.65 727.95 T
(;;;) 65.49 727.95 T
(6) 45.65 716.95 T
(;;; server.lisp) 65.49 716.95 T
(7) 45.65 705.95 T
(;;; Server-side database components for the bug-tracking database) 65.49 705.95 T
(8) 45.65 694.95 T
(;;; application.) 65.49 694.95 T
(9) 45.65 683.95 T
(;;;) 65.49 683.95 T
(10) 45.65 672.95 T
(11) 45.65 661.95 T
(\050defmethod locally-perform-action :before \050\050action <bugs-action>\051\051) 65.49 661.95 T
(12) 45.65 650.95 T
(  \050format t \322received ~A ~A from ~A~%\323 \050class-name \050class-of action\051\051) 65.49 650.95 T
(13) 45.65 639.95 T
(  \050action-id action\051 \050action-source action\051\051\051) 117.65 639.95 T
(14) 45.65 628.95 T
(15) 45.65 617.95 T
(\050defmethod locally-perform-action \050\050action <create-object-action>\051\051) 65.49 617.95 T
(16) 45.65 606.95 T
(  \050let \050\050record \050make-instance \050create-action-type action\051) 65.49 606.95 T
(17) 45.65 595.95 T
(       :id \050action-id action\051\051\051\051) 261.65 595.95 T
(18) 45.65 584.95 T
(    \050format t \322Created ~A record with id ~A~%\323 \050create-action-type action\051) 65.49 584.95 T
(19) 45.65 573.95 T
(    \050record-id record\051\051) 117.65 573.95 T
(20) 45.65 562.95 T
(    \050record-object record\051\051\051) 65.49 562.95 T
(21) 45.65 551.95 T
(22) 45.65 540.95 T
(\050defmethod locally-perform-action \050\050action <set-field-action>\051\051) 65.49 540.95 T
(23) 45.65 529.95 T
(  \050format t \322locally performing <set-field-action>~%\323\051) 65.49 529.95 T
(24) 45.65 518.95 T
(  \050let* \050\050record \050id-to-object \050action-id action\051\051\051) 65.49 518.95 T
(25) 45.65 507.95 T
( \050field \050car \050action-fields action\051\051\051) 117.65 507.95 T
(26) 45.65 496.95 T
( \050value \050car \050action-values action\051\051\051\051) 117.65 496.95 T
(27) 45.65 485.95 T
(    \050format t \322Setting ~A of ~A to ~A~%\323 field record value\051) 65.49 485.95 T
(28) 45.65 474.95 T
(    \050setf \050slot-value record field\051 value\051\051\051) 65.49 474.95 T
(29) 45.65 463.95 T
(30) 45.65 452.95 T
(\050defmethod locally-perform-action \050\050action <change-field-action>\051\051) 65.49 452.95 T
(31) 45.65 441.95 T
(  \050format t \322locally performing <change-field-action>~%\323\051) 65.49 441.95 T
(32) 45.65 430.95 T
(  \050let* \050\050record \050id-to-object \050action-id action\051\051\051) 65.49 430.95 T
(33) 45.65 419.95 T
( \050field \050car \050action-fields action\051\051\051) 117.65 419.95 T
(34) 45.65 408.95 T
( \050value \050car \050action-values action\051\051\051\051) 117.65 408.95 T
(35) 45.65 397.95 T
(    \050format t \322Setting ~A of ~A to ~A~%\323 field record value\051) 65.49 397.95 T
(36) 45.65 386.95 T
(    \050setf \050slot-value record field\051 value\051\051\051) 65.49 386.95 T
(37) 45.65 375.95 T
(38) 45.65 364.95 T
(\050defmethod locally-perform-action \050\050action <add-link-action>\051\051) 65.49 364.95 T
(39) 45.65 353.95 T
(  \050let* \050\050from-id \050action-id action\051\051) 65.49 353.95 T
(40) 45.65 342.95 T
( \050to-id \050car \050action-fields action\051\051\051) 117.65 342.95 T
(41) 45.65 331.95 T
( \050from-obj \050id-to-object from-id\051\051) 117.65 331.95 T
(42) 45.65 320.95 T
( \050to-obj \050id-to-object to-id\051\051\051) 117.65 320.95 T
(43) 45.65 309.95 T
(    \050add-link from-obj to-obj\051\051\051) 65.49 309.95 T
(44) 45.65 298.95 T
2 12 Q
(2.7  \337atten.lisp) 45.65 276.95 T
6 9 Q
(1) 45.65 259.95 T
(\050unless \050find-package \322PROSPERO\323\051) 65.49 259.95 T
(2) 45.65 248.95 T
(   \050make-package \322PROSPERO\323 :use \324\050\322LISP\323 \322PCL\323\051\051\051) 65.49 248.95 T
(3) 45.65 237.95 T
(\050in-package \322PROSPERO\323\051) 65.49 237.95 T
(4) 45.65 226.95 T
(5) 45.65 215.95 T
(\050defmethod object-to-wireform \050\050obj bugs::<bugs-action>\051\051) 65.49 215.95 T
(6) 45.65 204.95 T
(  \050list \050class-name \050class-of obj\051\051 \050action-source obj\051) 65.49 204.95 T
(7) 45.65 193.95 T
(\050bugs::action-id obj\051 \050bugs::action-fields obj\051) 117.65 193.95 T
(8) 45.65 182.95 T
(\050bugs::action-values obj\051\051\051) 117.65 182.95 T
(9) 45.65 171.95 T
(10) 45.65 160.95 T
(\050defmethod object-to-wireform \050\050obj bugs::<create-object-action>\051\051) 65.49 160.95 T
(11) 45.65 149.95 T
(  \050list \050class-name \050class-of obj\051\051 \050action-source obj\051) 65.49 149.95 T
(12) 45.65 138.95 T
(\050bugs::action-id obj\051 \050bugs::create-action-type obj\051\051\051) 117.65 138.95 T
(13) 45.65 127.95 T
(14) 45.65 116.95 T
(\050defun wireform-to-object \050wireobj\051) 65.49 116.95 T
(15) 45.65 105.95 T
(  \050let \050\050obj \050make-instance \050intern \050symbol-name \050first wireobj\051\051 \322BUGS\323\051\051\051\051) 65.49 105.95 T
(16) 45.65 94.95 T
(    \050setf \050action-source obj\051 \050second wireobj\051\051) 65.49 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 129
%%Page: "130" 130
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(130) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
6 9 Q
0 X
(17) 63.65 738.95 T
(    \050setf \050bugs::action-id obj\051 \050third wireobj\051\051) 83.49 738.95 T
(18) 63.65 727.95 T
(    \050if \050eq \050class-of obj\051 \050find-class \324bugs::<create-object-action>\051\051) 83.49 727.95 T
(19) 63.65 716.95 T
(\050setf \050bugs::create-action-type obj\051 \050fourth wireobj\051\051) 135.65 716.95 T
(20) 63.65 705.95 T
(      \050progn) 83.49 705.95 T
(21) 63.65 694.95 T
(\050setf \050bugs::action-fields obj\051 \050fourth wireobj\051\051) 135.65 694.95 T
(22) 63.65 683.95 T
(\050setf \050bugs::action-values obj\051 \050fifth wireobj\051\051\051\051) 135.65 683.95 T
(23) 63.65 672.95 T
(    obj\051\051) 83.49 672.95 T
(24) 63.65 661.95 T
(25) 63.65 650.95 T
2 12 Q
(2.8  dbio.lisp) 63.65 628.95 T
6 9 Q
(1) 63.65 611.95 T
(\050unless \050find-package \322BUGS\323\051) 83.49 611.95 T
(2) 63.65 600.95 T
(  \050make-package \322BUGS\323 :use \324\050\322LISP\323 \322PCL\323 \322KR\323 \322PROSPERO\323\051\051\051) 83.49 600.95 T
(3) 63.65 589.95 T
(\050in-package \322BUGS\323\051) 83.49 589.95 T
(4) 63.65 578.95 T
(5) 63.65 567.95 T
(;;;) 83.49 567.95 T
(6) 63.65 556.95 T
(;;; dbio.lisp) 83.49 556.95 T
(7) 63.65 545.95 T
(;;; Various things for saving, loading, uploading and downloading) 83.49 545.95 T
(8) 63.65 534.95 T
(;;; the record database.) 83.49 534.95 T
(9) 63.65 523.95 T
(;;;) 83.49 523.95 T
(10) 63.65 512.95 T
(11) 63.65 501.95 T
(;;;) 83.49 501.95 T
(12) 63.65 490.95 T
(;;; record-to-wireform provides a printable \050transmissable\051 version of each) 83.49 490.95 T
(13) 63.65 479.95 T
(;;; record type) 83.49 479.95 T
(14) 63.65 468.95 T
(;;;) 83.49 468.95 T
(15) 63.65 457.95 T
(\050defmethod record-to-wireform \050\050record <problem>\051\051) 83.49 457.95 T
(16) 63.65 446.95 T
(  \050list \324<problem> \324id \050record-id record\051 \324author \050record-author record\051) 83.49 446.95 T
(17) 63.65 435.95 T
(        \324symptoms \050problem-symptoms record\051) 83.49 435.95 T
(18) 63.65 424.95 T
(        \324customer \050problem-customer record\051 \324contact \050problem-contact record\051) 83.49 424.95 T
(19) 63.65 413.95 T
(        \324platform \050problem-platform record\051 \324date \050problem-date record\051) 83.49 413.95 T
(20) 63.65 402.95 T
(        \324comments \050problem-comments record\051\051\051) 83.49 402.95 T
(21) 63.65 391.95 T
(22) 63.65 380.95 T
(\050defmethod record-to-wireform \050\050record <workaround>\051\051) 83.49 380.95 T
(23) 63.65 369.95 T
(  \050list \324<workaround> \324id \050record-id record\051 \324author \050record-author record\051) 83.49 369.95 T
(24) 63.65 358.95 T
(        \324text \050workaround-text record\051) 83.49 358.95 T
(25) 63.65 347.95 T
(        \324platform \050workaround-platform record\051\051\051) 83.49 347.95 T
(26) 63.65 336.95 T
(27) 63.65 325.95 T
(\050defmethod record-to-wireform \050\050record <fix>\051\051) 83.49 325.95 T
(28) 63.65 314.95 T
(  \050list \324<fix> \324id \050record-id record\051 \324author \050record-author record\051) 83.49 314.95 T
(29) 63.65 303.95 T
(        \324reference \050fix-reference record\051) 83.49 303.95 T
(30) 63.65 292.95 T
(        \324platform \050fix-platform record\051\051\051) 83.49 292.95 T
(31) 63.65 281.95 T
(32) 63.65 270.95 T
(\050defmethod record-to-wireform \050\050record <comment>\051\051) 83.49 270.95 T
(33) 63.65 259.95 T
(  \050list \324<comment> \324id \050record-id record\051 \324author \050record-author record\051) 83.49 259.95 T
(34) 63.65 248.95 T
(        \324text \050comment-text record\051\051\051) 83.49 248.95 T
(35) 63.65 237.95 T
(36) 63.65 226.95 T
(\050defmethod record-to-wireform \050\050record <bug>\051\051) 83.49 226.95 T
(37) 63.65 215.95 T
(  \050list \324<bug> \324id \050record-id record\051 \324author \050record-author record\051) 83.49 215.95 T
(38) 63.65 204.95 T
(        \324symptoms \050bug-symptoms record\051) 83.49 204.95 T
(39) 63.65 193.95 T
(        \324hypothesis \050bug-hypothesis record\051) 83.49 193.95 T
(40) 63.65 182.95 T
(        \324problems \050bug-problems record\051\051\051) 83.49 182.95 T
(41) 63.65 171.95 T
(42) 63.65 160.95 T
(;;;) 83.49 160.95 T
(43) 63.65 149.95 T
(;;; wireform-to-record does the inverse) 83.49 149.95 T
(44) 63.65 138.95 T
(;;;) 83.49 138.95 T
(45) 63.65 127.95 T
(46) 63.65 116.95 T
(\050defun wireform-to-record \050wireform\051) 83.49 116.95 T
(47) 63.65 105.95 T
(  \050let* \050\050type \050first wireform\051\051) 83.49 105.95 T
(48) 63.65 94.95 T
( \050id \050third wireform\051\051) 135.65 94.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 130
%%Page: "131" 131
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
45.65 753.95 531.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples.) 387.22 763.81 T
45.65 58 531.65 69.95 R
7 X
V
0 X
(131) 519.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45.65 87.95 531.65 744.95 R
7 X
V
6 9 Q
0 X
(49) 45.65 738.95 T
( \050initlist \050cdddr wireform\051\051) 117.65 738.95 T
(50) 45.65 727.95 T
( \050record \050make-instance type\051\051\051) 117.65 727.95 T
(51) 45.65 716.95 T
(    \050remhash \050record-id record\051 *record-table*\051) 65.49 716.95 T
(52) 45.65 705.95 T
(    \050dolist \050pair \050pairify initlist\051\051) 65.49 705.95 T
(53) 45.65 694.95 T
(    \050setf \050slot-value record \050car pair\051\051 \050cdr pair\051\051\051) 117.65 694.95 T
(54) 45.65 683.95 T
(    \050setf \050record-id record\051 id\051) 65.49 683.95 T
(55) 45.65 672.95 T
(    \050record-object record\051\051\051) 65.49 672.95 T
(56) 45.65 661.95 T
(57) 45.65 650.95 T
(\050defun database-to-wireform \050database\051) 65.49 650.95 T
(58) 45.65 639.95 T
(  \050let \050\050dblist nil\051\051) 65.49 639.95 T
(59) 45.65 628.95 T
(    \050maphash #\325\050lambda \050key value\051) 65.49 628.95 T
(60) 45.65 617.95 T
( \050declare \050ignore key\051\051) 189.65 617.95 T
(61) 45.65 606.95 T
(                 \050push \050record-to-wireform value\051 dblist\051\051 database\051) 65.49 606.95 T
(62) 45.65 595.95 T
(    dblist\051\051) 65.49 595.95 T
(63) 45.65 584.95 T
(64) 45.65 573.95 T
(\050defun dump-database \050\051) 65.49 573.95 T
(65) 45.65 562.95 T
(  \050database-to-wireform *record-table*\051\051) 65.49 562.95 T
(66) 45.65 551.95 T
(67) 45.65 540.95 T
(;;;) 65.49 540.95 T
(68) 45.65 529.95 T
(;;; file manipulation) 65.49 529.95 T
(69) 45.65 518.95 T
(;;;) 65.49 518.95 T
(70) 45.65 507.95 T
(71) 45.65 496.95 T
(\050defun write-database \050file database\051) 65.49 496.95 T
(72) 45.65 485.95 T
(  \050with-open-file \050stream file :direction :output\051) 65.49 485.95 T
(73) 45.65 474.95 T
(     \050write \050database-to-wireform database\051 :stream stream\051\051\051) 65.49 474.95 T
(74) 45.65 463.95 T
(75) 45.65 452.95 T
(\050defun read-database \050file\051) 65.49 452.95 T
(76) 45.65 441.95 T
(  \050with-open-file \050stream file :direction :input\051) 65.49 441.95 T
(77) 45.65 430.95 T
(     \050read stream\051\051\051) 65.49 430.95 T
(78) 45.65 419.95 T
(79) 45.65 408.95 T
(\050defun load-database \050file\051) 65.49 408.95 T
(80) 45.65 397.95 T
(  \050let \050\050db \050read-database file\051\051\051) 65.49 397.95 T
(81) 45.65 386.95 T
(    \050dolist \050record db\051) 65.49 386.95 T
(82) 45.65 375.95 T
(      \050wireform-to-record record\051\051\051\051) 65.49 375.95 T
(83) 45.65 364.95 T
(84) 45.65 353.95 T
(\050defun new-database \050file\051) 65.49 353.95 T
(85) 45.65 342.95 T
(  \050clrhash *record-table*\051) 65.49 342.95 T
(86) 45.65 331.95 T
(  \050load-database file\051\051) 65.49 331.95 T
(87) 45.65 320.95 T
(88) 45.65 309.95 T
(;;;) 65.49 309.95 T
(89) 45.65 298.95 T
(;;; host-based database manipulation) 65.49 298.95 T
(90) 45.65 287.95 T
(;;;) 65.49 287.95 T
(91) 45.65 276.95 T
(92) 45.65 265.95 T
(\050defun host-load-database \050host\051) 65.49 265.95 T
(93) 45.65 254.95 T
(  \050let \050\050db \050host-read-database host\051\051\051) 65.49 254.95 T
(94) 45.65 243.95 T
(    \050dolist \050record db\051) 65.49 243.95 T
(95) 45.65 232.95 T
(      \050wireform-to-record record\051\051\051\051) 65.49 232.95 T
(96) 45.65 221.95 T
(97) 45.65 210.95 T
(\050defun host-read-database \050host\051) 65.49 210.95 T
(98) 45.65 199.95 T
(  \050let* \050\050wire \050prospero::host-wire host\051\051) 65.49 199.95 T
(99) 45.65 188.95 T
( \050db \050wire:remote-value wire \050dump-database\051\051\051\051) 117.65 188.95 T
(100) 45.65 177.95 T
(    \050dolist \050record db\051) 65.49 177.95 T
(101) 45.65 166.95 T
(      \050wireform-to-record record\051\051\051\051) 65.49 166.95 T
(102) 45.65 155.95 T
(103) 45.65 144.95 T
(\050defun host-new-database \050file\051) 65.49 144.95 T
(104) 45.65 133.95 T
(  \050clrhash *record-table*\051) 65.49 133.95 T
(105) 45.65 122.95 T
(  \050host-load-database file\051\051) 65.49 122.95 T
(106) 45.65 111.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 131
%%Page: "132" 132
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 0 0 0.25 0.75 0.75 0.75]
 15 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 753.95 549.65 769.14 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Appendix A: Code of Application Examples) 63.65 763.81 T
(.) 547.65 763.81 T
63.65 58 549.65 69.95 R
7 X
V
0 X
(132) 63.65 64.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63.65 87.95 549.65 744.95 R
7 X
V
2 12 Q
0 X
(2.9  misc.lisp) 63.65 736.95 T
6 9 Q
(1) 63.65 719.95 T
(\050unless \050find-package \322BUGS\323\051) 83.49 719.95 T
(2) 63.65 708.95 T
(  \050make-package \322BUGS\323 :use \324\050\322LISP\323 \322PCL\323 \322KR\323 \322PROSPERO\323\051\051\051) 83.49 708.95 T
(3) 63.65 697.95 T
(\050in-package \322BUGS\323\051) 83.49 697.95 T
(4) 63.65 686.95 T
(5) 63.65 675.95 T
(\050defvar *host* \050unix:unix-gethostname\051\051) 83.49 675.95 T
(6) 63.65 664.95 T
(\050defvar *ident* \050concatenate \324string *host*) 83.49 664.95 T
(7) 63.65 653.95 T
(     \050princ-to-string \050unix:unix-getpid\051\051\051\051) 279.65 653.95 T
(8) 63.65 642.95 T
(9) 63.65 631.95 T
(\050defun getenv \050var\051) 83.49 631.95 T
(10) 63.65 620.95 T
(  \050cdr \050assoc \050intern var \050find-package \322KEYWORD\323\051\051 ext:*environment-list*\051\051\051) 83.49 620.95 T
(11) 63.65 609.95 T
(12) 63.65 598.95 T
(\050defun generate-id \050\051) 83.49 598.95 T
(13) 63.65 587.95 T
(  \050gentemp \050concatenate \324string \322BUGS-\323 \050string-upcase *host*\051\051\051\051) 83.49 587.95 T
(14) 63.65 576.95 T
(15) 63.65 565.95 T
(\050defun pairify \050list\051) 83.49 565.95 T
(16) 63.65 554.95 T
(  \050if \050null list\051 nil) 83.49 554.95 T
(17) 63.65 543.95 T
(    \050let \050\050a \050car list\051\051) 83.49 543.95 T
(18) 63.65 532.95 T
(  \050b \050cadr list\051\051\051) 135.65 532.95 T
(19) 63.65 521.95 T
(      \050cons \050cons a b\051 \050pairify \050cddr list\051\051\051\051\051\051) 83.49 521.95 T
(20) 63.65 510.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 132
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 132
%%DocumentFonts: Times-Roman
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Times-Italic
%%+ Times-Bold
%%+ Helvetica-Oblique
%%+ Courier
%%EOF
